{
    "class": "Workflow",
    "cwlVersion": "v1.0",
    "id": "m3006_td/srb-exome/gatk-bp-wgs/0",
    "label": "GATK Germline Workflow",
    "$namespaces": {
        "sbg": "https://sevenbridges.com"
    },
    "inputs": [
        {
            "id": "reference_sequence",
            "sbg:fileTypes": "FASTA, FA",
            "type": "File",
            "secondaryFiles": [
                ".fai",
                "^.dict"
            ],
            "sbg:x": -480.3198547363281,
            "sbg:y": 100.58611297607422
        },
        {
            "id": "bwa_reference_archive",
            "sbg:fileTypes": "TAR",
            "type": "File",
            "sbg:x": -480.31182861328125,
            "sbg:y": 222.47128295898438
        },
        {
            "id": "haplotype_map",
            "type": "File?",
            "sbg:x": -482.6017761230469,
            "sbg:y": 718.5470581054688
        },
        {
            "id": "UDPath",
            "type": "File?",
            "sbg:x": -467.59197998046875,
            "sbg:y": -407.5357666015625
        },
        {
            "id": "MeanPath",
            "type": "File?",
            "sbg:x": -469.59197998046875,
            "sbg:y": -283.0984802246094
        },
        {
            "id": "BedPath",
            "sbg:fileTypes": "BED",
            "type": "File",
            "sbg:x": -474.5919494628906,
            "sbg:y": -149.78665161132812
        },
        {
            "id": "dbsnp",
            "sbg:fileTypes": "VCF",
            "type": "File?",
            "sbg:x": -487,
            "sbg:y": 468.0000305175781
        },
        {
            "id": "ref_dict",
            "sbg:fileTypes": "DICT",
            "type": "File",
            "sbg:x": -483.5075988769531,
            "sbg:y": 344.253173828125
        },
        {
            "id": "genotypes",
            "sbg:fileTypes": "VCF, GEL",
            "type": "File?",
            "sbg:x": -483.5610656738281,
            "sbg:y": 837.5877685546875
        },
        {
            "id": "wgs_coverage_interval_list",
            "sbg:fileTypes": "BED",
            "type": "File?",
            "sbg:x": -464.2791442871094,
            "sbg:y": -530.8681030273438
        },
        {
            "id": "read_length",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "read_length_1",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "wgs_calling_interval_lists",
            "type": "File",
            "sbg:x": -467.307861328125,
            "sbg:y": -651.8518676757812
        },
        {
            "id": "scatter_count",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "break_bands_at_multiples_of",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "interval_padding",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "wgs_evaluation_interval_list",
            "sbg:fileTypes": "BED, INTERVALS",
            "type": "File?",
            "sbg:x": -465.3508605957031,
            "sbg:y": -782.4122924804688
        },
        {
            "id": "known_indels",
            "sbg:fileTypes": "VCF",
            "type": "File[]?",
            "sbg:x": -482.95928955078125,
            "sbg:y": 597.904541015625
        },
        {
            "id": "threads",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "compression_level",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "library_name",
            "type": "string?",
            "sbg:exposed": true
        },
        {
            "id": "platform_unit",
            "type": "string?",
            "sbg:exposed": true
        },
        {
            "id": "platform",
            "type": "string?",
            "sbg:exposed": true
        },
        {
            "id": "input_bams",
            "type": "File[]?",
            "sbg:x": -736.79833984375,
            "sbg:y": 125
        },
        {
            "id": "fastq_list",
            "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ",
            "type": "File[]?",
            "sbg:x": -1137.4859619140625,
            "sbg:y": -142.354736328125
        },
        {
            "id": "sample_name",
            "type": "string?",
            "sbg:exposed": true
        },
        {
            "id": "mem_per_job",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "memory_per_job",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "cpu_per_job",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "memory_per_job_1",
            "type": "int?",
            "sbg:exposed": true
        },
        {
            "id": "vep_cache_file",
            "sbg:fileTypes": "TAR.GZ",
            "type": "File",
            "label": "VEP cache file",
            "sbg:x": 2981.555908203125,
            "sbg:y": -979.87109375
        }
    ],
    "outputs": [
        {
            "id": "vcf_summary_metrics",
            "outputSource": [
                "picard_collectvariantcallingmetrics/summary_metrics"
            ],
            "sbg:fileTypes": "VARIANT_CALLING_SUMMARY_METRICS",
            "type": "File?",
            "sbg:x": 3241.638916015625,
            "sbg:y": -171.48953247070312
        },
        {
            "id": "vcf_detail_metrics",
            "outputSource": [
                "picard_collectvariantcallingmetrics/detail_metrics"
            ],
            "sbg:fileTypes": "VARIANT_CALLING_DETAIL_METRICS",
            "type": "File?",
            "sbg:x": 3243.91650390625,
            "sbg:y": 38.049583435058594
        },
        {
            "id": "raw_vcf",
            "outputSource": [
                "mergevcfs/output"
            ],
            "sbg:fileTypes": "VCF",
            "type": "File?",
            "sbg:x": 3239.76220703125,
            "sbg:y": -453.10589599609375
        },
        {
            "id": "status",
            "outputSource": [
                "gatk_validatevariants/status"
            ],
            "type": "string?",
            "sbg:x": 3241.663330078125,
            "sbg:y": -325.6442565917969
        },
        {
            "id": "validate_cram_report",
            "outputSource": [
                "gatk_validatesamfile/report"
            ],
            "sbg:fileTypes": "VALIDATION_REPORT, TXT",
            "type": "File?",
            "sbg:x": 2264.414306640625,
            "sbg:y": 149.87037658691406
        },
        {
            "id": "quality_yield_metrics",
            "outputSource": [
                "collectqualityyieldmetrics/quality_yield_metrics"
            ],
            "sbg:fileTypes": "TXT",
            "type": "File?",
            "sbg:x": 90.08648681640625,
            "sbg:y": -494.9201965332031
        },
        {
            "id": "read_group_checksum",
            "outputSource": [
                "calculatereadgroupchecksum/out_md5_file"
            ],
            "sbg:fileTypes": "MD5, READ_GROUP.MD5",
            "type": "File?",
            "sbg:x": 1757.7718505859375,
            "sbg:y": -819.4052124023438
        },
        {
            "id": "checkfingerprint_detailed_metrics",
            "outputSource": [
                "picard_checkfingerprint/fingerprinting_detailed_metrics"
            ],
            "sbg:fileTypes": "fingerprinting_detailed_metrics",
            "type": "File?",
            "sbg:x": 1765.9405517578125,
            "sbg:y": 661.445556640625
        },
        {
            "id": "checkfingerprint_summary_metrics",
            "outputSource": [
                "picard_checkfingerprint/fingerprinting_summary_metrics"
            ],
            "sbg:fileTypes": "fingerprinting_detail_metrics",
            "type": "File?",
            "sbg:x": 1764.2672119140625,
            "sbg:y": 536.7227783203125
        },
        {
            "id": "wgs_metrics",
            "outputSource": [
                "picard_collectwgsmetrics/wgs_metrics"
            ],
            "sbg:fileTypes": "TXT",
            "type": "File?",
            "sbg:x": 1762.10888671875,
            "sbg:y": -578.227783203125
        },
        {
            "id": "raw_wgs_metrics",
            "outputSource": [
                "picard_collectrawwgsmetrics/metrics_file"
            ],
            "sbg:fileTypes": "TXT",
            "type": "File?",
            "sbg:x": 1754.1787109375,
            "sbg:y": -699.227783203125
        },
        {
            "id": "gather_bqrs_reports",
            "outputSource": [
                "gatherbqsrreports/out_gathered_reports"
            ],
            "sbg:fileTypes": "GRP",
            "type": "File?",
            "sbg:x": 991.2177734375,
            "sbg:y": -233.38612365722656
        },
        {
            "id": "out_cram",
            "outputSource": [
                "converttocram/out_cram"
            ],
            "sbg:fileTypes": "CRAM",
            "type": "File?",
            "sbg:x": 1764.5531005859375,
            "sbg:y": 796.7863159179688
        },
        {
            "id": "out_cram_md5",
            "outputSource": [
                "converttocram/out_cram_md5"
            ],
            "sbg:fileTypes": "MD5",
            "type": "File?",
            "sbg:x": 1764.3861083984375,
            "sbg:y": 922.564453125
        },
        {
            "id": "fingerprinting_summary_metrics",
            "outputSource": [
                "crosscheckfingerprints/fingerprinting_summary_metrics"
            ],
            "sbg:fileTypes": "fingerprinting_detail_metrics",
            "type": "File?",
            "sbg:x": 882.7824096679688,
            "sbg:y": 271.8067321777344
        },
        {
            "id": "output_metrics",
            "outputSource": [
                "picard_markduplicates/output_metrics"
            ],
            "sbg:fileTypes": "METRICS",
            "type": "File?",
            "sbg:x": 272.3836669921875,
            "sbg:y": 268.7222595214844
        },
        {
            "id": "out_alignments",
            "outputSource": [
                "picard_gatherbamfiles/out_alignments"
            ],
            "sbg:fileTypes": "BAM",
            "type": "File?",
            "sbg:x": 1757.406494140625,
            "sbg:y": 410.3466491699219
        },
        {
            "id": "multiple_metrics",
            "outputSource": [
                "CollectUnsortedReadgroupBamQualityMetrics/multiple_metrics"
            ],
            "sbg:fileTypes": "TXT",
            "type": "File[]",
            "sbg:x": 477.8017272949219,
            "sbg:y": -507.1583557128906
        },
        {
            "id": "selfSM",
            "outputSource": [
                "checkcontamination/selfSM"
            ],
            "sbg:fileTypes": "SELFSM",
            "type": "File?",
            "sbg:x": 733.8341064453125,
            "sbg:y": -423.23773193359375
        },
        {
            "id": "contamination",
            "outputSource": [
                "checkcontamination/contamination"
            ],
            "type": "float?",
            "sbg:x": 733.4949951171875,
            "sbg:y": -237.554443359375
        },
        {
            "id": "multiple_metrics_1",
            "outputSource": [
                "picard_collectmultiplemetrics_1/multiple_metrics"
            ],
            "sbg:fileTypes": "TXT",
            "type": "File[]",
            "sbg:x": 1761.8411865234375,
            "sbg:y": -469.68243408203125
        },
        {
            "id": "multiple_metrics_2",
            "outputSource": [
                "picard_collectmultiplemetrics/multiple_metrics"
            ],
            "sbg:fileTypes": "TXT",
            "type": "File[]",
            "sbg:x": 1755.0494384765625,
            "sbg:y": 284.7722473144531
        },
        {
            "id": "filtered_vcf",
            "outputSource": [
                "mergevcfs_1/output"
            ],
            "sbg:fileTypes": "VCF",
            "type": "File?",
            "sbg:x": 3239.4248046875,
            "sbg:y": -703.7896728515625
        },
        {
            "id": "vep_output_file",
            "outputSource": [
                "variant_effect_predictor_90_5_cwl1_0/vep_output_file"
            ],
            "sbg:fileTypes": "VCF, TXT, JSON, TAB",
            "type": "File?",
            "sbg:x": 3652.6181640625,
            "sbg:y": -943.2677001953125
        },
        {
            "id": "vep_warning_file",
            "outputSource": [
                "variant_effect_predictor_90_5_cwl1_0/warning_file"
            ],
            "sbg:fileTypes": "TXT",
            "type": "File?",
            "label": "VEP warning file",
            "sbg:x": 3565.17626953125,
            "sbg:y": -1085.6102294921875
        },
        {
            "id": "GVCF",
            "outputSource": [
                "mergevcfs_GVCFs/output"
            ],
            "sbg:fileTypes": "VCF",
            "type": "File?",
            "sbg:x": 2644.934326171875,
            "sbg:y": -134.69708251953125
        }
    ],
    "steps": [
        {
            "id": "collectqualityyieldmetrics",
            "in": [
                {
                    "id": "input_bam",
                    "source": "sbg_flattenlists/output_list"
                },
                {
                    "id": "use_original_qualities",
                    "default": "true"
                }
            ],
            "out": [
                {
                    "id": "quality_yield_metrics"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectqualityyieldmetrics/2",
                "baseCommand": [
                    "java"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "I=",
                        "sbg:category": "File inputs",
                        "id": "input_bam",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Input BAM",
                        "doc": "Input SAM or BAM file. This input is required and it has to be coordinate sorted.",
                        "sbg:fileTypes": "SAM, BAM"
                    },
                    {
                        "sbg:altPrefix": "AS=",
                        "sbg:toolDefaultValue": "true",
                        "sbg:category": "Optional Tool Arguments",
                        "id": "assume_sorted",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "assume_sorted"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ASSUME_SORTED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 7
                        },
                        "label": "Assume sorted",
                        "doc": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Tool Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "include_secondary_alignments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_secondary_alignments"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INCLUDE_SECONDARY_ALIGNMENTS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Include secondary alignments",
                        "doc": "If true, include bases from secondary alignments in metrics. Setting to true may cause double-counting of bases if there are secondary alignments in the input file. Default value: false. Possible values: {true, false}"
                    },
                    {
                        "sbg:category": "Optional Tool Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "include_supplemental_alignments",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_supplemental_alignments"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INCLUDE_SUPPLEMENTAL_ALIGNMENTS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 9
                        },
                        "label": "Include supplemental alignments",
                        "doc": "If true, include bases from supplemental alignments in metrics. Setting to true may cause double-counting of bases if there are supplemental alignments in the input file. Default value: false. Possible values: {true, false}"
                    },
                    {
                        "sbg:category": "Optional Tool Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "stop_after",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Stop after",
                        "doc": "Stop after processing N reads, mainly for debugging."
                    },
                    {
                        "sbg:altPrefix": "OQ=",
                        "sbg:category": "Optional Tool Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "use_original_qualities",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "use_original_qualities"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "USE_ORIGINAL_QUALITIES=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Use original qualities",
                        "doc": "If available in the OQ tag, use the original quality scores as inputs instead of the quality scores in the QUAL field. Default value: true. Possible values: {true, false}"
                    },
                    {
                        "sbg:toolDefaultValue": "500000",
                        "sbg:category": "Optional Common Arguments",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 16
                        },
                        "label": "Max records in RAM",
                        "doc": "When writing files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort the file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:altPrefix": "R=",
                        "sbg:category": "File inputs",
                        "id": "reference_sequence",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 18
                        },
                        "label": "Reference sequence",
                        "doc": "Reference sequence file. Default value: null.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "SILENT",
                        "sbg:category": "Optional Common Arguments",
                        "id": "validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VALIDATION_STRINGENCY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 19,
                            "valueFrom": "${\n    if (self == 0) {\n        self = null;\n        inputs.validation_stringency = null\n    };\n\n\n    if (inputs.validation_stringency) {\n        return inputs.validation_stringency\n    } else {\n        return \"SILENT\"\n    }\n}"
                        },
                        "label": "Validation stringency",
                        "doc": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:category": "Optional Common Arguments",
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048MB for single threaded jobs."
                    }
                ],
                "outputs": [
                    {
                        "id": "quality_yield_metrics",
                        "doc": "A set of metrics used to describe the general quality of a BAM file.",
                        "label": "Quality yield metrics",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*quality_yield_metrics.txt",
                            "outputEval": "$(inheritMetadata(self, inputs.input_bam))"
                        },
                        "sbg:fileTypes": "TXT"
                    }
                ],
                "doc": "[Picard CollectQualityYieldMetrics](https://software.broadinstitute.org/gatk/documentation/tooldocs/current/picard_analysis_CollectQualityYieldMetrics.php) collects metrics about reads that pass quality thresholds and Illumina-specific filters. This tool evaluates the overall quality of reads within a bam file containing one read group. The output indicates the total numbers of bases within a read group that pass a minimum base quality score threshold and (in the case of Illumina data) pass Illumina quality filters as described in the [GATK Dictionary entry](https://www.broadinstitute.org/gatk/guide/article?id=6329).\n\n###**Input**  \n\n* Required: BAM/SAM file\n* Optional: Reference FASTA file\n\n###**Output**\n\n* _.quality_yield_metrics.txt_ file containing metrics about reads that pass quality thresholds and Illumina-specific filters \n\n###**Common Use Cases**\n\n    // java -jar picard.jar CollectQualityYieldMetrics \\\n           I=input.bam \\\n           O=quality_yield_metrics.txt \\\n\n###**Changes Introduced by Seven Bridges**\n\nThe list of arguments that are excluded due to poor applicability in the cloud context or for other reasons:\n\n```\n       --help\n       --stdhelp\n       --version\n```\n\n###**Common Issues and Important Notes**\n\nInput BAM or SAM file needs to be coordinate sorted in order to be processed and if this is not the case the tool will fail. If the tool returns an error message in the following form:\n\n```\n        ...\n        Requesting earlier reference sequence: <n1> < <n2>...\n        ...\n\n```\nit means that the input file is not sorted. To resolve this issue, Picard SortSam tool can be used to produce a sorted BAM/SAM file.\n\nAnother issue that may pop up is the lack of reference dictionary file in the project where the task is being executed. **This applies only to those cases wherein reference sequence is provided as an input**. The platform automatically recognizes (because the tool wrapper is designed so) that the reference sequence dictionary should go together with the reference input and will attempt to use it in the analysis. However, if the corresponding _.dict_ file is not present, the analysis will fail, the reason being that the reference FASTA file cannot be used solely.",
                "label": "Picard CollectQualityYieldMetrics",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx2000M'\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CollectQualityYieldMetrics"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.input_bam) {\n        filename = [].concat(inputs.input_bam)[0].path\n\n        return filename.split('.').slice(0, -1).concat(\"quality_yield_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        return inputs.memory_per_job\n    }\n    return 2000\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552918686,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552918726,
                        "sbg:revisionNotes": "Copy od revision 8 from Vlada's project."
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552939491,
                        "sbg:revisionNotes": "Description update"
                    }
                ],
                "sbg:image_url": null,
                "sbg:toolkit": "Picard",
                "sbg:toolkitVersion": "2.15.0-SNAPSHOT",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:categories": [
                    "Quality Control",
                    "SAM/BAM Processing"
                ],
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/2.3.1"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectqualityyieldmetrics/2",
                "sbg:revision": 2,
                "sbg:revisionNotes": "Description update",
                "sbg:modifiedOn": 1552939491,
                "sbg:modifiedBy": "ana_d",
                "sbg:createdOn": 1552918686,
                "sbg:createdBy": "ana_d",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "ana_d"
                ],
                "sbg:latestRevision": 2,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "ac444d1f52aaf263dda9260693abaca3557791bc60511c02008f1582eee4b7265"
            },
            "label": "CollectQualityYieldMetrics",
            "scatter": [
                "input_bam"
            ],
            "scatterMethod": "dotproduct",
            "sbg:x": -203.13525390625,
            "sbg:y": -296.212890625
        },
        {
            "id": "samtofastqandbwamemandmba",
            "in": [
                {
                    "id": "input_bam",
                    "source": "sbg_flattenlists/output_list"
                },
                {
                    "id": "bwa_reference_archive",
                    "source": "bwa_reference_archive"
                },
                {
                    "id": "reference_sequence",
                    "source": "reference_sequence"
                },
                {
                    "id": "compression_level",
                    "source": "compression_level"
                },
                {
                    "id": "threads",
                    "default": 16,
                    "source": "threads"
                }
            ],
            "out": [
                {
                    "id": "aligned_reads"
                },
                {
                    "id": "aligned_reads_size"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/samtofastqandbwamemandmba/47",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "I=",
                        "sbg:category": "Input files",
                        "id": "input_bam",
                        "type": "File?",
                        "label": "Input BAM",
                        "doc": "Input SAM/BAM file to extract reads from. Required.",
                        "sbg:fileTypes": "BAM, SAM, CRAM"
                    },
                    {
                        "sbg:category": "Input files",
                        "id": "bwa_reference_archive",
                        "type": "File",
                        "label": "BWA reference archive",
                        "sbg:fileTypes": "TAR"
                    },
                    {
                        "sbg:category": "Input files",
                        "sbg:altPrefix": "R=",
                        "id": "reference_sequence",
                        "type": "File",
                        "label": "Reference sequence",
                        "doc": "Reference sequence file.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "5",
                        "id": "compression_level",
                        "type": "int?",
                        "label": "Compression level",
                        "doc": "Compression level for output BAM file.\nDefault value: 5. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "3000",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "This input allows a user to set the desired memory requirement when running a tool or adding it to a workflow. This value also gets propagated to the -Xmx parameter for each java command. The value of the input should be specified in megabytes. Default value is 3000 MiB."
                    },
                    {
                        "sbg:toolDefaultValue": "500000",
                        "sbg:category": "Optional Common Arguments",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "label": "Max records in RAM",
                        "doc": "When writing files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort the file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPUs per job",
                        "doc": "Number of CPUs used per one job."
                    },
                    {
                        "sbg:altPrefix": "-t",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "16",
                        "id": "threads",
                        "type": "int?",
                        "label": "Threads",
                        "doc": "Number of threads"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Prefix for the output BAM file"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "read_group_header",
                        "type": "string?",
                        "label": "Read group header"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "rg_id",
                        "type": "string?",
                        "label": "Read group ID"
                    },
                    {
                        "sbg:altPrefix": "Optional Arguments",
                        "id": "rg_data_submitting_center",
                        "type": "string?",
                        "label": "Data submitting center"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "rg_library_id",
                        "type": "string?",
                        "label": "Library ID"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "rg_median_fragment_length",
                        "type": "string?",
                        "label": "Read group median fragment length"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "rg_platform",
                        "type": "string?",
                        "label": "Platform"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "rg_platform_unit_id",
                        "type": "string?",
                        "label": "Platform unit ID"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "rg_sample_id",
                        "type": "string?",
                        "label": "Sample ID"
                    }
                ],
                "outputs": [
                    {
                        "id": "aligned_reads",
                        "label": "Aligned reads",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.unsorted.bam"
                        },
                        "secondaryFiles": [
                            ".bai"
                        ],
                        "sbg:fileTypes": "BAM"
                    },
                    {
                        "id": "aligned_reads_size",
                        "doc": "Size of the output BAM file in gigabytes.",
                        "label": "Aligned reads size",
                        "type": "float?",
                        "outputBinding": {
                            "glob": "*.bam",
                            "outputEval": "${\n    return parseFloat(self[0].size)/1024/1024/1024\n}"
                        }
                    }
                ],
                "doc": "SamToFastqAndBwaMemAndMba is a tool which consists of multiple piped commands, recommended by Broad Institute for aligning the paired reads from unmapped BAM file (see [GATK Germline Best Practice GitHub page](https://github.com/gatk-workflows/broad-prod-wgs-germline-snps-indels/blob/master/PairedEndSingleSampleWf.wdl)).\n\n###Common Use Cases\n\nThe tool consists of three major steps:\n\n**Step 1**: [Picard SamToFastq](https://broadinstitute.github.io/picard/command-line-overview.html#SamToFastq) – takes read identifiers, read sequences, and base quality scores to write a Sanger FASTQ format file.\n\n    // Picard SamToFastq command from GATK Best Practice pipeline\n    java -Xms5000m -jar /usr/gitc/picard.jar \\\n         SamToFastq \\\n         INPUT=${input_bam} \\\n         FASTQ=/dev/stdout \\\n         INTERLEAVE=true \\\n         NON_PF=true | \\\n\nThis produces a FASTQ file in which all extant metadata, i.e. read group information, alignment information, flags and tags are purged. What remains are the read query names prefaced with the @ symbol, read sequences and read base quality scores.\n\nAssuming paired reads BAM file, SamToFastq's INTERLEAVE is set to true. During the conversion to FASTQ format, the query name of reads in a pair are marked with /1 or /2 and paired reads are retained in the same FASTQ file. Subsequently, BWA aligner accepts interleaved FASTQ files given the -p option.\n\n**Step 2**: [BWA-MEM](http://bio-bwa.sourceforge.net/bwa.shtml) – takes FASTQ file from the previous step and aligns the reads to the reference sequence.\n\n\t// BWA-MEM command from GATK Best Practice pipeline\n\t/usr/gitc/bwa mem -K 100000000 -p -v 3 -t 16 -Y /dev/stdin - 2> >(tee bwa.stderr.log >&2) | \\\n\nIn this workflow, alignment is the most compute intensive and will take the longest time. GATK's variant discovery workflow recommends Burrows-Wheeler Aligner's maximal exact matches (BWA-MEM) algorithm ([Li 2013 reference](http://arxiv.org/abs/1303.3997); [Li 2014 benchmarks](http://bioinformatics.oxfordjournals.org/content/30/20/2843.long); [homepage](http://bio-bwa.sourceforge.net/); [manual](http://bio-bwa.sourceforge.net/bwa.shtml)). BWA-MEM is suitable for aligning high-quality long reads ranging from 70 bp to 1 Mbp against a large reference genome such as the human genome.\n\nIn the command listed above, BWA-MEM takes paired reads from standard input (`/dev/stdin`) and writes aligned reads to standard output (`-`) while stadard error log is written to `bwa.stderr.log` file (this step was omitted on SBG platform due to redirecting limitations when using piping within the tool; see _Changes Introduced by Seven Bridges_ for more information).\n\nBWA alignment requires an indexed reference genome file. Indexing is specific to algorithms. To index the human genome for this specific version of BWA, BWA index 0.7.15-r1140 app is used provided the reference genome file on its input, e.g. human_g1k_v37_decoy.fasta. This produces a tarbundle containing five index files with the extensions `amb`, `ann`, `bwt`, `pac` and `sa`. The tarbundle is then used as an input for SamToFastqAndBwaMemAndMba app.\n\n**Step 3**: [Picard MergeBamAlignment](https://broadinstitute.github.io/picard/command-line-overview.html#MergeBamAlignment) – Merge alignment data from a SAM or BAM with data in an unmapped BAM file. \n\n\t// Picard MergeBamAlignment command from GATK Best Practice pipeline\n\tjava -Dsamjdk.compression_level=${compression_level} -Xms3000m -jar /usr/gitc/picard.jar \\\n         MergeBamAlignment \\\n         VALIDATION_STRINGENCY=SILENT \\\n         EXPECTED_ORIENTATIONS=FR \\\n         ATTRIBUTES_TO_RETAIN=X0 \\\n         ATTRIBUTES_TO_REMOVE=NM \\\n         ATTRIBUTES_TO_REMOVE=MD \\\n         ALIGNED_BAM=/dev/stdin \\\n         UNMAPPED_BAM=${input_bam} \\\n         OUTPUT=${output_bam_basename}.bam \\\n         REFERENCE_SEQUENCE=${ref_fasta} \\\n         PAIRED_RUN=true \\\n         SORT_ORDER=\"unsorted\" \\\n         IS_BISULFITE_SEQUENCE=false \\\n         ALIGNED_READS_ONLY=false \\\n         CLIP_ADAPTERS=false \\\n         MAX_RECORDS_IN_RAM=2000000 \\\n         ADD_MATE_CIGAR=true \\\n         MAX_INSERTIONS_OR_DELETIONS=-1 \\\n         PRIMARY_ALIGNMENT_STRATEGY=MostDistant \\\n         PROGRAM_RECORD_ID=\"bwamem\" \\\n         PROGRAM_GROUP_VERSION=\"${bwa_version}\" \\\n         PROGRAM_GROUP_COMMAND_LINE=\"${bwa_commandline}\" \\\n         PROGRAM_GROUP_NAME=\"bwamem\" \\\n         UNMAPPED_READ_STRATEGY=COPY_TO_TAG \\\n         ALIGNER_PROPER_PAIR_FLAGS=true \\\n         UNMAP_CONTAMINANT_READS=true \\\n         ADD_PG_TAG_TO_READS=false\n\nThe tool merges defined information from the unmapped BAM (uBAM, step 1) with that of the aligned BAM (step 3) to conserve read data, e.g. original read information and base quality scores. The tool also generates additional meta information based on the information generated by the aligner, which may alter aligner-generated designations, e.g. mate information and secondary alignment flags. The tool then makes adjustments so that all meta information is congruent, e.g. read and mate strand information based on proper mate designations. Here we only provide a general information related to MergeBamAlignment. For learning more about using the tool in scenarios like this, visit the following page on Broad's User Guide space – [(How to) Map and clean up short read sequence data efficiently](https://software.broadinstitute.org/gatk/documentation/article.php?id=6483#step3).\n\n\n###Changes Introduced by Seven Bridges\n\nWe refer here to changes as the ones introduced in regard to the exact command line provided within the Broad WGS Germline workflow.\nThe following line is excluded due to the redirecting difficulties related to intermediate pipe steps: \n\n```\n2> >(tee bwa.stderr.log >&2)\n```\n\nSubsequently, printing out the filtered content of the previous log file was also omitted:\n\n```\ngrep -m1 \"read .* ALT contigs\" ${output_bam_basename}.bwa.stderr.log | \\\ngrep -v \"read 0 ALT contigs\"\n\n```\n\nAdditionally, instead of specifying `-Xms` argument for Java commands, `-Xmx` is used to define the maximum amount of memory allowed per job.\n\n###**Common Issues and Important Notes**\n\n**Maybe to mention something about the index tarbundle and ALT file**",
                "label": "SamToFastqAndBwaMemAndMba",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "if [ -s *.fasta ]; then"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.input_bam) {\n        \n        var memory_per_job = inputs.memory_per_job?inputs.memory_per_job:3000;\n        var bam_path = inputs.input_bam?inputs.input_bam.path:null;\n        var threads = inputs.threads?inputs.threads:16;\n        var ref_basename = inputs.reference_sequence.basename;\n        var compression_level = inputs.compression_level?inputs.compression_level:2;\n        var output = inputs.output_prefix?inputs.output_prefix+'.aligned.unsorted.bam':inputs.input_bam?inputs.input_bam.nameroot+'.aligned.unsorted.bam':null;\n        var ref_path = inputs.reference_sequence.path;\n        var max_records_in_ram = inputs.max_records_in_ram?inputs.max_records_in_ram:2000000;\n        \n\n        var cmd = 'java -Xmx'+memory_per_job+'M -jar /usr/gitc/picard.jar SamToFastq NON_PF=true FASTQ=/dev/stdout INTERLEAVE=true INPUT='+bam_path+' | /usr/gitc/bwa mem -K 100000000 -v 3 -t '+threads+' -Y -p '+ref_basename+' /dev/stdin - | java -Dsamjdk.compression_level='+compression_level+' -Xmx'+memory_per_job+'M -jar /usr/gitc/picard.jar MergeBamAlignment MAX_INSERTIONS_OR_DELETIONS=-1 OUTPUT='+output+' PRIMARY_ALIGNMENT_STRATEGY=MostDistant IS_BISULFITE_SEQUENCE=false PROGRAM_GROUP_COMMAND_LINE=\"/usr/gitc/bwa mem -K 100000000 -v 3 -t '+threads+' -Y -p '+ref_path+'\" PROGRAM_GROUP_NAME=\"bwamem\" UNMAPPED_READ_STRATEGY=COPY_TO_TAG UNMAP_CONTAMINANT_READS=true PAIRED_RUN=true ADD_PG_TAG_TO_READS=false EXPECTED_ORIENTATIONS=FR ADD_MATE_CIGAR=true ATTRIBUTES_TO_REMOVE=MD ATTRIBUTES_TO_REMOVE=NM ALIGNED_READS_ONLY=false PROGRAM_GROUP_VERSION=\"0.7.15-r1140\" ALIGNED_BAM=/dev/stdin UNMAPPED_BAM='+bam_path+' SORT_ORDER=\"unsorted\" ALIGNER_PROPER_PAIR_FLAGS=true VALIDATION_STRINGENCY=SILENT PROGRAM_RECORD_ID=\"bwamem\" ATTRIBUTES_TO_RETAIN=X0 CLIP_ADAPTERS=false MAX_RECORDS_IN_RAM='+max_records_in_ram+' REFERENCE_SEQUENCE='+ref_path+' ;';\n        \n        return cmd\n    }\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 7,
                        "valueFrom": "else exit 1 ; fi "
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "tar -xf $(inputs.bwa_reference_archive.path) &&"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        return inputs.memory_per_job\n    }\n    else {\n        return 3000\n    }\n}",
                        "coresMin": "${\n    if (inputs.cpu_per_job) {\n        return inputs.cpu_per_job\n    }\n    return 1\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            "$(inputs.reference_sequence)",
                            "$(inputs.input_fastq)",
                            "$(inputs.input_bam)"
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1554116147,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1554116207,
                        "sbg:revisionNotes": "revision 29 push from Vlada's project"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555411014,
                        "sbg:revisionNotes": "expose threads input parameter for bwamem"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555586107,
                        "sbg:revisionNotes": "merge command line into one expression"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555588645,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555589203,
                        "sbg:revisionNotes": "add space in if condition bash"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555590098,
                        "sbg:revisionNotes": "fix typo: UNMAP_CONTAMINANT_READS"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555590422,
                        "sbg:revisionNotes": "fix typo: CLIP_ADAPTERS"
                    },
                    {
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555591901,
                        "sbg:revisionNotes": "fix typo in output naming expression"
                    },
                    {
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555599823,
                        "sbg:revisionNotes": "splic command line, add conditional execution for fastq"
                    },
                    {
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555600268,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555600669,
                        "sbg:revisionNotes": "fix if conditions"
                    },
                    {
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555600967,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555601360,
                        "sbg:revisionNotes": "echo to stderr"
                    },
                    {
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555663876,
                        "sbg:revisionNotes": "stage input bam and fastq; fix expression for fastq"
                    },
                    {
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555670772,
                        "sbg:revisionNotes": "edit glob for output bam"
                    },
                    {
                        "sbg:revision": 16,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555671334,
                        "sbg:revisionNotes": "edit paired-end expression"
                    },
                    {
                        "sbg:revision": 17,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555671573,
                        "sbg:revisionNotes": "fix expression for part when ubam is provided, conditional on presence of input_bam"
                    },
                    {
                        "sbg:revision": 18,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555671963,
                        "sbg:revisionNotes": "edit expression for conditional ubam execution"
                    },
                    {
                        "sbg:revision": 19,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555674036,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 20,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555675061,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 21,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555679374,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 22,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555680287,
                        "sbg:revisionNotes": "fix expression for output bam naming for samtools view"
                    },
                    {
                        "sbg:revision": 23,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555685835,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 24,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555686382,
                        "sbg:revisionNotes": "fix last part of expression, exit code"
                    },
                    {
                        "sbg:revision": 25,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555686800,
                        "sbg:revisionNotes": "remove quote"
                    },
                    {
                        "sbg:revision": 26,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555688219,
                        "sbg:revisionNotes": "add inputs for read group tags"
                    },
                    {
                        "sbg:revision": 27,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555942856,
                        "sbg:revisionNotes": "add -h flag for samtools view"
                    },
                    {
                        "sbg:revision": 28,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555947032,
                        "sbg:revisionNotes": "add reheader"
                    },
                    {
                        "sbg:revision": 29,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555947682,
                        "sbg:revisionNotes": "escape tab properly"
                    },
                    {
                        "sbg:revision": 30,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555948351,
                        "sbg:revisionNotes": "add @ to SO tag, duh"
                    },
                    {
                        "sbg:revision": 31,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555948872,
                        "sbg:revisionNotes": "remove escape for tab"
                    },
                    {
                        "sbg:revision": 32,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555949558,
                        "sbg:revisionNotes": "echo -e"
                    },
                    {
                        "sbg:revision": 33,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555951420,
                        "sbg:revisionNotes": "remove -e flag"
                    },
                    {
                        "sbg:revision": 34,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555952436,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 35,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555953641,
                        "sbg:revisionNotes": "add VN field to @HD tag"
                    },
                    {
                        "sbg:revision": 36,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555958028,
                        "sbg:revisionNotes": "SO:queryname instead unsorted"
                    },
                    {
                        "sbg:revision": 37,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556022580,
                        "sbg:revisionNotes": "Added samtools sort instead samtools view"
                    },
                    {
                        "sbg:revision": 38,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556023343,
                        "sbg:revisionNotes": "corrected sort command"
                    },
                    {
                        "sbg:revision": 39,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556119965,
                        "sbg:revisionNotes": "add MBA for fastq input as well, merge bam with itself"
                    },
                    {
                        "sbg:revision": 40,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556120360,
                        "sbg:revisionNotes": "samtools sort by queryname"
                    },
                    {
                        "sbg:revision": 41,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556120888,
                        "sbg:revisionNotes": "remove samtools sort"
                    },
                    {
                        "sbg:revision": 42,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556122100,
                        "sbg:revisionNotes": "revert to revision 3; remove fastq input port"
                    },
                    {
                        "sbg:revision": 43,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556123149,
                        "sbg:revisionNotes": "from revision 40; remove expression for fastq inputs"
                    },
                    {
                        "sbg:revision": 44,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556134910,
                        "sbg:revisionNotes": "from revision 41; remove dash after bwa"
                    },
                    {
                        "sbg:revision": 45,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556135504,
                        "sbg:revisionNotes": "cp output bam"
                    },
                    {
                        "sbg:revision": 46,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556136083,
                        "sbg:revisionNotes": "fix ; position"
                    },
                    {
                        "sbg:revision": 47,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556136653,
                        "sbg:revisionNotes": "revert to revision 43"
                    }
                ],
                "sbg:image_url": null,
                "sbg:toolkit": "GATK",
                "sbg:toolkitVersion": "4.beta.5",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "BSD 3-clause",
                "sbg:links": [
                    {
                        "label": "GATK Germline Best Practice GitHub page",
                        "id": "https://github.com/gatk-workflows/broad-prod-wgs-germline-snps-indels/blob/master/PairedEndSingleSampleWf.wdl"
                    }
                ],
                "sbg:categories": [
                    "Alignment",
                    "SAM/BAM Processing"
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/samtofastqandbwamemandmba/47",
                "sbg:revision": 47,
                "sbg:revisionNotes": "revert to revision 43",
                "sbg:modifiedOn": 1556136653,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554116147,
                "sbg:createdBy": "ana_d",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic",
                    "vladimirk",
                    "ana_d"
                ],
                "sbg:latestRevision": 47,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "adedda4e1625848fa8638e444988e63515cc9b8841791e1b5c3a96d635be6b319"
            },
            "label": "SamToFastqAndBwaMemAndMba",
            "scatter": [
                "input_bam"
            ],
            "scatterMethod": "dotproduct",
            "sbg:x": -219.34146118164062,
            "sbg:y": 16.190683364868164
        },
        {
            "id": "CollectUnsortedReadgroupBamQualityMetrics",
            "in": [
                {
                    "id": "input_bam",
                    "source": "samtofastqandbwamemandmba/aligned_reads"
                },
                {
                    "id": "output_sufix",
                    "default": "unsorted"
                }
            ],
            "out": [
                {
                    "id": "multiple_metrics"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectmultiplemetrics/15",
                "baseCommand": [
                    "java"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "AS",
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "true",
                        "id": "assume_sorted",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "assume_sorted"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ASSUME_SORTED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Assume sorted",
                        "doc": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "I",
                        "sbg:category": "File inputs",
                        "id": "input_bam",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Input file",
                        "doc": "Input SAM or BAM file.  Required.",
                        "sbg:fileTypes": "BAM, SAM"
                    },
                    {
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "0",
                        "id": "stop_after",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Stop after",
                        "doc": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs."
                    },
                    {
                        "sbg:toolDefaultValue": "CollectAlignmentSummaryMetrics, CollectBaseDistributionByCycle, CollectInsertSizeMetrics, MeanQualityByCycle, QualityScoreDistribution]",
                        "id": "program",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "program",
                                    "symbols": [
                                        "CollectAlignmentSummaryMetrics",
                                        "CollectInsertSizeMetrics",
                                        "QualityScoreDistribution",
                                        "MeanQualityByCycle",
                                        "CollectBaseDistributionByCycle",
                                        "CollectGcBiasMetrics",
                                        "CollectSequencingArtifactMetrics"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "PROGRAM=",
                            "separate": false,
                            "itemSeparator": " PROGRAM=",
                            "shellQuote": false,
                            "position": 8,
                            "valueFrom": "${\n    if (self == 0) {\n        self = null;\n        inputs.program = null\n    };\n\n\n    //by defualt there is array of metrics programs that tool runs. \n    //if we select some other programs to specify it will only append them to the existing list. \n    //so first we need to clear list, and we are doing that \n    //by setting first program argument value to PROGRAM=null \n    //and after that we specify other parameters for PROGRAM\n    var set_program = 'null ';\n\n    if (inputs.program) {\n        for (i = 0; i < inputs.program.length; i++) {\n            if (inputs.program[i] !== \"\") {\n                set_program = set_program + \"PROGRAM=\" + inputs.program[i] + ' '\n            }\n        }\n    }\n\n    if (set_program !== 'null ') {\n        return set_program\n    }\n}"
                        },
                        "label": "Program",
                        "doc": "List of metrics programs to apply during the pass through the SAM file. This option is set to 'null' to clear the default value if any of parameters is specified. Possible values: {CollectAlignmentSummaryMetrics, CollectInsertSizeMetrics, QualityScoreDistribution, MeanQualityByCycle, CollectBaseDistributionByCycle, CollectGcBiasMetrics, RnaSeqMetrics}.",
                        "default": 0
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Reserves memory at scheduler by not passing it to java virtual machine to permit draining all memory from the instance."
                    },
                    {
                        "sbg:toolDefaultValue": "ALL_READS",
                        "id": "metrics_accumulation_level",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL_READS",
                                    "SAMPLE",
                                    "LIBRARY",
                                    "READ_GROUP"
                                ],
                                "name": "metrics_accumulation_level"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "symbols": [
                                        "ALL_READS",
                                        "SAMPLE",
                                        "LIBRARY",
                                        "READ_GROUP"
                                    ],
                                    "name": "metrics_accumulation_level"
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "METRIC_ACCUMULATION_LEVEL=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 6
                        },
                        "label": "Metric accumulation level",
                        "doc": "The level(s) at which to accumulate metrics.  Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP} This option may be specified 0 or more times. This option can be set to 'null' to clear the default list."
                    },
                    {
                        "id": "file_extension",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "FILE_EXTENSION=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "File extension",
                        "doc": "Append the given file extension to all metric file names (ex.                         OUTPUT.insert_size_metrics.EXT). None if null  Default value: null."
                    },
                    {
                        "id": "intervals",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "INTERVALS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Intervals to restrict the analysis to",
                        "doc": "An optional list of intervals to restrict analysis to. Only pertains to some of the\nPROGRAMs. Programs whose stand-alone CLP does not have an INTERVALS argument will silently ignore this argument.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "id": "db_snp",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "DB_SNP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "DBSNP file",
                        "doc": "VCF format dbSNP file, used to exclude regions around known polymorphisms from analysis by some PROGRAMs; PROGRAMs whose CLP doesn't allow for this argument will quietly ignore it."
                    },
                    {
                        "id": "include_unpaired",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_unpaired"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INCLUDE_UNPAIRED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Include unpaired",
                        "doc": "Include unpaired reads in CollectSequencingArtifactMetrics. If set to true then all paired reads will be included as well - MINIMUM_INSERT_SIZE and MAXIMUM_INSERT_SIZE will be ignored in CollectSequencingArtifactMetrics."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "in_reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Base name of output files."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_sufix",
                        "type": "string?",
                        "label": "Output sufix",
                        "doc": "This is additional parameter introduced by SBG. If specified it will be appended to output_prefix or name base of output file, before the extension."
                    }
                ],
                "outputs": [
                    {
                        "id": "multiple_metrics",
                        "doc": "Output array of TXT and PDF metrics files.",
                        "label": "Multiple metrics",
                        "type": "File[]",
                        "outputBinding": {
                            "glob": "${\n    return '{*.txt,*.pdf}'\n}",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.input_bam)\n\n}"
                        },
                        "sbg:fileTypes": "TXT"
                    }
                ],
                "doc": "Creates set of BAM metrics.\n\n### Description\nTakes an input BAM and reference sequence and runs one or more Picard metrics modules at the same time to cut down on I/O. Currently all programs are run with default options and fixed output extensions, but this may become more flexible in future.",
                "label": "Picard CollectMultipleMetrics",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx2048M'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CollectMultipleMetrics"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 14,
                        "valueFrom": "${\n    var prefix = '';\n    if (inputs.output_prefix) {\n        prefix = inputs.output_prefix\n    } else {\n        if (inputs.input_bam.metadata) {\n            if (inputs.input_bam.metadata.sample_id) {\n                prefix = inputs.input_bam.metadata.sample_id\n            } else {\n                prefix = inputs.input_bam.nameroot\n            }\n        } else {\n            prefix = inputs.input_bam.nameroot\n        }\n    }\n    if (inputs.output_sufix) {\n        prefix += '.' + inputs.output_sufix;\n    }\n    return prefix\n}"
                    },
                    {
                        "prefix": "&&",
                        "shellQuote": false,
                        "position": 1004,
                        "valueFrom": "${\n    //this is used because by defulat, tool outputs text files are named \n    //as base_name.metrics_tool_name. since those are txt files, we need to rename them \n    //so this js script does that after the tool completes. it check if file exists and if it does, \n    //then it renames it by adding '.txt' at the end of the filename\n    \n    var basename = '';\n    if (inputs.output_prefix) {\n        basename = inputs.output_prefix\n    } else {\n        if (inputs.input_bam.metadata) {\n            if (inputs.input_bam.metadata.sample_id) {\n                basename = inputs.input_bam.metadata.sample_id\n            } else {\n                basename = inputs.input_bam.nameroot\n            }\n        } else {\n            basename = inputs.input_bam.nameroot\n        }\n    }\n    if (inputs.output_sufix) {\n        basename += '.' + inputs.output_sufix;\n    }\n\n    // move commands\n    //AligmentSummaryMetrics\n    casm_start = basename + '.alignment_summary_metrics'\n    casm_end = basename + '.summary_metrics.txt'\n    mv_casm = ['[ -f ' + casm_start + ' ] && mv ', casm_start, casm_end].join(' ')\n\n    //InserSizeMetrics\n    insert_start = basename + '.insert_size_metrics'\n    insert_end = basename + '.insert_size_metrics.txt'\n    mv_insert = ['[ -f ' + insert_start + ' ] && mv ', insert_start, insert_end].join(' ')\n    \n\n    //QualityScoreDistribution\n    qual_start = basename + '.quality_distribution_metrics'\n    qual_end = basename + '.quality_distribution_metrics.txt'\n    mv_qual = ['[ -f ' + qual_start + ' ] && mv ', qual_start, qual_end].join(' ')\n\n    //MeanQualityByCycle\n    qualcycle_start = basename + '.quality_by_cycle_metrics'\n    qualcycle_end = basename + '.quality_by_cycle_metrics.txt'\n    mv_qualcycle = ['[ -f ' + qualcycle_start + ' ] && mv ', qualcycle_start, qualcycle_end].join(' ')\n    //['mv', qualcycle_start, qualcycle_end].join(' ')\n\n    //CollectBaseDistributionByCycle\n    basedist_start = basename + '.base_distribution_by_cycle_metrics'\n    basedist_end = basename + '.base_distribution_by_cycle_metrics.txt'\n    mv_basedist = ['[ -f ' + basedist_start + ' ] && mv ', basedist_start, basedist_end].join(' ')\n\n\n\n    list_all = [mv_casm, mv_insert, mv_qual, mv_qualcycle, mv_basedist]\n\n    if (!inputs.program || inputs.program[0] === \"\") {\n        return list_all.join(' ; ')\n    } else {\n\n        list_some = []\n        for (i = 0; i < inputs.program.length; i++) {\n            if (inputs.program[i] == \"CollectAlignmentSummaryMetrics\") {\n                list_some.push(mv_casm)\n            }\n            if (inputs.program[i] == \"CollectInsertSizeMetrics\") {\n                list_some.push(mv_insert)\n            }\n            if (inputs.program[i] == \"QualityScoreDistribution\") {\n                list_some.push(mv_qual)\n            }\n            if (inputs.program[i] == \"MeanQualityByCycle\") {\n                list_some.push(mv_qualcycle)\n            }\n            if (inputs.program[i] == \"CollectBaseDistributionByCycle\") {\n                list_some.push(mv_basedist)\n            }\n        }\n\n        return list_some.join(' ; ')\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  if(inputs.memory_per_job){\n    if(inputs.memory_overhead_per_job){\n    \treturn inputs.memory_per_job + inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn inputs.memory_per_job\n  }\n  else if(!inputs.memory_per_job && inputs.memory_overhead_per_job){\n\t\treturn 2048 + inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar CollectMultipleMetrics INPUT=/root/folder/example.bam OUTPUT=example && mv example.alignment_summary_metrics example.summary_metrics.txt && mv example.insert_size_metrics example.insert_size_metrics.txt",
                "sbg:toolkitVersion": "2.3.2",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/index.html"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/2.3.1"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554229385,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-collectmultiplemetrics/5"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554229414,
                        "sbg:revisionNotes": "change docker image to images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554468314,
                        "sbg:revisionNotes": "add more program options; add in_reference input"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554469273,
                        "sbg:revisionNotes": "add more program options"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555513732,
                        "sbg:revisionNotes": "fix output naming expressions"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555519686,
                        "sbg:revisionNotes": "output prefix expressin, return nameroot if output prefix or sample_id not specified"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555519755,
                        "sbg:revisionNotes": "edit output prefix expression; remove shell qoutes for other inputs"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555575572,
                        "sbg:revisionNotes": "add output sufix parameter"
                    },
                    {
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555576191,
                        "sbg:revisionNotes": "edit expression for prefix from nameroot, take first elelment after split"
                    },
                    {
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555579490,
                        "sbg:revisionNotes": "use nameroot instead of only first part after spliting by full stop"
                    },
                    {
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555794772,
                        "sbg:revisionNotes": "additional if for output prefix if metadata does not exist"
                    },
                    {
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555804641,
                        "sbg:revisionNotes": "fix2 metadata if exist"
                    },
                    {
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556016227,
                        "sbg:revisionNotes": "conditional mv if exist!"
                    },
                    {
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556018741,
                        "sbg:revisionNotes": "; instead &&"
                    },
                    {
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556020139,
                        "sbg:revisionNotes": "; instead && ALL"
                    },
                    {
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556114441,
                        "sbg:revisionNotes": "fix basename expression"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectmultiplemetrics/15",
                "sbg:revision": 15,
                "sbg:revisionNotes": "fix basename expression",
                "sbg:modifiedOn": 1556114441,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554229385,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic",
                    "vladimirk"
                ],
                "sbg:latestRevision": 15,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "aa35b7eda8eb216a673041e4571593da4243a7cfa2b6aca449cbc3299a6379d16"
            },
            "label": "CollectUnsortedReadgroupBamQualityMetrics",
            "scatter": [
                "input_bam"
            ],
            "scatterMethod": "dotproduct",
            "sbg:x": 94.3309555053711,
            "sbg:y": -314.2068786621094
        },
        {
            "id": "picard_markduplicates",
            "in": [
                {
                    "id": "assume_sort_order",
                    "default": "queryname"
                },
                {
                    "id": "clear_dt",
                    "default": "false"
                },
                {
                    "id": "in_alignments",
                    "source": [
                        "samtofastqandbwamemandmba/aligned_reads"
                    ]
                },
                {
                    "id": "memory_per_job",
                    "default": 4000
                },
                {
                    "id": "optical_duplicate_pixel_distance",
                    "default": 2500
                },
                {
                    "id": "add_pg_tag_to_reads",
                    "default": "false"
                }
            ],
            "out": [
                {
                    "id": "out_alignments"
                },
                {
                    "id": "output_metrics"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-markduplicates/8",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "-ASO",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "assume_sort_order",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "unsorted",
                                    "queryname",
                                    "coordinate",
                                    "duplicate",
                                    "unknown"
                                ],
                                "name": "assume_sort_order"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ASSUME_SORT_ORDER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Assume sort order",
                        "doc": "If not null, assume that the input file has this order even if the header says otherwise. Cannot be used in conjuction with argument(s) ASSUME_SORTED (AS)."
                    },
                    {
                        "sbg:altPrefix": "-AS",
                        "sbg:category": "Optional arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "assume_sorted",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "assume_sorted"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ASSUME_SORTED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Assume sorted",
                        "doc": "If true, assume that the input file is coordinate sorted even if the header says otherwise. Deprecated, used ASSUME_SORT_ORDER=coordinate instead. Exclusion: This argument cannot be used at the same time as ASSUME_SORT_ORDER (ASO)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "barcode_tag",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "BARCODE_TAG=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Barcode tag",
                        "doc": "Barcode SAM tag (ex. BC for 10x genomics)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "clear_dt",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "clear_dt"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "CLEAR_DT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Clear DT",
                        "doc": "Clear DT tag from input SAM records. Should be set to false if input SAM doesn't have this tag."
                    },
                    {
                        "sbg:altPrefix": "-CO",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "comment",
                        "type": "string[]?",
                        "inputBinding": {
                            "separate": false,
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = []\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push(' COMMENT=', self[i])\n            \n        }\n        return cmd.join(' ')\n    }\n}"
                        },
                        "label": "Comment",
                        "doc": "Comment(s) to include in the output file's header."
                    },
                    {
                        "sbg:altPrefix": "-DS",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "SUM_OF_BASE_QUALITIES",
                        "id": "duplicate_scoring_strategy",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "SUM_OF_BASE_QUALITIES",
                                    "TOTAL_MAPPED_REFERENCE_LENGTH",
                                    "RANDOM"
                                ],
                                "name": "duplicate_scoring_strategy"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "DUPLICATE_SCORING_STRATEGY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Duplicate scoring strategy",
                        "doc": "The scoring strategy for choosing the non-duplicate among candidates."
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Required Arguments",
                        "id": "in_alignments",
                        "type": "File[]",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    var arr = [].concat(self);\n    res = []\n    for (i=0; i<arr.length; i++) {\n        res.push(arr[i].path);\n    }\n    return res.join(' INPUT=');\n}"
                        },
                        "label": "Input BAM/SAM file",
                        "doc": "Input SAM or BAM files to analyze. Must be coordinate sorted.",
                        "sbg:fileTypes": "BAM, SAM"
                    },
                    {
                        "sbg:altPrefix": "-MAX_FILE_HANDLES",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "8000",
                        "id": "max_file_handles_for_read_ends_map",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max file handles for read ends map",
                        "doc": "Maximum number of file handles to keep open when spilling read ends to disk. Set this number a little lower than the per-process maximum number of file that may be open. This number can be found by executing the 'ulimit -n' command on a unix system."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "300000",
                        "id": "max_optical_duplicate_set_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_OPTICAL_DUPLICATE_SET_SIZE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max optical duplicate set size",
                        "doc": "This number is the maximum size of a set of duplicate reads for which we will attempt to determine which are optical duplicates. Please be aware that if you raise this value too high and do encounter a very large set of duplicate reads, it will severely affect the runtime of this tool. To completely disable this check, set the value to -1."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job",
                        "doc": "This input allows a user to set the desired overhead memory when running a tool or adding it to a workflow. This amount will be added to the Memory per job in the Memory requirements section but it will not be added to the -Xmx parameter leaving some memory not occupied which can be used as stack memory (-Xmx parameter defines heap memory). This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "This input allows a user to set the desired memory requirement when running a tool or adding it to a workflow. This value should be propagated to the -Xmx parameter too.This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "100",
                        "id": "optical_duplicate_pixel_distance",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "OPTICAL_DUPLICATE_PIXEL_DISTANCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Optical duplicate pixel distance",
                        "doc": "The maximum offset between two duplicate clusters in order to consider them optical duplicates. The default is appropriate for unpatterned versions of the illumina platform. For the patterned flowcell models, 2500 is moreappropriate. For other platforms and models, users should experiment to find what works best."
                    },
                    {
                        "sbg:altPrefix": "-PG_COMMAND",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "program_group_command_line",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "PROGRAM_GROUP_COMMAND_LINE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Program group command line",
                        "doc": "Value of CL tag of PG record to be created. If not supplied the command line will be detected automatically."
                    },
                    {
                        "sbg:altPrefix": "-PG_NAME",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "MarkDuplicates",
                        "id": "program_group_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "PROGRAM_GROUP_NAME=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Program group name",
                        "doc": "Value of PN tag of PG record to be created."
                    },
                    {
                        "sbg:altPrefix": "-PG_VERSION",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "program_group_version",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "PROGRAM_GROUP_VERSION=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Program group version",
                        "doc": "Value of VN tag of PG record to be created. If not specified, the version will be detected automatically."
                    },
                    {
                        "sbg:altPrefix": "-PG",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "MarkDuplicates",
                        "id": "program_record_id",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "PROGRAM_RECORD_ID=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Program record id",
                        "doc": "The program record ID for the @PG record(s) created by this program. Set to null to disable PG record creation.  This string may have a suffix appended to avoid collision with other program record IDs."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "read_one_barcode_tag",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "READ_ONE_BARCODE_TAG=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read one barcode tag",
                        "doc": "Read one barcode SAM tag (ex. BX for 10x Genomics)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "read_two_barcode_tag",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "READ_TWO_BARCODE_TAG=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read two barcode tag",
                        "doc": "Read two barcode SAM tag (ex. BX for 10x Genomics)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "remove_duplicates",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "remove_duplicates"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "REMOVE_DUPLICATES=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Remove duplicates",
                        "doc": "If true do not write duplicates to the output file instead of writing them with appropriate flags set."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "remove_sequencing_duplicates",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "remove_sequencing_duplicates"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "REMOVE_SEQUENCING_DUPLICATES=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Remove sequencing duplicates",
                        "doc": "If true remove 'optical' duplicates and other duplicates that appear to have arisen from the sequencing process instead of the library preparation process, even if REMOVE_DUPLICATES is false. If REMOVE_DUPLICATES is true, all duplicates are removed and this option is ignored."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0.25",
                        "id": "sorting_collection_size_ratio",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "SORTING_COLLECTION_SIZE_RATIO=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sorting collection size ratio",
                        "doc": "This number, plus the maximum RAM available to the JVM, determine the memory footprint used by some of the sorting collections. If you are running out of memory, try reducing this number."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "tag_duplicate_set_members",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "tag_duplicate_set_members"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "TAG_DUPLICATE_SET_MEMBERS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Tag duplicate set members",
                        "doc": "If a read appears in a duplicate set, add two tags. The first tag, DUPLICATE_SET_SIZE_TAG (DS), indicates the size of the duplicate set. The smallest possible DS value is 2 which occurs when two reads map to the same portion of the reference only one of which is marked as duplicate. The second tag, DUPLICATE_SET_INDEX_TAG (DI), represents a unique identifier for the duplicate set to which the record belongs. This identifier is the index-in-file of the representative read that was selected out of the duplicate set."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "DontTag",
                        "id": "tagging_policy",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "DontTag",
                                    "OpticalOnly",
                                    "All"
                                ],
                                "name": "tagging_policy"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "TAGGING_POLICY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Tagging policy",
                        "doc": "Determines how duplicate types are recorded in the DT optional attribute."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output file name prefix."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "BAM",
                        "id": "output_file_format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "bam",
                                    "sam"
                                ],
                                "name": "output_file_format"
                            }
                        ],
                        "label": "Output file format",
                        "doc": "Output file format"
                    },
                    {
                        "sbg:category": "Platform Options",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job",
                        "doc": "This input allows a user to set the desired CPU requirement when running a tool or adding it to a workflow."
                    },
                    {
                        "sbg:altPrefix": "Optional Arguments",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "add_pg_tag_to_reads",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "add_pg_tag_to_reads"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ADD_PG_TAG_TO_READS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add PG tag to reads",
                        "doc": "Add PG tag to each read in a SAM or BAM file."
                    }
                ],
                "outputs": [
                    {
                        "id": "out_alignments",
                        "doc": "Output BAM/SAM file which contains marked records.",
                        "label": "Output BAM/SAM file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*am",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "secondaryFiles": [
                            "${\n    if (inputs.create_index)\n    {\n        return [self.basename + \".bai\", self.nameroot + \".bai\"]\n    }\n}"
                        ],
                        "sbg:fileTypes": "BAM, SAM"
                    },
                    {
                        "id": "output_metrics",
                        "doc": "Output duplication metrics file.",
                        "label": "Output metrics file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*metrics",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "sbg:fileTypes": "METRICS"
                    }
                ],
                "doc": "The **GATK  MarkDuplicates** tool identifies duplicate reads in a BAM or SAM file.\n\nThis tool locates and tags duplicate reads in a BAM or SAM file, where duplicate reads are defined as originating from a single fragment of DNA. Duplicates can arise during sample preparation e.g. library construction using PCR. Duplicate reads can also result from a single amplification cluster, incorrectly detected as multiple clusters by the optical sensor of the sequencing instrument. These duplication artifacts are referred to as optical duplicates [1].\n\nThe MarkDuplicates tool works by comparing sequences in the 5 prime positions of both reads and read-pairs in the SAM/BAM file. The **Barcode tag** (`--BARCODE_TAG`) option is available to facilitate duplicate marking using molecular barcodes. After duplicate reads are collected, the tool differentiates the primary and duplicate reads using an algorithm that ranks reads by the sums of their base-quality scores (default method).\n\n\n###Common Use Cases\n\n* The **GATK MarkDuplicates** tool requires the BAM or SAM file on its **Input BAM/SAM file** (`--INPUT`) input. The tool generates a new SAM or BAM file on its **Output BAM/SAM** output, in which duplicates have been identified in the SAM flags field for each read. Duplicates are marked with the hexadecimal value of 0x0400, which corresponds to a decimal value of 1024. If you are not familiar with this type of annotation, please see the following [blog post](https://software.broadinstitute.org/gatk/blog?id=7019) for additional information. **MarkDuplicates** also produces a metrics file on its **Output metrics file** output, indicating the numbers of duplicates for both single and paired end reads.\n\n* The program can take either coordinate-sorted or query-sorted inputs, however the behavior is slightly different. When the input is coordinate-sorted, unmapped mates of mapped records and supplementary/secondary alignments are not marked as duplicates. However, when the input is query-sorted (actually query-grouped), then unmapped mates and secondary/supplementary reads are not excluded from the duplication test and can be marked as duplicate reads.\n\n* If desired, duplicates can be removed using the **Remove duplicates** (`--REMOVE_DUPLICATES`) and **Remove sequencing duplicates** ( `--REMOVE_SEQUENCING_DUPLICATES`) options.\n\n* Although the bitwise flag annotation indicates whether a read was marked as a duplicate, it does not identify the type of duplicate. To do this, a new tag called the duplicate type (DT) tag was recently added as an optional output of a SAM/BAM file. Invoking the **Tagging policy** ( `--TAGGING_POLICY`) option, you can instruct the program to mark all the duplicates (All), only the optical duplicates (OpticalOnly), or no duplicates (DontTag). The records within the output SAM/BAM file will have values for the 'DT' tag (depending on the invoked **TAGGING_POLICY** option), as either library/PCR-generated duplicates (LB), or sequencing-platform artifact duplicates (SQ). \n\n* This tool uses the **Read name regex** (`--READ_NAME_REGEX`) and the **Optical duplicate pixel distance** (`--OPTICAL_DUPLICATE_PIXEL_DISTANCE`) options as the primary methods to identify and differentiate duplicate types. Set **READ_NAME_REGEX** to null to skip optical duplicate detection, e.g. for RNA-seq or other data where duplicate sets are extremely large and estimating library complexity is not an aim. Note that without optical duplicate counts, library size estimation will be inaccurate.\n\n* Usage example:\n\n```\njava -jar picard.jar MarkDuplicates \\\n      --INPUT input.bam \\\n      --OUTPUT marked_duplicates.bam \\\n      --METRICS_FILE marked_dup_metrics.txt\n```\n\n###Changes Introduced by Seven Bridges\n\n* All output files will be prefixed using the **Output prefix** parameter. In case **Output prefix** is not provided, output prefix will be the same as the Sample ID metadata from the **Input SAM/BAM file**, if the Sample ID metadata exists. Otherwise, output prefix will be inferred from the **Input SAM/BAM** filename. This way, having identical names of the output files between runs is avoided. Moreover,  **dedupped** will be added before the extension of the output file name. \n\n* The user has a possibility to specify the output file format using the **Output file format** option. Otherwise, the output file format will be the same as the format of the input file.\n\n###Common Issues and Important Notes\n\n* None\n\n###Performance Benchmarking\n\nBelow is a table describing runtimes and task costs of **GATK MarkDuplicates** for a couple of different samples, executed on the AWS cloud instances:\n\n*Cost can be significantly reduced by using **spot instances**. Visit the [Knowledge Center](https://docs.sevenbridges.com/docs/about-spot-instances) for more details.*\n\n###References\n\n[1] [GATK MarkDuplicates](https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/picard_sam_markduplicates_MarkDuplicates.php)",
                "label": "Picard MarkDuplicates",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "java"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.compression_level) {\n        command = '-Dsamjdk.compression_level=' + inputs.compression_level\n    } else {\n        command = '-Dsamjdk.compression_level=2'\n    }\n    if (inputs.memory_per_job) {\n        command += ' -Xms'.concat(inputs.memory_per_job, 'M')\n    }\n    else {\n        command +=' -Xms1024M '\n    }\n    return command\n}"
                    },
                    {
                        "prefix": "-jar",
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "/usr/gitc/picard.jar MarkDuplicates"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var in_alignments = [].concat(inputs.in_alignments)[0];\n    var output_ext = inputs.output_file_format ? \".\" + inputs.output_file_format : in_alignments.nameext;\n    var output_prefix = '';\n    if (inputs.output_prefix)\n    {\n        output_prefix = inputs.output_prefix;\n    }\n    else\n    {\n        if (in_alignments.metadata && in_alignments.metadata.sample_id)\n        {\n            output_prefix = in_alignments.metadata.sample_id;\n        }\n        else\n        {\n            output_prefix = in_alignments.nameroot.split('.')[0];\n        }\n    }\n    return \"OUTPUT=\" + output_prefix + \".dedupped\" + output_ext;\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var in_alignments = [].concat(inputs.in_alignments)[0];\n    if (inputs.output_prefix)\n    {\n        output_prefix = inputs.output_prefix;\n    }\n    else\n    {\n        if (in_alignments.metadata && in_alignments.metadata.sample_id)\n        {\n            output_prefix = in_alignments.metadata.sample_id;\n        }\n        else\n        {\n            output_prefix = in_alignments.nameroot.split('.')[0];\n        }\n    }\n    return \"METRICS_FILE=\" + output_prefix + \".dedupped.metrics\";\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    var memory = 2048;\n    if (inputs.memory_per_job) \n    {\n        memory = inputs.memory_per_job;\n    }\n    if (inputs.memory_overhead_per_job)\n    {\n        memory += inputs.memory_overhead_per_job;\n    }\n    return memory;\n}",
                        "coresMin": "${\n    return inputs.cpu_per_job ? inputs.cpu_per_job : 1\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};",
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "Utilities",
                    "BAM Processing"
                ],
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:toolkit": "GATK",
                "sbg:toolkitVersion": "4.1.0.0",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554304333,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554304344,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554305561,
                        "sbg:revisionNotes": "change docker image to images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554306238,
                        "sbg:revisionNotes": "add add_pg_tag_to_reads input"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555502733,
                        "sbg:revisionNotes": "set INPUT to array of files; set boolean inputs to enums"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555505577,
                        "sbg:revisionNotes": "fix expression for output naming"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555507528,
                        "sbg:revisionNotes": "fix another expression, for naming output metrics file"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555579549,
                        "sbg:revisionNotes": "use nameroot for output prefix instead of only firtst part after split"
                    },
                    {
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555579791,
                        "sbg:revisionNotes": "revert to revsision 6"
                    }
                ],
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/releases/download/4.1.0.0/gatk-4.1.0.0.zip",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.ncbi.nlm.nih.gov/pubmed?term=20644199",
                        "label": "Publications"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/picard_sam_markduplicates_MarkDuplicates.php",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-markduplicates/8",
                "sbg:revision": 8,
                "sbg:revisionNotes": "revert to revsision 6",
                "sbg:modifiedOn": 1555579791,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554304333,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 8,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a85087e4a650db7047bb193d5845792255608123fcd090abf73b69872c917c20f"
            },
            "label": "GATK MarkDuplicates",
            "sbg:x": 42.25984191894531,
            "sbg:y": 24.14817237854004
        },
        {
            "id": "picard_sortsam_1_140",
            "in": [
                {
                    "id": "sort_order",
                    "default": "Coordinate"
                },
                {
                    "id": "in_alignments",
                    "source": "picard_markduplicates/out_alignments"
                },
                {
                    "id": "memory_per_job",
                    "default": 4000
                },
                {
                    "id": "create_index",
                    "default": "true"
                },
                {
                    "id": "create_md5_file",
                    "default": "true"
                },
                {
                    "id": "max_records_in_ram",
                    "default": 300000
                }
            ],
            "out": [
                {
                    "id": "out_alignments"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-sortsam-1-140/2",
                "baseCommand": [
                    "java"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "SO",
                        "sbg:category": "Other input types",
                        "id": "sort_order",
                        "type": {
                            "type": "enum",
                            "symbols": [
                                "Unsorted",
                                "Queryname",
                                "Coordinate"
                            ],
                            "name": "sort_order"
                        },
                        "inputBinding": {
                            "prefix": "SORT_ORDER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 7,
                            "valueFrom": "${\n    p = inputs.sort_order.toLowerCase()\n    return p\n}"
                        },
                        "label": "Sort order",
                        "doc": "Sort order of the output file. Possible values: {unsorted, queryname, coordinate}."
                    },
                    {
                        "sbg:altPrefix": "I",
                        "sbg:category": "File inputs",
                        "id": "in_alignments",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Input BAM",
                        "doc": "The BAM or SAM file to sort.",
                        "sbg:fileTypes": "BAM, SAM"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Reserves memory at scheduler by not passing it to java virtual machine to permit draining all memory from the instance."
                    },
                    {
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Sorted output prefix."
                    },
                    {
                        "sbg:category": "Optional arguments",
                        "id": "create_index",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_index"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "CREATE_INDEX=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create index"
                    },
                    {
                        "sbg:category": "Optional arguments",
                        "id": "create_md5_file",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_md5_file"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "CREATE_MD5_FILE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create MD5 file"
                    },
                    {
                        "sbg:category": "Optional arguments",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max records in ram"
                    }
                ],
                "outputs": [
                    {
                        "id": "out_alignments",
                        "doc": "Sorted BAM or SAM file.",
                        "label": "Sorted BAM/SAM",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.?am",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.in_alignments)\n\n}"
                        },
                        "secondaryFiles": [
                            "^.bai",
                            ".bai"
                        ],
                        "sbg:fileTypes": "BAM, SAM"
                    }
                ],
                "doc": "Sorts a SAM or BAM file.  \n\n### Description\nThis tool sorts the input SAM or BAM file by coordinate, queryname (QNAME), or some other property of the SAM record. The SortOrder of a SAM/BAM file is found in the SAM file header tag @HD in the field labeled SO.  \nFor a coordinate sorted SAM/BAM file, read alignments are sorted first by the reference sequence name (RNAME) field using the reference sequence dictionary (@SQ tag).  Alignments within these subgroups are secondarily sorted using the left-most mapping position of the read (POS).  Subsequent to this sorting scheme, alignments are listed arbitrarily.\nFor queryname-sorted alignments, all alignments are grouped using the queryname field but the alignments are not necessarily sorted within these groups.  Reads having the same queryname are derived from the same template.  \n### Common Use Cases \nUsage example:\n```\njava -jar picard.jar SortSam \\\n      I=input.bam \\\n      O=sorted.bam \\\n      SORT_ORDER=coordinate\n```\n### Common Issues and Important Notes\nDocker image downloaded from broadinstitute/genomes-in-the-cloud:2.3.1-1512499786",
                "label": "Picard SortSam",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx2048M'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "SortSam"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var in_alignments = inputs.in_alignments;\n    var output_prefix = '';\n    var output_ext = inputs.output_file_format ? inputs.output_file_format : in_alignments.path.split('.').pop();\n    if (inputs.output_prefix)\n    {\n        output_prefix = inputs.output_prefix;\n    }\n    else \n    {\n        if (in_alignments.metadata && in_alignments.metadata.sample_id)\n        {\n            output_prefix = in_alignments.metadata.sample_id;\n        }\n        else \n        {\n            output_prefix = in_alignments.path.split('/').pop().split('.')[0] + '.sorted';\n        }\n    }\n    \n    return output_prefix + '.' + output_ext;\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  if(inputs.memory_per_job){\n    if(inputs.memory_overhead_per_job){\n    \treturn inputs.memory_per_job + inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn inputs.memory_per_job\n  }\n  else if(!inputs.memory_per_job && inputs.memory_overhead_per_job){\n\t\treturn 2048 + inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar SortSam OUTPUT=example.tested.sorted.bam INPUT=/root/dir/example.tested.bam SORT_ORDER=coordinate",
                "sbg:toolkitVersion": "2.16.0-SNAPSHOT",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/command-line-overview.html#SortSam"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/1.138"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554305443,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-sortsam-1-140/11"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554305663,
                        "sbg:revisionNotes": "change docker version to images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554306626,
                        "sbg:revisionNotes": "add additional arguments"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-sortsam-1-140/2",
                "sbg:revision": 2,
                "sbg:revisionNotes": "add additional arguments",
                "sbg:modifiedOn": 1554306626,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554305443,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 2,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a814fa208d1119f4b0420d6729c9e1875f6e4d402d7b2ac79b03ab3729c4cdc3b"
            },
            "label": "Picard SortSam",
            "sbg:x": 271.9728088378906,
            "sbg:y": 28.14817237854004
        },
        {
            "id": "crosscheckfingerprints",
            "in": [
                {
                    "id": "input",
                    "source": [
                        "picard_sortsam_1_140/out_alignments"
                    ]
                },
                {
                    "id": "memory_per_job",
                    "default": 2000
                },
                {
                    "id": "haplotype_map",
                    "source": "haplotype_map"
                },
                {
                    "id": "lod_threshold",
                    "default": -20
                },
                {
                    "id": "expect_all_groups_to_match",
                    "default": "true"
                }
            ],
            "out": [
                {
                    "id": "fingerprinting_summary_metrics"
                },
                {
                    "id": "matrix_output"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-crosscheckfingerprints/5",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "I",
                        "sbg:category": "File inputs",
                        "id": "input",
                        "type": "File[]",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "itemSeparator": " ",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    var arr = [].concat(self);\n    var res = [];\n    for (i=0; i<arr.length; i++) {\n        res.push(arr[i].path);\n    }\n    return res.join(' INPUT=')\n}"
                        },
                        "label": "Input SAM,BAM or VCF",
                        "doc": "Input SAM,BAM or VCF.",
                        "sbg:fileTypes": "BAM, SAM, VCF",
                        "secondaryFiles": [
                            "${\n    return [self.basename + '.bai', self.nameroot + '.bai']\n}"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Optional Arguments",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output prefix."
                    },
                    {
                        "id": "matrix_output_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "MATRIX_OUTPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Matrix output name",
                        "doc": "Optional output file to write matrix of LOD scores to. This is less informative than the metrics output and only contains Normal-Normal LOD score (i.e. doesn't account for Loss of heterogeneity). It is however sometimes easier to use visually.  Default value: null.  Cannot be used in conjuction with option(s) SECOND_INPUT (SI)."
                    },
                    {
                        "sbg:category": "Required Arguments",
                        "id": "haplotype_map",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "HAPLOTYPE_MAP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Haplotype map",
                        "doc": "The file lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting.",
                        "sbg:fileTypes": "VCF, VCF.GZ, BCF"
                    },
                    {
                        "id": "lod_threshold",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "LOD=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 13
                        },
                        "label": "LOD threshold",
                        "doc": "f any two groups (with the same sample name) match with a LOD score lower than the threshold the program will exit with a non-zero code to indicate error. Program will also exit with an error if it finds two groups with different sample name that match with a LOD score greater than -LOD_THRESHOLD."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "second_input",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "SECOND_INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Second input",
                        "doc": "One or more input files (or lists of files) to compare fingerprints for. If this option is given the program compares each sample in INPUT with the sample from SECOND_INPUT that has the same sample ID. In addition, data will be grouped by SAMPLE regardless of the value of CROSSCHECK_BY. When operating in this mode, each sample in INPUT must also have a corresponding sample in SECOND_INPUT. If this is violated, the program will proceed to check the matching samples, but report the missing samples and return a non-zero error-code. Default value: null. This option may be specified 0 or more times.  Cannot be used in conjuction with option(s) MATRIX_OUTPUT (MO).",
                        "sbg:fileTypes": "BAM, SAM, VCF"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "crosscheck_by",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "CROSSCHECK_BY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Crosscheck by",
                        "doc": "Specificies whic readgroups can be \"rolled-up\" to the LIBRARY, SAMPLE, or FILE level before being compared. Fingerprints from VCF can be be compared by SAMPLE or FILE.  Default value: READGROUP. This option can be set to 'null' to clear the default value. Possible values: {FILE,   SAMPLE, LIBRARY, READGROUP}"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "num_threads",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "NUM_THREADS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Number of threads",
                        "doc": "The number of threads to use to process files and generate Fingerprints.  Default value: 1."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "allow_duplicate_reads",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "allow_duplicate_reads"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ALLOW_DUPLICATE_READS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Allos dubplicate reads",
                        "doc": "Allow the use of duplicate reads in performing the comparison. Can be useful when duplicate marking has been overly aggressive and coverage is low.  Default value: false.This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "genotyping_error_rate",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "GENOTYPING_ERROR_RATE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Genotyping error rate",
                        "doc": "Assumed genotyping error rate that provides a floor on the probability that a genotype comes from the expected sample.  Default value: 0.01. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_errors_only",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "output_errors_only"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "OUTPUT_ERRORS_ONLY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Output errors only",
                        "doc": "If true then only groups that do not relate to each other as expected will have their LODs reported.  Default value: false."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "loss_of_het_rate",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "LOSS_OF_HET_RATE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 12
                        },
                        "label": "Loss of het rate",
                        "doc": "The rate at which a heterozygous genotype in a normal sample turns into a homozygous (via loss of heterozygosity) in the tumor (model assumes independent events, so this needs to  be larger than reality).  Default value: 0.5."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "expect_all_groups_to_match",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "expect_all_groups_to_match"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "EXPECT_ALL_GROUPS_TO_MATCH=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 13
                        },
                        "label": "Expect all groups to match",
                        "doc": "Expect all groups' fingerprints to match, irrespective of their sample names.  By default (with this value set to false), groups (readgroups, libraries, files, or samples) with different sample names are expected to mismatch, and those with the same sample name are expected to match."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "exit_code_when_missmatch",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "EXIT_CODE_WHEN_MISMATCH=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 14
                        },
                        "label": "Exit code when missmatch",
                        "doc": "When one or more mismatches between groups is detected, exit with this value instead of 0. Default value: 1."
                    }
                ],
                "outputs": [
                    {
                        "id": "fingerprinting_summary_metrics",
                        "doc": "Summary metrics.",
                        "label": "Summary metrics",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.fingerprint",
                            "outputEval": "$(inheritMetadata(self, inputs.input))"
                        },
                        "secondaryFiles": [
                            "^.bai",
                            ".bai"
                        ],
                        "sbg:fileTypes": "fingerprinting_detail_metrics"
                    },
                    {
                        "id": "matrix_output",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "${\n    if (inputs.matrix_output) {\n        return '*.' + inputs.matrix_output_name\n    }\n    else\n        return ''\n    }\n}",
                            "outputEval": "$(inheritMetadata(self, inputs.input))"
                        }
                    }
                ],
                "doc": "Checks the sample identity of the sequence/genotype data in the provided file (SAM/BAM or VCF)\n\n### Description\nChecks if all fingerprints within a set of files appear to come from the same individual. The fingerprints are calculated initially at the readgroup level (if present) but can be \"rolled-up\" by library, sample or file, to increase power and provide results at the desired resolution. Regular output is in a \"Moltenized\" format, one row per comparison. In this format the output will include the LOD score and also tumor-aware LOD score which can help assess identity even in the presence of a severe LOH sample with high purity. A matrix output is also available to facilitate visual inspection of crosscheck results.\nA separate CLP, ClusterCrosscheckMetrics, can cluster the results as a connected graph according to LOD greater than a threshold.\n### Common Use Cases \n```\nCheck that all the readgroups from a sample match each other:\n   java -jar picard.jar CrosscheckFingerprints \\\n          INPUT=sample.with.many.readgroups.bam \\\n          HAPLOTYPE_MAP=fingerprinting_haplotype_database.txt \\\n          LOD_THRESHOLD=-5 \\\n          OUTPUT=sample.crosscheck_metrics \n```\n\nThis tool calculates the LOD score for identity check between \"groups\" of data in the INPUT files as defined by the CROSSCHECK_BY argument. A positive value indicates that the data seems to have come from the same individual or, in other words the identity checks out. The scale is logarithmic (base 10), so a LOD of 6 indicates that it is 1,000,000 more likely that the data matches the genotypes than not. A negative value indicates that the data do not match. A score that is near zero is inconclusive and can result from low coverage or non-informative genotypes. Each group is assigned a sample identifier (for SAM this is taken from the SM tag in the appropriate readgroup header line, for VCF this is taken from the column label in the file-header. After combining all the data from the same group together, an all-against-all comparison is performed. Results are categorized as one of EXPECTED_MATCH, EXPECTED_MISMATCH, UNEXPECTED_MATCH, UNEXPECTED_MISMATCH, or AMBIGUOUS depending on the LOD score and on whether the sample identifiers of the groups agree: LOD scores that are less than LOD_THRESHOLD are considered mismatches, and those greater than -LOD_THRESHOLD are matches (between is ambiguous). If the sample identifiers are equal, the groups are expected to match. They are expected to mismatch otherwise. The identity check makes use of haplotype blocks defined in the HAPLOTYPE_MAP file to enable it to have higher statistical power for detecting identity or swap by aggregating data from several SNPs in the haplotype block. This enables an identity check of samples with very low coverage (e.g. ~1x mean coverage). When provided a VCF, the identity check looks at the PL, GL and GT fields (in that order) and uses the first one that it finds.",
                "label": "Picard CrosscheckFingerprints",
                "arguments": [
                    {
                        "prefix": "",
                        "separate": false,
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    command = '-Dsamjdk.buffer_size=131072 -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 '\n    if (inputs.memory_per_job) {\n        command += '-Xms'.concat(inputs.memory_per_job, 'M')\n    }\n    else {\n        command +='-Xms1024M '\n    }\n    return command\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CrosscheckFingerprints"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": -1,
                        "valueFrom": "$( inputs.haplotype_map ? 'java' : 'echo java')"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "$( inputs.output_prefix ? inputs.output_prefix : inputs.input.nameroot)"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        return inputs.memory_per_job\n    }\n    return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};",
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar CheckFingerprint OUTPUT=example.tested.sorted.bam INPUT=/root/dir/example.tested.bam SORT_ORDER=coordinate",
                "sbg:toolkitVersion": "2.16.0-SNAPSHOT",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/command-line-overview.html#SortSam"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/1.138"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554307344,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-crosscheckfingerprints/2"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554307593,
                        "sbg:revisionNotes": "change docker version; add conditional execution dependant on haplotype_map input file"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555435799,
                        "sbg:revisionNotes": "add expression for default output_prefix value; set metadata inheritance on output files."
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555495935,
                        "sbg:revisionNotes": "set INPUT to array of files. add expression for building cmd line;"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555497338,
                        "sbg:revisionNotes": "set labels, default values, required inputs etc."
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555508530,
                        "sbg:revisionNotes": "fix expression for INPUT"
                    }
                ],
                "sbg:wrapperAuthor": "Vladimir Kovacevic",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-crosscheckfingerprints/5",
                "sbg:revision": 5,
                "sbg:revisionNotes": "fix expression for INPUT",
                "sbg:modifiedOn": 1555508530,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554307344,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 5,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a1308379b74fe3bb74702d234530651151ace85943d2e4740f65489fca39d5860"
            },
            "label": "CrosscheckFingerprints",
            "sbg:x": 550.4259033203125,
            "sbg:y": 265.8067321777344
        },
        {
            "id": "checkcontamination",
            "in": [
                {
                    "id": "BamFile",
                    "source": "picard_sortsam_1_140/out_alignments"
                },
                {
                    "id": "BedPath",
                    "source": "BedPath"
                },
                {
                    "id": "Reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "UDPath",
                    "source": "UDPath"
                },
                {
                    "id": "MeanPath",
                    "source": "MeanPath"
                },
                {
                    "id": "NumPC",
                    "default": 4
                },
                {
                    "id": "Verbose",
                    "default": true
                }
            ],
            "out": [
                {
                    "id": "selfSM"
                },
                {
                    "id": "contamination"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/checkcontamination/4",
                "baseCommand": [
                    "/usr/gitc/VerifyBamID"
                ],
                "inputs": [
                    {
                        "sbg:category": "File inputs",
                        "id": "BamFile",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--BamFile",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "BAM File",
                        "doc": "Bam or Cram file for the sample [Required].",
                        "sbg:fileTypes": "BAM, CRAM",
                        "secondaryFiles": [
                            ".bai"
                        ]
                    },
                    {
                        "sbg:category": "File inputs",
                        "id": "BedPath",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--BedPath",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Bed Path",
                        "doc": "Bed file for markers used in this analysis,1 based pos (chr\tpos-1\tpos\trefAllele\taltAllele) [Required].",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:category": "File inputs",
                        "id": "Reference",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--Reference",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Reference",
                        "doc": "Reference file [Required].",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai"
                        ]
                    },
                    {
                        "sbg:category": "File inputs",
                        "id": "RefVCF",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--RefVCF",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Ref VCF",
                        "doc": "VCF file from which to extract reference panel's genotype matrix.",
                        "sbg:fileTypes": "VCF"
                    },
                    {
                        "sbg:category": "File inputs",
                        "id": "UDPath",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--UDPath",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "UD Path",
                        "doc": "UD matrix file from SVD result of genotype matrix."
                    },
                    {
                        "sbg:category": "FIle inputs",
                        "id": "MeanPath",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--MeanPath",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Mean Path",
                        "doc": "Mean matrix file of genotype matrix."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "result",
                        "id": "Output",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--Output",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Output",
                        "doc": "Output Prefix [optional]."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "2",
                        "id": "NumPC",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--NumPC",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Num PC",
                        "doc": "Set number of PCs to infer Allele Frequency [optional]."
                    },
                    {
                        "sbg:toolDefaultValue": "4",
                        "sbg:category": "Optional Arguments",
                        "id": "NumThread",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--NumThread",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Num Thread",
                        "doc": "Set number of threads in likelihood calculation. Default value: 4."
                    },
                    {
                        "id": "FixPC",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--FixPC",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Fix PC",
                        "doc": "Input fixed PCs to estimate Alpha [format PC1:PC2:PC3...]"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "-1.0e+00",
                        "id": "FixAlpha",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--FixAlpha",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Fix Alpha",
                        "doc": "Input fixed Alpha to estimate PC coordinates."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "WithinAncestry",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--WithinAncestry",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Within Ancestry",
                        "doc": "Enabling withinAncestry – assume target sample and contamination source are from the same populations. Default: betweenAncestry."
                    },
                    {
                        "sbg:category": "File inputs",
                        "id": "KnownAF",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--KnownAF",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Known AF",
                        "doc": "Known allele frequency file (chr\tpos\tfreq) [Optional]."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "12345",
                        "id": "Seed",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--Seed",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Seed",
                        "doc": "Random number seed. Default value: 12345."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "1e-10",
                        "id": "Epsilon",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--Epsilon",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Epsilon",
                        "doc": "Minimization procedure convergence threshold, usually a trade-off bettween accuracy and running time. Default value: 1e-10."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "OutputPileup",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--OutputPileup",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Output Pileup",
                        "doc": "If output temp pileup file."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "Verbose",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--Verbose",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Verbose",
                        "doc": "If print the progress of the method on the screen."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0.75",
                        "id": "cont_factor",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--cont_factor",
                            "shellQuote": false,
                            "position": 6
                        },
                        "label": "Contamination Underestimation Factor",
                        "doc": "Contamination underestimation factor. Default value: 0.75."
                    }
                ],
                "outputs": [
                    {
                        "id": "selfSM",
                        "doc": "A TSV file with 2 rows, 19 columns. First row are the keys (e.g., SEQ_SM, RG, FREEMIX), second row are the associated values",
                        "label": "slefSM",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.selfSM",
                            "outputEval": "$(inheritMetadata(self, inputs.BamFile))"
                        },
                        "sbg:fileTypes": "SELFSM"
                    },
                    {
                        "id": "contamination",
                        "doc": "Adjusted contamination estimate for use in variant calling.",
                        "label": "Contamination value",
                        "type": "float?",
                        "outputBinding": {
                            "loadContents": true,
                            "glob": "contamination_value.txt",
                            "outputEval": "${\n    return parseFloat(self[0].contents)\n}"
                        }
                    }
                ],
                "doc": "The contamination value is read from the FREEMIX field of the _.selfSM_ file output by verifyBamId. In Zamboni production, this value is stored directly in METRICS.AGGREGATION_CONTAM. Contamination is also stored in GVCF_CALLING and thereby passed to HAPLOTYPE_CALLER. But first, it is divided by an underestimation factor thusly:\n\n`float(FREEMIX) / ContaminationUnderestimationFactor`\n\nwhere the denominator is hardcoded in Zamboni:\n\n`val ContaminationUnderestimationFactor = 0.75f`\n\nHere, this is handled by returning both the original _.selfSM_ file for reporting, and the adjusted contamination estimate for use in variant calling.\n\n###**Input**\n\n* [Required] Input BAM (with .bai)\n* [Required] Reference FASTA (with .fai)\n* [Required] Bed file for markers used in this analysis\n* UD matrix file from SVD result of genotype matrix\n* Mean matrix file of genotype matrix\n\n###**Output**\n\n* _.selfSM_ file\n* Contamination value\n\n###**Common Use Cases**\n\n    // Germline WDL command:  \n    /usr/gitc/VerifyBamID \\\n       --Verbose \\\n       --NumPC 4 \\\n       --Output ${output_prefix} \\\n       --BamFile ${input_bam} \\\n       --Reference ${ref_fasta} \\\n       --UDPath ${contamination_sites_ud} \\\n       --MeanPath ${contamination_sites_mu} \\\n       --BedPath ${contamination_sites_bed} \\\n\n\nAfter previous command, python script is executed to calculate contamination. See [CheckContamination task](https://github.com/gatk-workflows/broad-prod-wgs-germline-snps-indels/blob/master/PairedEndSingleSampleWf.gatk4.0.wdl) for more details.\n\n###**Changes Introduced by Seven Bridges**\n\nPython code provided within WGS Germline WDL was adjusted to be called as a script (`contamination.py`).\n\n###**Common Issues and Important Notes**\n\nNone.",
                "label": "CheckContamination",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "&& python3 contamination.py"
                    },
                    {
                        "prefix": "--selfSM",
                        "shellQuote": false,
                        "position": 5,
                        "valueFrom": "*.selfSM"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": 1000,
                        "coresMin": 4
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/verify-bam-id:c8a66425c312e5f8be46ab0c41f8d7a1942b6e16-1500298351"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "contamination.py",
                                "entry": "import csv\nimport sys\nimport argparse\n\nargs = argparse.ArgumentParser(description='The script is used to read from the .selfSM file '\n                                           'and calculate contamination, which gets printed out.')\nargs.add_argument('--selfSM', help='.selfSM file', required=True)\nargs.add_argument('--cont_factor', help='Contamination underestimation factor', type=float,\n                  default=0.75, required=False)\nparsed = args.parse_args()\nselfSM_file = parsed.selfSM\ncontamination_underestimation_factor = parsed.cont_factor\n\nwith open(selfSM_file) as selfSM:\n    reader = csv.DictReader(selfSM, delimiter='\\t')\n    i = 0\n    for row in reader:\n        if float(row[\"FREELK0\"]) == 0 and float(row[\"FREELK1\"]) == 0:\n            # a zero value for the likelihoods implies no data.\n            # This usually indicates a problem rather than a real event.\n            # if the bam isn't really empty, this is probably due to the use of a incompatible reference build between\n            # vcf and bam.\n            sys.stderr.write(\"Found zero likelihoods. Bam is either very-very shallow, \"\n                             \"or aligned to the wrong reference (relative to the vcf).\")\n            sys.exit(1)\n        with open(\"contamination_value.txt\",\"w\") as contfile:\n            contamination = float(row[\"FREEMIX\"])/contamination_underestimation_factor\n            contfile.write(str(contamination))\n            contfile.close()\n        print(float(row[\"FREEMIX\"])/contamination_underestimation_factor)\n        i = i + 1\n        # there should be exactly one row, and if this isn't the case the format of the output is unexpectedly different\n        # and the results are not reliable.\n        if i != 1:\n            sys.stderr.write(\"Found %d rows in .selfSM file. Was expecting exactly 1. This is an error\" % i)\n            sys.exit(2)\n",
                                "writable": false
                            }
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552913057,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552913180,
                        "sbg:revisionNotes": "Copy of revision 3 from Vlada's project"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552913803,
                        "sbg:revisionNotes": "Description modified"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556034586,
                        "sbg:revisionNotes": "removed contamination.py - wrong!"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556035541,
                        "sbg:revisionNotes": "rev 2"
                    }
                ],
                "sbg:image_url": null,
                "sbg:toolkit": "GATK",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "BSD 3-clause",
                "sbg:categories": [
                    "SAM/BAM Processing"
                ],
                "sbg:links": [
                    {
                        "id": "https://github.com/gatk-workflows/broad-prod-wgs-germline-snps-indels",
                        "label": "GATK Germline GitHub"
                    }
                ],
                "sbg:toolkitVersion": "4",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/checkcontamination/4",
                "sbg:revision": 4,
                "sbg:revisionNotes": "rev 2",
                "sbg:modifiedOn": 1556035541,
                "sbg:modifiedBy": "vladimirk",
                "sbg:createdOn": 1552913057,
                "sbg:createdBy": "ana_d",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "vladimirk",
                    "ana_d"
                ],
                "sbg:latestRevision": 4,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a3651250537c73494c718e57a7453ad7e675665da0346a98017337ef66350899f"
            },
            "label": "CheckContamination",
            "sbg:x": 471.674072265625,
            "sbg:y": -301.8492126464844
        },
        {
            "id": "gatk_baserecalibrator_4_0_11_0",
            "in": [
                {
                    "id": "in_alignments",
                    "source": "picard_sortsam_1_140/out_alignments"
                },
                {
                    "id": "include_intervals_file",
                    "source": "createsequencegroupinglists/sequence_grouping"
                },
                {
                    "id": "known_indels",
                    "source": [
                        "known_indels"
                    ]
                },
                {
                    "id": "memory_per_job",
                    "default": 4000
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "use_original_qualities",
                    "default": true
                }
            ],
            "out": [
                {
                    "id": "output"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "stefan_stojanovic/gatk-4-0-dev/gatk-baserecalibrator-4-0-11-0/6",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "ambig_filter_bases",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-bases",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig filter bases",
                        "doc": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjuction with argument(s) maxAmbiguousBaseFraction. Valid only if \"AmbiguousBaseReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "ambig_filter_frac",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-frac",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig filter frac",
                        "doc": "Threshold fraction of ambiguous bases. Cannot be used in conjuction with argument(s) maxAmbiguousBases. Valid only if \"AmbiguousBaseReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "binary_tag_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--binary-tag-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Binary tag name",
                        "doc": "The binary tag covariate name if using it."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "black_listed_lanes",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--black-listed-lanes', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Black listed lanes",
                        "doc": "Platform unit (PU) to filter out. This argument must be specified at least once. Valid only if \"PlatformUnitReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "40",
                        "id": "bqsr_baq_gap_open_penalty",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--bqsr-baq-gap-open-penalty",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "BQSR BAQ gap open penalty",
                        "doc": "BQSR BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "-1",
                        "id": "default_base_qualities",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--default-base-qualities",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Default base qualities",
                        "doc": "Assign a default base quality."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "45",
                        "id": "deletions_default_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--deletions-default-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Deletions default quality",
                        "doc": "Default quality for the base deletions covariate."
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "disable_read_filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "disable_read_filter",
                                    "symbols": [
                                        "AlignmentAgreesWithHeaderReadFilter",
                                        "AllowAllReadsReadFilter",
                                        "AmbiguousBaseReadFilter",
                                        "CigarContainsNoNOperator",
                                        "FirstOfPairReadFilter",
                                        "FragmentLengthReadFilter",
                                        "GoodCigarReadFilter",
                                        "HasReadGroupReadFilter",
                                        "LibraryReadFilter",
                                        "MappedReadFilter",
                                        "MappingQualityAvailableReadFilter",
                                        "MappingQualityNotZeroReadFilter",
                                        "MappingQualityReadFilter",
                                        "MatchingBasesAndQualsReadFilter",
                                        "MateDifferentStrandReadFilter",
                                        "MateOnSameContigOrNoMappedMateReadFilter",
                                        "MetricsReadFilter",
                                        "NonChimericOriginalAlignmentReadFilter",
                                        "NonZeroFragmentLengthReadFilter",
                                        "NonZeroReferenceLengthAlignmentReadFilter",
                                        "NotDuplicateReadFilter",
                                        "NotOpticalDuplicateReadFilter",
                                        "NotSecondaryAlignmentReadFilter",
                                        "NotSupplementaryAlignmentReadFilter",
                                        "OverclippedReadFilter",
                                        "PairedReadFilter",
                                        "PassesVendorQualityCheckReadFilter",
                                        "PlatformReadFilter",
                                        "PlatformUnitReadFilter",
                                        "PrimaryLineReadFilter",
                                        "ProperlyPairedReadFilter",
                                        "ReadGroupBlackListReadFilter",
                                        "ReadGroupReadFilter",
                                        "ReadLengthEqualsCigarLengthReadFilter",
                                        "ReadLengthReadFilter",
                                        "ReadNameReadFilter",
                                        "ReadStrandFilter",
                                        "SampleReadFilter",
                                        "SecondOfPairReadFilter",
                                        "SeqIsStoredReadFilter",
                                        "ValidAlignmentEndReadFilter",
                                        "ValidAlignmentStartReadFilter",
                                        "WellformedReadFilter"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--disable-read-filter', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Disable read filter",
                        "doc": "Read filters to be disabled before analysis."
                    },
                    {
                        "sbg:altPrefix": "-disable-sequence-dictionary-validation",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_sequence_dictionary_validation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-sequence-dictionary-validation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable sequence dictionary validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!"
                    },
                    {
                        "sbg:altPrefix": "-disable-tool-default-read-filters",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_tool_default_read_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-read-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable tool default read filters",
                        "doc": "Disable all tool default read filters (WARNING: many tools will not function correctly without their default read filters on)."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "dont_require_soft_clips_both_ends",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-require-soft-clips-both-ends",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dont require soft clips both ends",
                        "doc": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Valid only if \"OverclippedReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude intervals file",
                        "doc": "File which contains one or more genomic intervals to exclude from processing.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "exclude_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--exclude-intervals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Exclude intervals string",
                        "doc": "One or more genomic intervals to exclude from processing."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "30",
                        "id": "filter_too_short",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--filter-too-short",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Filter too short",
                        "doc": "Minimum number of aligned bases. Valid only if \"OverclippedReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-ics",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "3",
                        "id": "indels_context_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--indels-context-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Indels context size",
                        "doc": "Size of the k-mer context to be used for base insertions and deletions."
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Required Arguments",
                        "id": "in_alignments",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--input",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input BAM/SAM/CRAM file",
                        "doc": "BAM/SAM/CRAM file containing reads.",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "secondaryFiles": [
                            "${\n    if (self.nameext == \".bam\")\n    {\n        return [self.basename + \".bai\", self.nameroot + \".bai\"];\n    }\n    else if (self.nameext == \".cram\")\n    {\n        return [self.basename + \".crai\", self.nameroot + \".crai\"];\n    }\n    \n}"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "45",
                        "id": "insertions_default_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--insertions-default-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Insertions default quality",
                        "doc": "Default quality for the base insertions covariate."
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-exclusion-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval exclusion padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding."
                    },
                    {
                        "sbg:altPrefix": "-imr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "ALL",
                        "id": "interval_merging_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-merging-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval merging rule",
                        "doc": "Interval merging rule for abutting intervals."
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including."
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "UNION",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-set-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval set rule",
                        "doc": "Set merging approach to use for combining interval inputs."
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Include intervals file",
                        "doc": "File which contains one or more genomic intervals over which to operate.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--intervals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Include intervals string",
                        "doc": "One or more genomic intervals over which to operate."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "keep_read_group",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--keep-read-group",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep read group",
                        "doc": "The name of the read group to keep. Valid only if \"ReadGroupReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "keep_reverse_strand_only",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--keep-reverse-strand-only",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep reverse strand only",
                        "doc": "Keep only reads on the reverse strand. Valid only if \"ReadStrandFilter\" is specified."
                    },
                    {
                        "sbg:category": "Required Arguments",
                        "id": "known_indels",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if (self) {\n        self = [].concat.apply([], self);\n        var cmd = [];\n        for (let i = 0; i < self.length; i++)  {\n            cmd.push('--known-sites', self[i].path);\n        }\n        return cmd.join(' ');\n    }\n}"
                        },
                        "label": "Known indels",
                        "doc": "One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis. This argument must be specified at least once.",
                        "sbg:fileTypes": "VCF",
                        "secondaryFiles": [
                            "${\n    return [self.basename + \".idx\", self.nameroot + \".idx\", self.basename + \".tbi\", self.nameroot + \".tbi\"]\n}"
                        ]
                    },
                    {
                        "sbg:category": "Required Arguments",
                        "id": "known_snps",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--known-sites', self[i].path);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Known SNPs",
                        "doc": "One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis. This argument must be specified at least once.",
                        "sbg:fileTypes": "VCF",
                        "secondaryFiles": [
                            "${\n    return self.basename + \".idx\"\n}"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:category": "Conditional Arguments",
                        "id": "library",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--library', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Library",
                        "doc": "Name of the library to keep. This argument must be specified at least once. Valid only if \"LibraryReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "2",
                        "id": "low_quality_tail",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--low-quality-tail",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Low quality tail",
                        "doc": "Minimum quality for the bases in the tail of the reads to be considered."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "1000000",
                        "id": "max_fragment_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-fragment-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max fragment length",
                        "doc": "Maximum length of fragment (insert size). Valid only if \"FragmentLengthReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "max_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max read length",
                        "doc": "Keep only reads with length at most equal to the specified value. Valid only if \"ReadLengthReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-max-cycle",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "500",
                        "id": "maximum_cycle_value",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maximum-cycle-value",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Maximum cycle value",
                        "doc": "The maximum cycle value permitted for the Cycle covariate."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "maximum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maximum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Maximum mapping quality",
                        "doc": "Maximum mapping quality to keep (inclusive). Valid only if \"MappingQualityReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job",
                        "doc": "This input allows a user to set the desired overhead memory when running a tool or adding it to a workflow. This amount will be added to the Memory per job in the Memory requirements section but it will not be added to the -Xmx parameter leaving some memory not occupied which can be used as stack memory (-Xmx parameter defines heap memory). This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "This input allows a user to set the desired memory requirement when running a tool or adding it to a workflow. This value should be propagated to the -Xmx parameter too.This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "1",
                        "id": "min_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min read length",
                        "doc": "Keep only reads with length at least equal to the specified value. Valid only if \"ReadLengthReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "10",
                        "id": "minimum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--minimum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Minimum mapping quality",
                        "doc": "Minimum mapping quality to keep (inclusive). Valid only if \"MappingQualityReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-mcs",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "2",
                        "id": "mismatches_context_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--mismatches-context-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mismatches context size",
                        "doc": "Size of the k-mer context to be used for base mismatches."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "-1",
                        "id": "mismatches_default_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--mismatches-default-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mismatches default quality",
                        "doc": "Default quality for the base mismatches covariate."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "platform_filter_name",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--platform-filter-name', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Platform filter name",
                        "doc": "Platform attribute (PL) to match. This argument must be specified at least once. Valid only if \"PlatformReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "6",
                        "id": "preserve_qscores_less_than",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--preserve-qscores-less-than",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Preserve qscores less than",
                        "doc": "Don't recalibrate bases with quality scores less than this threshold (with -bqsr)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "16",
                        "id": "quantizing_levels",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--quantizing-levels",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quantizing levels",
                        "doc": "Number of distinct quality scores in the quantized output."
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "read_filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "AlignmentAgreesWithHeaderReadFilter",
                                        "AllowAllReadsReadFilter",
                                        "AmbiguousBaseReadFilter",
                                        "CigarContainsNoNOperator",
                                        "FirstOfPairReadFilter",
                                        "FragmentLengthReadFilter",
                                        "GoodCigarReadFilter",
                                        "HasReadGroupReadFilter",
                                        "LibraryReadFilter",
                                        "MappedReadFilter",
                                        "MappingQualityAvailableReadFilter",
                                        "MappingQualityNotZeroReadFilter",
                                        "MappingQualityReadFilter",
                                        "MatchingBasesAndQualsReadFilter",
                                        "MateDifferentStrandReadFilter",
                                        "MateOnSameContigOrNoMappedMateReadFilter",
                                        "MetricsReadFilter",
                                        "NonChimericOriginalAlignmentReadFilter",
                                        "NonZeroFragmentLengthReadFilter",
                                        "NonZeroReferenceLengthAlignmentReadFilter",
                                        "NotDuplicateReadFilter",
                                        "NotOpticalDuplicateReadFilter",
                                        "NotSecondaryAlignmentReadFilter",
                                        "NotSupplementaryAlignmentReadFilter",
                                        "OverclippedReadFilter",
                                        "PairedReadFilter",
                                        "PassesVendorQualityCheckReadFilter",
                                        "PlatformReadFilter",
                                        "PlatformUnitReadFilter",
                                        "PrimaryLineReadFilter",
                                        "ProperlyPairedReadFilter",
                                        "ReadGroupBlackListReadFilter",
                                        "ReadGroupReadFilter",
                                        "ReadLengthEqualsCigarLengthReadFilter",
                                        "ReadLengthReadFilter",
                                        "ReadNameReadFilter",
                                        "ReadStrandFilter",
                                        "SampleReadFilter",
                                        "SecondOfPairReadFilter",
                                        "SeqIsStoredReadFilter",
                                        "ValidAlignmentEndReadFilter",
                                        "ValidAlignmentStartReadFilter",
                                        "WellformedReadFilter"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--read-filter', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Read filter",
                        "doc": "Read filters to be applied before analysis."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "read_group_black_list",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--read-group-black-list', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Read group black list",
                        "doc": "The name of the read group to filter out. This argument must be specified at least once. Valid only if \"ReadGroupBlackListReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "read_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read name",
                        "doc": "Keep only reads with this read name. Valid only if \"ReadNameReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "SILENT",
                        "id": "read_validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "read_validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-validation-stringency",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read validation stringency",
                        "doc": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded."
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Required Arguments",
                        "id": "in_reference",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence file.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:category": "Conditional Arguments",
                        "id": "sample",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--sample', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Sample",
                        "doc": "The name of the sample(s) to keep, filtering out all others. This argument must be specified at least once. Valid only if \"SampleReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-sequence-dictionary",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "10.0",
                        "id": "sequence_dictionary",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--sequence-dictionary",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sequence dictionary",
                        "doc": "Use the given sequence dictionary as the master/canonical sequence dictionary. Must be a .dict file.",
                        "sbg:fileTypes": "DICT"
                    },
                    {
                        "sbg:altPrefix": "-OQ",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "use_original_qualities",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "use_original_qualities"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--use-original-qualities",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use original qualities",
                        "doc": "Use the base quality scores from the OQ tag."
                    },
                    {
                        "sbg:category": "Optional arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output file name prefix."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job",
                        "doc": "This input allows a user to set the desired CPU requirement when running a tool or adding it to a workflow."
                    }
                ],
                "outputs": [
                    {
                        "id": "output",
                        "doc": "The output recalibration table file.",
                        "label": "Output recalibration report",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*csv",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "sbg:fileTypes": "CSV"
                    }
                ],
                "doc": "The **GATK BaseRecalibrator** tool performs first pass of Base Quality Score Recalibration (BQSR) based on various covariates. The default covariates are read group, reported quality score, machine cycle, and nucleotide context. The tool generates on a recalibration table on its output.\n\n*A list of **all inputs and parameters** with corresponding descriptions can be found at the bottom of the page.*\n\n###Common Use Cases\n\n* The **GATK BaseRecalibrator** tool requires the input read data whose quality scores need to be assessed on its **Input BAM/SAM/CRAM file** (`--input`) input and the database of known polymorphic sites to skip over on its **Known SNPs** and **Known INDELs** (`--known-sites`) inputs. The tool generates on its **Output recalibration report** output a GATK report file with many tables: the list of arguments, the quantized qualities table, the recalibration table by read group, the recalibration table by quality score,\nthe recalibration table for all the optional covariates.\n\n* Usage example:\n\n```\ngatk BaseRecalibrator \\\n   --input my_reads.bam \\\n   --reference reference.fasta \\\n   --known-sites sites_of_variation.vcf \\\n   --known-sites another/optional/setOfSitesToMask.vcf \\\n   --output recal_data.table\n\n```\n\n###Changes Introduced by Seven Bridges\n\n* All output files will be prefixed using the **Output prefix** parameter. In case **Output prefix** is not provided, output prefix will be the same as the Sample ID metadata from **Input SAM/BAM/CRAM file**, if the Sample ID metadata exists. Otherwise, output prefix will be inferred from the **Input SAM/BAM/CRAM** filename. This way, having identical names of the output files between runs is avoided. Moreover,  **recal_data** will be added before the extension of the output file name which is CSV by default. \n\n* **Include intervals** (`--intervals`) option is divided into **Include intervals string** and **Include intervals file** options.\n\n* **Exclude intervals** (`--exclude-intervals`) option is divided into **Exclude intervals string** and **Exclude intervals file** options.\n\n###Common Issues and Important Notes\n\n* None\n\n###Performance Benchmarking\n\nBelow is a table describing runtimes and task costs of **GATK BaseRecalibrator** for a couple of different samples, executed on the AWS cloud instances:\n\n*Cost can be significantly reduced by using **spot instances**. Visit the [Knowledge Center](https://docs.sevenbridges.com/docs/about-spot-instances) for more details.*\n\n###References\n\n[1] [GATK BaseRecalibrator](https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_bqsr_BaseRecalibrator.php)",
                "label": "GATK BaseRecalibrator",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/opt/gatk"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--java-options"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    cmd = \"-XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log \"\n    if (inputs.memory_per_job) {\n        cmd += '-Xmx'.concat(inputs.memory_per_job, 'M')\n    } else {\n        cmd += '-Xmx2048M'\n    }\n    return '\\\"' + cmd + '\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "BaseRecalibrator"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var in_alignments = inputs.in_alignments;\n    var output_prefix = '';\n    if (inputs.output_prefix)\n    {\n        output_prefix = inputs.output_prefix;\n    }\n    else \n    {\n        if (in_alignments.metadata && in_alignments.metadata.sample_id)\n        {\n            output_prefix = in_alignments.metadata.sample_id;\n        }\n        else \n        {\n            output_prefix = in_alignments.path.split('/').pop().split('.')[0]\n        }\n    }\n    \n    return \"--output \" + output_prefix + \".recal_data.csv\";\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    var memory = 2048;\n    if (inputs.memory_per_job) \n    {\n        memory = inputs.memory_per_job;\n    }\n    if (inputs.memory_overhead_per_job)\n    {\n        memory += inputs.memory_overhead_per_job;\n    }\n    return memory;\n}",
                        "coresMin": "${\n    return inputs.cpu_per_job ? inputs.cpu_per_job : 1\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/gatk:4.0.11.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};",
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "Utilities",
                    "BAM Processing"
                ],
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:toolkit": "GATK",
                "sbg:toolkitVersion": "4.1.0.0",
                "sbg:projectName": "GATK 4.0.11.0 Toolkit Dev",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554380417,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-baserecalibrator-4-1-0-0/12"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554382246,
                        "sbg:revisionNotes": "change docker version to images.sbgenomics.com/vladimirk/gatk:4.0.11.0"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554382511,
                        "sbg:revisionNotes": "fix --java-options cmd"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554383235,
                        "sbg:revisionNotes": "fix expression for known_indels"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554388197,
                        "sbg:revisionNotes": "fix expression for known sites"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554388711,
                        "sbg:revisionNotes": "use_original_qualities set to enum"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554393534,
                        "sbg:revisionNotes": "fix secondary files expression for known indels"
                    }
                ],
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/releases/download/4.1.0.0/gatk-4.1.0.0.zip",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.ncbi.nlm.nih.gov/pubmed?term=20644199",
                        "label": "Publications"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_bqsr_BaseRecalibrator.php",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "stefan_stojanovic/gatk-4-0-dev/gatk-baserecalibrator-4-0-11-0/6",
                "sbg:revision": 6,
                "sbg:revisionNotes": "fix secondary files expression for known indels",
                "sbg:modifiedOn": 1554393534,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554380417,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "stefan_stojanovic/gatk-4-0-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 6,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "ae48a0be66f92024f4faedff930ee2d1649942d57dca6cddf3a18aaef1d5c1219"
            },
            "label": "GATK BaseRecalibrator",
            "scatter": [
                "include_intervals_file"
            ],
            "sbg:x": 483.809326171875,
            "sbg:y": 11.611960411071777
        },
        {
            "id": "gatherbqsrreports",
            "in": [
                {
                    "id": "in_bqsr_reports",
                    "source": [
                        "gatk_baserecalibrator_4_0_11_0/output"
                    ]
                },
                {
                    "id": "memory_per_job",
                    "default": 3000
                }
            ],
            "out": [
                {
                    "id": "out_gathered_reports"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "stefan_stojanovic/gatk-4-0-dev/gatherbqsrreports/6",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Required Arguments",
                        "sbg:altPrefix": "-I",
                        "id": "in_bqsr_reports",
                        "type": "File[]",
                        "inputBinding": {
                            "prefix": "--input",
                            "itemSeparator": " ",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        self = [].concat.apply([], self)\n        var paths = [];\n        for (i=0; i<self.length; i++) {\n            paths.push(self[i].path)\n        }\n        return paths.join(' --input ')\n    }\n}"
                        },
                        "label": "Input",
                        "doc": "List of scattered BQSR report files This argument must be specified at least once.",
                        "sbg:fileTypes": "GRP"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:altPrefix": "-verbosity",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--verbosity",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory Per Job"
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job"
                    },
                    {
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output prefix."
                    }
                ],
                "outputs": [
                    {
                        "id": "out_gathered_reports",
                        "doc": "Gathered report - merged inputs.",
                        "label": "Gathered report",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.csv"
                        },
                        "sbg:fileTypes": "GRP"
                    }
                ],
                "doc": "Gathers scattered BQSR recalibration reports from BaseRecalibrator\n\n### Description\n\nGathers scattered BQSR recalibration reports  from parallelized base recalibration runs into a single file.\nThe combination is done simply by adding up all observations and errors.\n\n### Common Issues and Important Notes\nThis tool is intended to be used to combine recalibration tables from runs of BaseRecalibrator parallelized per-interval.\nThis method DOES NOT recalculate the empirical qualities and quantized qualities. You have to recalculate them after combining. The reason for not calculating it is because this function is intended for combining a series of recalibration reports, and it only makes sense to calculate the empirical qualities and quantized qualities after all the recalibration reports have been combined. This is done to make the tool faster.\nThe reported empirical quality is recalculated (because it is so simple to do).",
                "label": "GATK GatherBQSRReports",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/opt/gatk"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--java-options"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n    return '\\\"-Xmx2048M\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "GatherBQSRReports"
                    },
                    {
                        "prefix": "-O",
                        "shellQuote": false,
                        "position": 5,
                        "valueFrom": "${\n    output_ext = inputs.in_bqsr_reports[0].path.split('.').pop()\n    if (inputs.output_prefix) {\n        output_prefix = inputs.output_prefix;\n    } else {\n        if (inputs.in_bqsr_reports[0].metadata && inputs.in_bqsr_reports[0].metadata.sample_id) {\n            output_prefix = inputs.in_bqsr_reports[0].metadata.sample_id;\n        } else {\n            output_prefix = inputs.in_bqsr_reports[0].path.split('/').pop().split('.')[0] + '.sorted';\n        }\n    }\n    \n    return output_prefix + '.' + output_ext;\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/gatk:4.0.11.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:toolkit": "GATK",
                "sbg:categories": [
                    "GATK-4"
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolkitVersion": "4.0.0.0",
                "sbg:image_url": null,
                "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" GatherBQSRReports --input /path/to/input-1.ext --input /path/to/input-2.ext",
                "sbg:projectName": "GATK 4.0.11.0 Toolkit Dev",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554384029,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/GatherBQSRReports/8"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554384144,
                        "sbg:revisionNotes": "change docker version to images.sbgenomics.com/vladimirk/gatk:4.0.11.0"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554395269,
                        "sbg:revisionNotes": "fix expression for output_prefix"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554396097,
                        "sbg:revisionNotes": "fix expression for output naming"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554397315,
                        "sbg:revisionNotes": "fix expression for in_bqsr_reports input"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554398890,
                        "sbg:revisionNotes": "fix glob for output report"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554399356,
                        "sbg:revisionNotes": "fix expression for output prefix naming, remove whitespace"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "stefan_stojanovic/gatk-4-0-dev/gatherbqsrreports/6",
                "sbg:revision": 6,
                "sbg:revisionNotes": "fix expression for output prefix naming, remove whitespace",
                "sbg:modifiedOn": 1554399356,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554384029,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "stefan_stojanovic/gatk-4-0-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 6,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a60a62f3494e64c42324a320caf832e83ee982c276d377152a93c8ef4a38efc33"
            },
            "label": "GATK GatherBQSRReports",
            "sbg:x": 674.24609375,
            "sbg:y": 14.064289093017578
        },
        {
            "id": "gatk_applybqsr_4_0_11_0",
            "in": [
                {
                    "id": "add_output_sam_program_record",
                    "default": "true"
                },
                {
                    "id": "bqsr_recal_file",
                    "source": "gatherbqsrreports/out_gathered_reports"
                },
                {
                    "id": "in_alignments",
                    "source": "picard_sortsam_1_140/out_alignments"
                },
                {
                    "id": "include_intervals_file",
                    "source": "createsequencegroupinglists/sequence_grouping_with_unmapped"
                },
                {
                    "id": "memory_per_job",
                    "default": 3000
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "static_quantized_quals",
                    "default": [
                        10,
                        20,
                        30
                    ]
                },
                {
                    "id": "use_original_qualities",
                    "default": true
                },
                {
                    "id": "create_output_bam_md5",
                    "default": "true"
                }
            ],
            "out": [
                {
                    "id": "out_alignments"
                },
                {
                    "id": "out_alignments_checksum"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "stefan_stojanovic/gatk-4-0-dev/gatk-applybqsr-4-0-11-0/6",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "-add-output-sam-program-record",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "add_output_sam_program_record",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "add_output_sam_program_record"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--add-output-sam-program-record",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add output SAM program record",
                        "doc": "If true, adds a PG tag to created SAM/BAM/CRAM files."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "ambig_filter_bases",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-bases",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig filter bases",
                        "doc": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjuction with argument maxAmbiguousBaseFraction. Valid only if \"AmbiguousBaseReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "ambig_filter_frac",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-frac",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig filter frac",
                        "doc": "Threshold fraction of ambiguous bases. Cannot be used in conjuction with argument maxAmbiguousBases. Valid only if \"AmbiguousBaseReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "black_listed_lanes",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--black-listed-lanes', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Black listed lanes",
                        "doc": "Platform unit (PU) to filter out. Valid only if \"PlatformUnitReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-bqsr",
                        "sbg:category": "Required Arguments",
                        "id": "bqsr_recal_file",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--bqsr-recal-file",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "BQSR recal file",
                        "doc": "Input recalibration table for BQSR.",
                        "sbg:fileTypes": "CSV"
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "create_output_bam_index",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_output_bam_index"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--create-output-bam-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create output BAM/CRAM index",
                        "doc": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file."
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "disable_read_filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "disable_read_filter",
                                    "symbols": [
                                        "AlignmentAgreesWithHeaderReadFilter",
                                        "AllowAllReadsReadFilter",
                                        "AmbiguousBaseReadFilter",
                                        "CigarContainsNoNOperator",
                                        "FirstOfPairReadFilter",
                                        "FragmentLengthReadFilter",
                                        "GoodCigarReadFilter",
                                        "HasReadGroupReadFilter",
                                        "LibraryReadFilter",
                                        "MappedReadFilter",
                                        "MappingQualityAvailableReadFilter",
                                        "MappingQualityNotZeroReadFilter",
                                        "MappingQualityReadFilter",
                                        "MatchingBasesAndQualsReadFilter",
                                        "MateDifferentStrandReadFilter",
                                        "MateOnSameContigOrNoMappedMateReadFilter",
                                        "MetricsReadFilter",
                                        "NonChimericOriginalAlignmentReadFilter",
                                        "NonZeroFragmentLengthReadFilter",
                                        "NonZeroReferenceLengthAlignmentReadFilter",
                                        "NotDuplicateReadFilter",
                                        "NotOpticalDuplicateReadFilter",
                                        "NotSecondaryAlignmentReadFilter",
                                        "NotSupplementaryAlignmentReadFilter",
                                        "OverclippedReadFilter",
                                        "PairedReadFilter",
                                        "PassesVendorQualityCheckReadFilter",
                                        "PlatformReadFilter",
                                        "PlatformUnitReadFilter",
                                        "PrimaryLineReadFilter",
                                        "ProperlyPairedReadFilter",
                                        "ReadGroupBlackListReadFilter",
                                        "ReadGroupReadFilter",
                                        "ReadLengthEqualsCigarLengthReadFilter",
                                        "ReadLengthReadFilter",
                                        "ReadNameReadFilter",
                                        "ReadStrandFilter",
                                        "SampleReadFilter",
                                        "SecondOfPairReadFilter",
                                        "SeqIsStoredReadFilter",
                                        "ValidAlignmentEndReadFilter",
                                        "ValidAlignmentStartReadFilter",
                                        "WellformedReadFilter"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "separate": false,
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--disable-read-filter', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Disable read filter",
                        "doc": "Read filters to be disabled before analysis."
                    },
                    {
                        "sbg:altPrefix": "-disable-sequence-dictionary-validation",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_sequence_dictionary_validation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-sequence-dictionary-validation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable sequence dictionary validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!"
                    },
                    {
                        "sbg:altPrefix": "-disable-tool-default-read-filters",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_tool_default_read_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-read-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable tool default read filters",
                        "doc": "Disable all tool default read filters (warning: many tools will not function correctly without their default read filters on)."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "dont_require_soft_clips_both_ends",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-require-soft-clips-both-ends",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dont require soft clips both ends",
                        "doc": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Valid only if \"OverclippedReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "emit_original_quals",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--emit-original-quals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Emit original quals",
                        "doc": "Emit original base qualities under the OQ tag."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude intervals file",
                        "doc": "File which contains one or more genomic intervals to exclude from processing.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "exclude_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--exclude-intervals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Exclude intervals string",
                        "doc": "One or more genomic intervals to exclude from processing."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "30",
                        "id": "filter_too_short",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--filter-too-short",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Filter too short",
                        "doc": "Minimum number of aligned bases. Valid only if \"OverclippedReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "-1.0",
                        "id": "global_qscore_prior",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--global-qscore-prior",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Global Qscore prior",
                        "doc": "Global Qscore Bayesian prior to use for BQSR."
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Required Arguments",
                        "id": "in_alignments",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--input",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input BAM/SAM/CRAM file",
                        "doc": "BAM/SAM/CRAM file(s) containing reads.",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "secondaryFiles": [
                            "${\n    \n    if (self.nameext == \".bam\")\n    {\n        return [self.basename + \".bai\", self.nameroot + \".bai\"];\n    }\n    else if (self.nameext == \".cram\")\n    {\n        return [self.basename + \".crai\", self.nameroot + \".crai\"];\n    }\n    \n}"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-exclusion-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval exclusion padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding."
                    },
                    {
                        "sbg:altPrefix": "-imr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "ALL",
                        "id": "interval_merging_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-merging-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval merging rule",
                        "doc": "Interval merging rule for abutting intervals."
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including."
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "UNION",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-set-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval set rule",
                        "doc": "Set merging approach to use for combining interval inputs."
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Include intervals file",
                        "doc": "File which contains one or more genomic intervals over which to operate.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--intervals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Include intervals string",
                        "doc": "One or more genomic intervals over which to operate."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "keep_read_group",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--keep-read-group",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep read group",
                        "doc": "The name of the read group to keep. Valid only if \"ReadGroupReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "keep_reverse_strand_only",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--keep-reverse-strand-only",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep reverse strand only",
                        "doc": "Keep only reads on the reverse strand. Valid only if \"ReadStrandFilter\" is specified"
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:category": "Conditional Arguments",
                        "id": "library",
                        "type": "string[]?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--library', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Library",
                        "doc": "Name of the library to keep. Valid only if \"LibraryReadFilter\" is specified"
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "1000000",
                        "id": "max_fragment_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-fragment-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max fragment length",
                        "doc": "Maximum length of fragment (insert size). Valid only if \"FragmentLengthReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "max_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max read length",
                        "doc": "Keep only reads with length at most equal to the specified value. Valid only if \"ReadLengthReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "maximum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maximum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Maximum mapping quality",
                        "doc": "Maximum mapping quality to keep (inclusive). Valid only if \"MappingQualityReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job",
                        "doc": "This input allows a user to set the desired overhead memory when running a tool or adding it to a workflow. This amount will be added to the Memory per job in the Memory requirements section but it will not be added to the -Xmx parameter leaving some memory not occupied which can be used as stack memory (-Xmx parameter defines heap memory). This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "This input allows a user to set the desired memory requirement when running a tool or adding it to a workflow. This value should be propagated to the -Xmx parameter too.This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "1",
                        "id": "min_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min read length",
                        "doc": "Keep only reads with length at least equal to the specified value. Valid only if \"ReadLengthReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "10",
                        "id": "minimum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--minimum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Minimum mapping quality",
                        "doc": "Minimum mapping quality to keep (inclusive). Valid only if \"MappingQualityReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "platform_filter_name",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--platform-filter-name', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Platform filter name",
                        "doc": "Platform attribute (PL) to match. Valid only if \"PlatformReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "6",
                        "id": "preserve_qscores_less_than",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--preserve-qscores-less-than",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Preserve qscores less than",
                        "doc": "Don't recalibrate bases with quality scores less than this threshold."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "quantize_quals",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--quantize-quals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quantize quals",
                        "doc": "Quantize quality scores to a given number of levels. Cannot be used in conjuction with argument(s) staticQuantizationQuals, roundDown."
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "read_filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "AlignmentAgreesWithHeaderReadFilter",
                                        "AllowAllReadsReadFilter",
                                        "AmbiguousBaseReadFilter",
                                        "CigarContainsNoNOperator",
                                        "FirstOfPairReadFilter",
                                        "FragmentLengthReadFilter",
                                        "GoodCigarReadFilter",
                                        "HasReadGroupReadFilter",
                                        "LibraryReadFilter",
                                        "MappedReadFilter",
                                        "MappingQualityAvailableReadFilter",
                                        "MappingQualityNotZeroReadFilter",
                                        "MappingQualityReadFilter",
                                        "MatchingBasesAndQualsReadFilter",
                                        "MateDifferentStrandReadFilter",
                                        "MateOnSameContigOrNoMappedMateReadFilter",
                                        "MetricsReadFilter",
                                        "NonChimericOriginalAlignmentReadFilter",
                                        "NonZeroFragmentLengthReadFilter",
                                        "NonZeroReferenceLengthAlignmentReadFilter",
                                        "NotDuplicateReadFilter",
                                        "NotOpticalDuplicateReadFilter",
                                        "NotSecondaryAlignmentReadFilter",
                                        "NotSupplementaryAlignmentReadFilter",
                                        "OverclippedReadFilter",
                                        "PairedReadFilter",
                                        "PassesVendorQualityCheckReadFilter",
                                        "PlatformReadFilter",
                                        "PlatformUnitReadFilter",
                                        "PrimaryLineReadFilter",
                                        "ProperlyPairedReadFilter",
                                        "ReadGroupBlackListReadFilter",
                                        "ReadGroupReadFilter",
                                        "ReadLengthEqualsCigarLengthReadFilter",
                                        "ReadLengthReadFilter",
                                        "ReadNameReadFilter",
                                        "ReadStrandFilter",
                                        "SampleReadFilter",
                                        "SecondOfPairReadFilter",
                                        "SeqIsStoredReadFilter",
                                        "ValidAlignmentEndReadFilter",
                                        "ValidAlignmentStartReadFilter",
                                        "WellformedReadFilter"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--read-filter', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Read filter",
                        "doc": "Read filters to be applied before analysis."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "read_group_black_list",
                        "type": "string[]?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--read-group-black-list', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Read group black list",
                        "doc": "The name of the read group to filter out. Valid only if \"ReadGroupBlackListReadFilter\" is specified."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "id": "read_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read name",
                        "doc": "Keep only reads with this read name. Valid only if \"ReadNameReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "SILENT",
                        "id": "read_validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "read_validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-validation-stringency",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read validation stringency",
                        "doc": "Validation stringency for all SAM/BAM/CRAM files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded."
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "in_reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "round_down_quantized",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--round-down-quantized",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Round down quantized",
                        "doc": "Round quals down to nearest quantized qual. Cannot be used in conjuction with argument quantizationLevels."
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:category": "Conditional Arguments",
                        "id": "sample",
                        "type": "string[]?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--sample', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Sample",
                        "doc": "The name of the sample(s) to keep, filtering out all others. Valid only if \"SampleReadFilter\" is specified."
                    },
                    {
                        "sbg:altPrefix": "-seconds-between-progress-updates",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "10.0",
                        "id": "seconds_between_progress_updates",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--seconds-between-progress-updates",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Seconds between progress updates",
                        "doc": "Output traversal statistics every time this many seconds elapse."
                    },
                    {
                        "sbg:altPrefix": "-sequence-dictionary",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "10.0",
                        "id": "sequence_dictionary",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--sequence-dictionary",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sequence dictionary",
                        "doc": "Use the given sequence dictionary as the master/canonical sequence dictionary. Must be a .dict file.",
                        "sbg:fileTypes": "DICT"
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "static_quantized_quals",
                        "type": "int[]?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--static-quantized-quals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Static quantized quals",
                        "doc": "Use static quantized quality scores to a given number of levels (with -bqsr). Cannot be used in conjuction with argument(s) quantizationLevels."
                    },
                    {
                        "sbg:altPrefix": "-OQ",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "use_original_qualities",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "use_original_qualities"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--use-original-qualities",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use original qualities",
                        "doc": "Use the base quality scores from the OQ tag."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job",
                        "doc": "This input allows a user to set the desired CPU requirement when running a tool or adding it to a workflow."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output file name prefix."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_file_format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "sam",
                                    "bam",
                                    "cram"
                                ],
                                "name": "output_file_format"
                            }
                        ],
                        "label": "Output file format",
                        "doc": "Output file format"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "sbg:altPrefix": "-OBM",
                        "id": "create_output_bam_md5",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_output_bam_md5"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--create-output-bam-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create output BAM MD5",
                        "doc": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false."
                    },
                    {
                        "id": "compression_level",
                        "type": "int?",
                        "label": "Compression level"
                    }
                ],
                "outputs": [
                    {
                        "id": "out_alignments",
                        "doc": "Output base quality recalibrated BAM/SAM/CRAM file.",
                        "label": "Output recalibrated BAM/SAM/CRAM file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*am",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "secondaryFiles": [
                            "${\n    var output_ext = self.nameext;\n    if (output_ext == \".bam\")\n    {\n        return [self.basename + \".bai\", self.nameroot + \".bai\"]\n    }\n    else if (output_ext == \".cram\")\n    {\n        return [self.basename + \".crai\", self.nameroot + \".crai\"];\n    }\n}"
                        ],
                        "sbg:fileTypes": "BAM, SAM, CRAM"
                    },
                    {
                        "id": "out_alignments_checksum",
                        "label": "Output BAM MD5",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.md5",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "sbg:fileTypes": "MD5"
                    }
                ],
                "doc": "The **GATK ApplyBQSR** tool recalibrates the base qualities score of the input reads and outputs a recalibrated BAM, SAM or CRAM file. \n\nThis tool performs the second pass in a two-stage process called Base Quality Score Recalibration (BQSR). Specifically, it recalibrates the base qualities of the input reads based on the recalibration table produced by the **BaseRecalibrator** tool. The goal of this procedure is to correct systematic biasses that affect the assignment of base quality scores by the sequencer. The first pass consists of calculating error empirically and finding patterns in how error varies with basecall features over all bases. The relevant observations are written to the recalibration table. The second pass consists of applying numerical corrections to each individual basecall based on the patterns identified in the first step (recorded in the recalibration table) and write out the recalibrated data to a new BAM, SAM or CRAM file [1].\n\n*A list of **all inputs and parameters** with corresponding descriptions can be found at the bottom of the page.*\n\n###Common Use Cases\n\n* The **GATK ApplyBQSR** tool requires the BAM, SAM or CRAM file on its **Input BAM/SAM/CRAM file** (`--input`) input and the covariates table (= recalibration file) generated by the **BaseRecalibrator** tool on its **BQSR recal file** input (`--bqsr-recal-file`). The tool generates on its **Output BAM/SAM/CRAM** output a new alignments file which contains recalibrated read data.\n\n* Usage example\n\n```\n gatk ApplyBQSR \\\n   --reference reference.fasta \\\n   --input input.bam \\\n   --bqsr-recal-file recalibration.table \\\n   --output output.bam\n\n```\n\n* If the input alignments file is in CRAM format, the reference sequence is required on the **Reference sequence** (`--reference`) input of the tool.\n\n* Original qualities can be retained in the output file under the \"OQ\" tag if desired. See the **Emit original quals** (`--emit-original-quals`) argument for details.\n\n###Changes Introduced by Seven Bridges\n\n* All output files will be prefixed using the **Output prefix** parameter. In case **Output prefix** is not provided, output prefix will be the same as the Sample ID metadata from **Input SAM/BAM/CRAM file**, if the Sample ID metadata exists. Otherwise, output prefix will be inferred from the **Input SAM/BAM/CRAM** filename. This way, having identical names of the output files between runs is avoided. Moreover,  **recalibrated** will be added before the extension of the output file name. \n\n* The user has a possibility to specify the output file format using the **Output file format** argument. Otherwise, the output file format will be the same as the format of the input file.\n\n* **Include intervals** (`--intervals`) option is divided into **Include intervals string** and **Include intervals file** options.\n\n* **Exclude intervals** (`--exclude-intervals`) option is divided into **Exclude intervals string** and **Exclude intervals file** options.\n\n###Common Issues and Important Notes\n\n* Note 1: This tool replaces the use of PrintReads for the application of base quality score recalibration as practiced in earlier versions of GATK (2.x and 3.x) [1].\n\n* Note 2: You should only run **ApplyBQSR** with the covariates table created from the input BAM, SAM or CRAM file [1].\n\n###References\n\n[1] [GATK ApplyBQSR](https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_bqsr_ApplyBQSR.php)",
                "label": "GATK ApplyBQSR",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/opt/gatk"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--java-options"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    compression_level = inputs.compression_level ? inputs.compression_level : 2\n    cmd = \"-XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Dsamjdk.compression_level=\" + compression_level\n    if (inputs.memory_per_job) {\n        cmd += ' -Xmx'.concat(inputs.memory_per_job, 'M')\n    } else {\n        cmd += ' -Xmx2048M'\n    }\n    return '\\\"' + cmd + '\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "ApplyBQSR"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var in_alignments = inputs.in_alignments;\n    var output_ext = inputs.output_file_format ? inputs.output_file_format : in_alignments.path.split('.').pop();\n    var output_prefix = '';\n    if (inputs.output_prefix)\n    {\n        output_prefix = inputs.output_prefix;\n    }\n    else \n    {\n        if (in_alignments.metadata && in_alignments.metadata.sample_id)\n        {\n            output_prefix = in_alignments.metadata.sample_id;\n        }\n        else \n        {\n            output_prefix = in_alignments.path.split('/').pop().split('.')[0]\n        }\n    }\n    \n    return \"--output \" + output_prefix + \".recalibrated.\" + output_ext;\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 5,
                        "valueFrom": "${\n    var output_ext = inputs.output_file_format ? inputs.output_file_format :\n    inputs.in_alignments.path.split('.').pop();\n    if (output_ext == \"cram\")\n    {\n        return '&& for i in *cram.bai; do mv \"$i\" \"${i%.cram.bai}.cram.crai\";  done';\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    var memory = 2048;\n    if (inputs.memory_per_job) \n    {\n        memory = inputs.memory_per_job;\n    }\n    if (inputs.memory_overhead_per_job)\n    {\n        memory += inputs.memory_overhead_per_job;\n    }\n    return memory;\n}",
                        "coresMin": "${\n    return inputs.cpu_per_job ? inputs.cpu_per_job : 1\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/gatk:4.0.11.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};",
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "Utilities",
                    "BAM Processing"
                ],
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:toolkit": "GATK",
                "sbg:toolkitVersion": "4.1.0.0",
                "sbg:projectName": "GATK 4.0.11.0 Toolkit Dev",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554384273,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-applybqsr-4-1-0-0/11"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554384339,
                        "sbg:revisionNotes": "change docker version to images.sbgenomics.com/vladimirk/gatk:4.0.11.0"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554384579,
                        "sbg:revisionNotes": "fix --java-options expression"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554385638,
                        "sbg:revisionNotes": "add create_output_bam_md5 input"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554385760,
                        "sbg:revisionNotes": "add output port for md5 hash"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554398375,
                        "sbg:revisionNotes": "fix path to base command line"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554401169,
                        "sbg:revisionNotes": "fix java options to allow for compression level"
                    }
                ],
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/releases/download/4.1.0.0/gatk-4.1.0.0.zip",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.ncbi.nlm.nih.gov/pubmed?term=20644199",
                        "label": "Publications"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_bqsr_ApplyBQSR.php",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "stefan_stojanovic/gatk-4-0-dev/gatk-applybqsr-4-0-11-0/6",
                "sbg:revision": 6,
                "sbg:revisionNotes": "fix java options to allow for compression level",
                "sbg:modifiedOn": 1554401169,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554384273,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "stefan_stojanovic/gatk-4-0-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 6,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "ae95ce8fc633c7ff37a9f65d3ef0dcbcf90f36564790345848ec43114ad7499f3"
            },
            "label": "GATK ApplyBQSR",
            "scatter": [
                "include_intervals_file"
            ],
            "sbg:x": 875.3569946289062,
            "sbg:y": 16.046579360961914
        },
        {
            "id": "picard_gatherbamfiles",
            "in": [
                {
                    "id": "in_alignments",
                    "source": [
                        "gatk_applybqsr_4_0_11_0/out_alignments"
                    ]
                },
                {
                    "id": "memory_per_job",
                    "default": 2000
                },
                {
                    "id": "create_index",
                    "default": "true"
                },
                {
                    "id": "create_md5_file",
                    "default": "true"
                }
            ],
            "out": [
                {
                    "id": "out_alignments"
                },
                {
                    "id": "out_md5_file"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-gatherbamfiles/7",
                "baseCommand": [
                    "java"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "I",
                        "sbg:category": "File inputs",
                        "id": "in_alignments",
                        "type": {
                            "type": "array",
                            "items": "File",
                            "inputBinding": {
                                "separate": false,
                                "prefix": "INPUT="
                            }
                        },
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Input Bams",
                        "doc": "One or more BAM files or text files containing lists of BAM files one per line.",
                        "sbg:fileTypes": "BAM"
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "SILENT",
                        "id": "validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VALIDATION_STRINGENCY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self == 0) {\n        self = null;\n        inputs.validation_stringency = null\n    };\n\n\n    if (inputs.validation_stringency) {\n        return inputs.validation_stringency\n    } else {\n        return \"SILENT\"\n    }\n}"
                        },
                        "label": "Validation stringency",
                        "doc": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
                        "default": 0
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "5",
                        "id": "compression_level",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "COMPRESSION_LEVEL=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Compression level",
                        "doc": "Compression level for all compressed files created (e.g. BAM and GELI). This option can be set to 'null' to clear the default value. Default value is 5."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "500000",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max records in RAM",
                        "doc": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:category": "Execution options",
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "False",
                        "id": "create_index",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_index"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "CREATE_INDEX=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 9
                        },
                        "label": "Create index",
                        "doc": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Reserves memory at scheduler by not passing it to java virtual machine to permit draining all memory from the instance."
                    },
                    {
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output prefix."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "create_md5_file",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_md5_file"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "CREATE_MD5_FILE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create MD5 file",
                        "doc": "Create file with MD5 hash of BAM file."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "in_reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "sbg:fileTypes": "FA, FASTA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    }
                ],
                "outputs": [
                    {
                        "id": "out_alignments",
                        "doc": "The output BAM file to write.",
                        "label": "Gathered BAM",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.bam",
                            "outputEval": "${\n    self = inheritMetadata(self, inputs.in_alignments);\n\n\n    for (let i = 0; i < self.length; i++) {\n        var out_metadata = {\n            '__inherit__': 'input_file'\n        };\n        self[i] = setMetadata(self[i], out_metadata)\n    };\n\n    return self\n\n}"
                        },
                        "secondaryFiles": [
                            ".bai",
                            "^.bai",
                            "^.bai"
                        ],
                        "sbg:fileTypes": "BAM"
                    },
                    {
                        "id": "out_md5_file",
                        "label": "MD5 File",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.md5",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "sbg:fileTypes": "MD5"
                    }
                ],
                "doc": "Concatenates one or more BAM files together as efficiently as possible\n\n### Description\nPicard GatherBamFiles assumes that the list of BAM files provided as input are in the order that they should be concatenated and simply links the bodies of the BAM files while retaining the header from the first file.  This tool operates by copying the gzip blocks directly for speed but also supports the generation of an MD5 in the output file and the indexing of the output BAM file.\n### Common Use Cases \nCollects outputs from previously scattered jobs.\n### Common Issues and Important Notes\nThis tool only support BAM files. It does not support SAM files.",
                "label": "Picard GatherBamFiles",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.compression_level) {\n        command = '-Dsamjdk.compression_level=' + inputs.compression_level\n    } else {\n        command = '-Dsamjdk.compression_level=2'\n    }\n    if (inputs.memory_per_job) {\n        command += ' -Xms'.concat(inputs.memory_per_job, 'M')\n    }\n    else {\n        command +=' -Xms1024M '\n    }\n    return command\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "GatherBamFiles"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var in_alignments = [].concat(inputs.in_alignments)[0];\n    var output_prefix = '';\n    var output_ext = inputs.output_file_format ? inputs.output_file_format : in_alignments.path.split('.').pop();\n    if (inputs.output_prefix)\n    {\n         output_prefix = inputs.output_prefix;\n    }\n    else \n    {\n        if (in_alignments.metadata && in_alignments.metadata.sample_id)\n        {\n            output_prefix = in_alignments.metadata.sample_id;\n        }\n        else \n        {\n            output_prefix = in_alignments.path.split('/').pop().split('.')[0];\n        }\n    }\n    \n    return output_prefix + '.gathered.' + output_ext;\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  if(inputs.memory_per_job){\n    if(inputs.memory_overhead_per_job){\n    \treturn inputs.memory_per_job + inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn inputs.memory_per_job\n  }\n  else if(!inputs.memory_per_job && inputs.memory_overhead_per_job){\n\t\treturn 2048 + inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};",
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar GatherBamFiles OUTPUT=sample_unknown.gathered.bam INPUT=reads.bam  ; mv  sample_unknown.gathered.bai sample_unknown.gathered.bam.bai",
                "sbg:toolkitVersion": "2.3.1",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/2.3.1"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554406050,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-gatherbamfiles/11"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554406197,
                        "sbg:revisionNotes": "change docker version to GITC 2.3.2"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554406357,
                        "sbg:revisionNotes": "change --java-options expression, add compression_level"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554406613,
                        "sbg:revisionNotes": "add create_md5_file input and corresponding output file"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554407295,
                        "sbg:revisionNotes": "set lowercase enum true and false values for create_index input"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554452787,
                        "sbg:revisionNotes": "add in_reference input argument"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555583073,
                        "sbg:revisionNotes": "fix output file naming expression; fix glob for output bam"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555583267,
                        "sbg:revisionNotes": "edit secondary files for output bam"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-gatherbamfiles/7",
                "sbg:revision": 7,
                "sbg:revisionNotes": "edit secondary files for output bam",
                "sbg:modifiedOn": 1555583267,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554406050,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 7,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "ae66683b170a169a0ee5fa21f5a70982811055b1a25bcd654024749ebb9daaf78"
            },
            "label": "GatherBamFiles",
            "sbg:x": 1070.3409423828125,
            "sbg:y": 13.573488235473633
        },
        {
            "id": "createsequencegroupinglists",
            "in": [
                {
                    "id": "ref_dict",
                    "source": "ref_dict"
                }
            ],
            "out": [
                {
                    "id": "sequence_grouping_with_unmapped"
                },
                {
                    "id": "sequence_grouping"
                }
            ],
            "run": {
                "class": "Workflow",
                "cwlVersion": "v1.0",
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/createsequencegroupinglists/3",
                "doc": "CreateSwuenceGroupingLists splits contigs into interval lists based on their lengths.\n\n### Common Use Cases\nThis workflow consits of two tools: CreateSequenceGroupingTSV which uses sequence dictionary to group contings into groups of similar lengths. SBG Lines to Interval List splits grouping files into interval lists, each having one line from grouping file.",
                "label": "CreateSequenceGroupingLists",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "inputs": [
                    {
                        "id": "ref_dict",
                        "sbg:fileTypes": "DICT",
                        "type": "File",
                        "label": "Sequence dictionary",
                        "sbg:x": -468.703857421875,
                        "sbg:y": -24.5
                    }
                ],
                "outputs": [
                    {
                        "id": "sequence_grouping_with_unmapped",
                        "outputSource": [
                            "sbg_lines_to_interval_list/out_intervals"
                        ],
                        "sbg:fileTypes": "INTERVALS",
                        "type": "File[]?",
                        "label": "Sequence grouping with unmapped",
                        "sbg:x": 238.7890625,
                        "sbg:y": -112.5
                    },
                    {
                        "id": "sequence_grouping",
                        "outputSource": [
                            "sbg_lines_to_interval_list_1/out_intervals"
                        ],
                        "sbg:fileTypes": "INTERVALS",
                        "type": "File[]?",
                        "label": "Sequence grouping",
                        "sbg:x": 240,
                        "sbg:y": 54
                    }
                ],
                "steps": [
                    {
                        "id": "createsequencegroupingtsv",
                        "in": [
                            {
                                "id": "ref_dict",
                                "source": "ref_dict"
                            }
                        ],
                        "out": [
                            {
                                "id": "sequence_grouping"
                            },
                            {
                                "id": "sequence_grouping_with_unmapped"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.0",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/createsequencegroupingtsv/5",
                            "baseCommand": [
                                "python",
                                "CreateSequenceGroupingTSV.py"
                            ],
                            "inputs": [
                                {
                                    "id": "ref_dict",
                                    "type": "File",
                                    "inputBinding": {
                                        "prefix": "--ref_dict",
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Reference Dictionary",
                                    "doc": "Reference dictionary containing information about chromosome names and their lengths.",
                                    "sbg:fileTypes": "DICT"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "sequence_grouping",
                                    "doc": "Each line of the file represents one group of chromosomes which are processed together in later steps of the GATK Germline workflow. The groups are determined based on the chromosomes sizes.",
                                    "label": "Sequence Grouping",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "sequence_grouping.txt",
                                        "outputEval": "$(inheritMetadata(self, inputs.ref_dict))"
                                    },
                                    "sbg:fileTypes": "TXT"
                                },
                                {
                                    "id": "sequence_grouping_with_unmapped",
                                    "doc": "The file has the same content as \"Sequence Grouping\" file, with an additional, last line containing \"unmapped\" string.",
                                    "label": "Sequence Grouping with Unmapped",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "sequence_grouping_with_unmapped.txt",
                                        "outputEval": "$(inheritMetadata(self, inputs.ref_dict))"
                                    },
                                    "sbg:fileTypes": "TXT"
                                }
                            ],
                            "doc": "CreateSequenceGroupingTSV tool takes reference dictionary file as an input and creates files which contain chromosome names grouped based on their sizes.\n\n###**Input**  \n\nReference dictionary file.\n\n###**Output** \n\n_sequence_grouping.txt_: A text file which contains chromosome groups.\n\n_sequence_grouping_with_unmapped.txt_: A text file which has the same content as _sequence_grouping.txt_ with additional, last line containing \"unmapped\" string.\n\n###**Common Use Cases**\n\nThe tool has only one input which is required and has no additional arguments:\n\n`python CreateSequenceGroupingTSV.py --ref_dict example_reference.dict`\n\n###**Changes Introduced by Seven Bridges**\n\nPython code provided within WGS Germline WDL was adjusted to be called as a script (`CreateSequenceGroupingTSV.py`).\n\n###**Common Issues and Important Notes**\n\nNone.",
                            "label": "CreateSequenceGroupingTSV",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "ResourceRequirement",
                                    "ramMin": 1000,
                                    "coresMin": 1
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        {
                                            "entryname": "CreateSequenceGroupingTSV.py",
                                            "entry": "import argparse\n\nargs = argparse.ArgumentParser(description='This tool takes reference dictionary file as an input'\n                                             ' and creates files which contain chromosome names grouped'\n                                             ' based on their sizes.')\n\nargs.add_argument('--ref_dict', help='Reference dictionary', required=True)\nparsed = args.parse_args()\nref_dict = parsed.ref_dict\n\nwith open(ref_dict, 'r') as ref_dict_file:\n    sequence_tuple_list = []\n    longest_sequence = 0\n    for line in ref_dict_file:\n        if line.startswith(\"@SQ\"):\n            line_split = line.split(\"\\t\")\n            # (Sequence_Name, Sequence_Length)\n            sequence_tuple_list.append((line_split[1].split(\"SN:\")[1], int(line_split[2].split(\"LN:\")[1])))\n    longest_sequence = sorted(sequence_tuple_list, key=lambda x: x[1], reverse=True)[0][1]\n# We are adding this to the intervals because hg38 has contigs named with embedded colons and a bug in GATK strips off\n# the last element after a :, so we add this as a sacrificial element.\nhg38_protection_tag = \":1+\"\n# initialize the tsv string with the first sequence\ntsv_string = sequence_tuple_list[0][0] + hg38_protection_tag\ntemp_size = sequence_tuple_list[0][1]\nfor sequence_tuple in sequence_tuple_list[1:]:\n    if temp_size + sequence_tuple[1] <= longest_sequence:\n        temp_size += sequence_tuple[1]\n        tsv_string += \"\\t\" + sequence_tuple[0] + hg38_protection_tag\n    else:\n        tsv_string += \"\\n\" + sequence_tuple[0] + hg38_protection_tag\n        temp_size = sequence_tuple[1]\n# add the unmapped sequences as a separate line to ensure that they are recalibrated as well\nwith open(\"./sequence_grouping.txt\", \"w\") as tsv_file:\n    tsv_file.write(tsv_string)\n    tsv_file.close()\n\ntsv_string += '\\n' + \"unmapped\"\n\nwith open(\"./sequence_grouping_with_unmapped.txt\", \"w\") as tsv_file_with_unmapped:\n    tsv_file_with_unmapped.write(tsv_string)\n    tsv_file_with_unmapped.close()",
                                            "writable": false
                                        }
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement",
                                    "expressionLib": [
                                        "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                                    ]
                                }
                            ],
                            "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "ana_d",
                                    "sbg:modifiedOn": 1552925347,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "ana_d",
                                    "sbg:modifiedOn": 1552925466,
                                    "sbg:revisionNotes": "Copy of revision 3 in Vlada's project."
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "ana_d",
                                    "sbg:modifiedOn": 1552935854,
                                    "sbg:revisionNotes": "Version in description fixed"
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554309854,
                                    "sbg:revisionNotes": "test"
                                },
                                {
                                    "sbg:revision": 4,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554309999,
                                    "sbg:revisionNotes": "test"
                                },
                                {
                                    "sbg:revision": 5,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554368346,
                                    "sbg:revisionNotes": "revert to revision 2"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:toolkit": "GATK",
                            "sbg:toolAuthor": "Broad Institute",
                            "sbg:license": "BSD 3-clause",
                            "sbg:categories": [
                                "Other"
                            ],
                            "sbg:links": [
                                {
                                    "id": "https://github.com/gatk-workflows/broad-prod-wgs-germline-snps-indels",
                                    "label": "GATK Germline GitHub"
                                }
                            ],
                            "sbg:toolkitVersion": "4",
                            "sbg:appVersion": [
                                "v1.0"
                            ],
                            "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/createsequencegroupingtsv/5",
                            "sbg:revision": 5,
                            "sbg:revisionNotes": "revert to revision 2",
                            "sbg:modifiedOn": 1554368346,
                            "sbg:modifiedBy": "stefan_stojanovic",
                            "sbg:createdOn": 1552925347,
                            "sbg:createdBy": "ana_d",
                            "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "stefan_stojanovic",
                                "ana_d"
                            ],
                            "sbg:latestRevision": 5,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a4b4265f8fce506ea213729bc5b8738a98d68fcb8a5f69ea251888359f19e066e"
                        },
                        "label": "CreateSequenceGroupingTSV",
                        "sbg:x": -253,
                        "sbg:y": -26
                    },
                    {
                        "id": "sbg_lines_to_interval_list",
                        "in": [
                            {
                                "id": "input_tsv",
                                "source": "createsequencegroupingtsv/sequence_grouping_with_unmapped"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_intervals"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.0",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/sbg-lines-to-interval-list/10",
                            "baseCommand": [
                                "python",
                                "lines_to_intervals.py"
                            ],
                            "inputs": [
                                {
                                    "sbg:category": "Required Arguments",
                                    "id": "input_tsv",
                                    "type": "File",
                                    "inputBinding": {
                                        "shellQuote": false,
                                        "position": 1
                                    },
                                    "label": "Input group file",
                                    "doc": "This file is output of GATKs CreateSequenceGroupingTSV script.",
                                    "sbg:fileTypes": "TSV, TXT"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_intervals",
                                    "doc": "GATK Intervals files.",
                                    "label": "Intervals",
                                    "type": "File[]?",
                                    "sbg:fileTypes": "INTERVALS"
                                }
                            ],
                            "doc": "This tools is used for splitting GATK sequence grouping file into subgroups.\n\n### Common Use Cases\n\nEach subgroup file contains intervals defined on single line in grouping file. Grouping file is output of GATKs **CreateSequenceGroupingTSV** script which is used in best practice workflows sush as **GATK Best Practice Germline Workflow**.",
                            "label": "SBG Lines to Interval List",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "ResourceRequirement",
                                    "ramMin": 1000,
                                    "coresMin": 1
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "python:2.7"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        {
                                            "entryname": "lines_to_intervals.py",
                                            "entry": "import sys\nimport hashlib\nimport os\nimport json\n\nobj_template = {\n    'basename': '',\n    'checksum': '',\n    'class': 'File',\n    'dirname': '',\n    'location': '',\n    'nameext': 'intervals',\n    'nameroot': '',\n    'path': '',\n    'size': '',\n}\n\nwith open(sys.argv[1], 'r') as f:\n\n    obj_list = []\n    sys.stderr.write('Reading file {}\\n'.format(sys.argv[1]))\n    nameroot = '.'.join(sys.argv[1].split('/')[-1].split('.')[:-1])\n    for i, line in enumerate(f):\n        out_file_name = '{}.group.{}.intervals'.format(nameroot, i+1)\n        out_file = open(out_file_name, 'a')\n        for interval in line.split():\n            out_file.write(interval + '\\n')\n        out_file.close()\n        sys.stderr.write('Finished writing to file {}\\n'.format(out_file_name))\n\n        obj = dict(obj_template)\n        obj['basename'] = out_file_name\n        obj['checksum'] = 'sha1$' + hashlib.sha1(open(out_file_name, 'r').read()).hexdigest()\n        obj['dirname'] = os.getcwd()\n        obj['location'] = '/'.join([os.getcwd(), out_file_name])\n        obj['nameroot'] = '.'.join(out_file_name.split('.')[:-1])\n        obj['path'] = '/'.join([os.getcwd(), out_file_name])\n        obj['size'] = os.path.getsize('/'.join([os.getcwd(), out_file_name]))\n\n        obj_list.append(obj)\n\n    out_json = {'out_intervals': obj_list}\n\n    json.dump(out_json, open('cwl.output.json', 'w'), indent=1)\n    sys.stderr.write('Job done.\\n')\n",
                                            "writable": false
                                        }
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ],
                            "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554453915,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554458460,
                                    "sbg:revisionNotes": ""
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554461157,
                                    "sbg:revisionNotes": ""
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555061984,
                                    "sbg:revisionNotes": "fix description, labels, ids"
                                },
                                {
                                    "sbg:revision": 4,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555062070,
                                    "sbg:revisionNotes": "add input txt extension"
                                },
                                {
                                    "sbg:revision": 5,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555062609,
                                    "sbg:revisionNotes": "fix glob output"
                                },
                                {
                                    "sbg:revision": 6,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555063066,
                                    "sbg:revisionNotes": "remove empty cwl.output.json file requirement"
                                },
                                {
                                    "sbg:revision": 7,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555064138,
                                    "sbg:revisionNotes": "output json with indent"
                                },
                                {
                                    "sbg:revision": 8,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555064589,
                                    "sbg:revisionNotes": "add indent=1"
                                },
                                {
                                    "sbg:revision": 9,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555064839,
                                    "sbg:revisionNotes": "fix id of output_list in cwl.output.json"
                                },
                                {
                                    "sbg:revision": 10,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555577984,
                                    "sbg:revisionNotes": "edit output naming"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:toolAuthor": "Stefan Stojanovic",
                            "sbg:toolkit": "SBG Tools",
                            "sbg:toolkitVersion": "",
                            "sbg:appVersion": [
                                "v1.0"
                            ],
                            "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/sbg-lines-to-interval-list/10",
                            "sbg:revision": 10,
                            "sbg:revisionNotes": "edit output naming",
                            "sbg:modifiedOn": 1555577984,
                            "sbg:modifiedBy": "stefan_stojanovic",
                            "sbg:createdOn": 1554453915,
                            "sbg:createdBy": "stefan_stojanovic",
                            "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "stefan_stojanovic"
                            ],
                            "sbg:latestRevision": 10,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a8621d2328a62c7bae623224f93b01caa7700ba3df9d8c959ac6e286211fab593"
                        },
                        "label": "SBG Lines to Interval List",
                        "sbg:x": 13,
                        "sbg:y": -113
                    },
                    {
                        "id": "sbg_lines_to_interval_list_1",
                        "in": [
                            {
                                "id": "input_tsv",
                                "source": "createsequencegroupingtsv/sequence_grouping"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_intervals"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.0",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/sbg-lines-to-interval-list/10",
                            "baseCommand": [
                                "python",
                                "lines_to_intervals.py"
                            ],
                            "inputs": [
                                {
                                    "sbg:category": "Required Arguments",
                                    "id": "input_tsv",
                                    "type": "File",
                                    "inputBinding": {
                                        "shellQuote": false,
                                        "position": 1
                                    },
                                    "label": "Input group file",
                                    "doc": "This file is output of GATKs CreateSequenceGroupingTSV script.",
                                    "sbg:fileTypes": "TSV, TXT"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_intervals",
                                    "doc": "GATK Intervals files.",
                                    "label": "Intervals",
                                    "type": "File[]?",
                                    "sbg:fileTypes": "INTERVALS"
                                }
                            ],
                            "doc": "This tools is used for splitting GATK sequence grouping file into subgroups.\n\n### Common Use Cases\n\nEach subgroup file contains intervals defined on single line in grouping file. Grouping file is output of GATKs **CreateSequenceGroupingTSV** script which is used in best practice workflows sush as **GATK Best Practice Germline Workflow**.",
                            "label": "SBG Lines to Interval List",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "ResourceRequirement",
                                    "ramMin": 1000,
                                    "coresMin": 1
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "python:2.7"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        {
                                            "entryname": "lines_to_intervals.py",
                                            "entry": "import sys\nimport hashlib\nimport os\nimport json\n\nobj_template = {\n    'basename': '',\n    'checksum': '',\n    'class': 'File',\n    'dirname': '',\n    'location': '',\n    'nameext': 'intervals',\n    'nameroot': '',\n    'path': '',\n    'size': '',\n}\n\nwith open(sys.argv[1], 'r') as f:\n\n    obj_list = []\n    sys.stderr.write('Reading file {}\\n'.format(sys.argv[1]))\n    nameroot = '.'.join(sys.argv[1].split('/')[-1].split('.')[:-1])\n    for i, line in enumerate(f):\n        out_file_name = '{}.group.{}.intervals'.format(nameroot, i+1)\n        out_file = open(out_file_name, 'a')\n        for interval in line.split():\n            out_file.write(interval + '\\n')\n        out_file.close()\n        sys.stderr.write('Finished writing to file {}\\n'.format(out_file_name))\n\n        obj = dict(obj_template)\n        obj['basename'] = out_file_name\n        obj['checksum'] = 'sha1$' + hashlib.sha1(open(out_file_name, 'r').read()).hexdigest()\n        obj['dirname'] = os.getcwd()\n        obj['location'] = '/'.join([os.getcwd(), out_file_name])\n        obj['nameroot'] = '.'.join(out_file_name.split('.')[:-1])\n        obj['path'] = '/'.join([os.getcwd(), out_file_name])\n        obj['size'] = os.path.getsize('/'.join([os.getcwd(), out_file_name]))\n\n        obj_list.append(obj)\n\n    out_json = {'out_intervals': obj_list}\n\n    json.dump(out_json, open('cwl.output.json', 'w'), indent=1)\n    sys.stderr.write('Job done.\\n')\n",
                                            "writable": false
                                        }
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ],
                            "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554453915,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554458460,
                                    "sbg:revisionNotes": ""
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1554461157,
                                    "sbg:revisionNotes": ""
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555061984,
                                    "sbg:revisionNotes": "fix description, labels, ids"
                                },
                                {
                                    "sbg:revision": 4,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555062070,
                                    "sbg:revisionNotes": "add input txt extension"
                                },
                                {
                                    "sbg:revision": 5,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555062609,
                                    "sbg:revisionNotes": "fix glob output"
                                },
                                {
                                    "sbg:revision": 6,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555063066,
                                    "sbg:revisionNotes": "remove empty cwl.output.json file requirement"
                                },
                                {
                                    "sbg:revision": 7,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555064138,
                                    "sbg:revisionNotes": "output json with indent"
                                },
                                {
                                    "sbg:revision": 8,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555064589,
                                    "sbg:revisionNotes": "add indent=1"
                                },
                                {
                                    "sbg:revision": 9,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555064839,
                                    "sbg:revisionNotes": "fix id of output_list in cwl.output.json"
                                },
                                {
                                    "sbg:revision": 10,
                                    "sbg:modifiedBy": "stefan_stojanovic",
                                    "sbg:modifiedOn": 1555577984,
                                    "sbg:revisionNotes": "edit output naming"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:toolAuthor": "Stefan Stojanovic",
                            "sbg:toolkit": "SBG Tools",
                            "sbg:toolkitVersion": "",
                            "sbg:appVersion": [
                                "v1.0"
                            ],
                            "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/sbg-lines-to-interval-list/10",
                            "sbg:revision": 10,
                            "sbg:revisionNotes": "edit output naming",
                            "sbg:modifiedOn": 1555577984,
                            "sbg:modifiedBy": "stefan_stojanovic",
                            "sbg:createdOn": 1554453915,
                            "sbg:createdBy": "stefan_stojanovic",
                            "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "stefan_stojanovic"
                            ],
                            "sbg:latestRevision": 10,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a8621d2328a62c7bae623224f93b01caa7700ba3df9d8c959ac6e286211fab593"
                        },
                        "label": "SBG Lines to Interval List",
                        "sbg:x": 16,
                        "sbg:y": 54
                    }
                ],
                "requirements": [
                    {
                        "class": "InlineJavascriptRequirement"
                    },
                    {
                        "class": "StepInputExpressionRequirement"
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554465557,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554465778,
                        "sbg:revisionNotes": ""
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555578594,
                        "sbg:revisionNotes": "update SBG Lines to Inteval List"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555578872,
                        "sbg:revisionNotes": "fix input labels; add some description"
                    }
                ],
                "sbg:image_url": "https://igor.sbgenomics.com/ns/brood/images/ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/createsequencegroupinglists/3.png",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/createsequencegroupinglists/3",
                "sbg:revision": 3,
                "sbg:revisionNotes": "fix input labels; add some description",
                "sbg:modifiedOn": 1555578872,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554465557,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 3,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "abb41f45fccc99686f647da02a30bbab5ad9d08d012000fd3ba8929e04741afae"
            },
            "label": "CreateSequenceGroupingLists",
            "sbg:x": 259.0300598144531,
            "sbg:y": -137.8790283203125
        },
        {
            "id": "picard_collectmultiplemetrics",
            "in": [
                {
                    "id": "assume_sorted",
                    "default": "true"
                },
                {
                    "id": "input_bam",
                    "source": "picard_gatherbamfiles/out_alignments"
                },
                {
                    "id": "memory_per_job",
                    "default": 5000
                },
                {
                    "id": "program",
                    "default": [
                        "CollectAlignmentSummaryMetrics",
                        "CollectGcBiasMetrics"
                    ]
                },
                {
                    "id": "metrics_accumulation_level",
                    "default": "READ_GROUP"
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "output_sufix",
                    "default": "readgroup"
                }
            ],
            "out": [
                {
                    "id": "multiple_metrics"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectmultiplemetrics/15",
                "baseCommand": [
                    "java"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "AS",
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "true",
                        "id": "assume_sorted",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "assume_sorted"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ASSUME_SORTED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Assume sorted",
                        "doc": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "I",
                        "sbg:category": "File inputs",
                        "id": "input_bam",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Input file",
                        "doc": "Input SAM or BAM file.  Required.",
                        "sbg:fileTypes": "BAM, SAM"
                    },
                    {
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "0",
                        "id": "stop_after",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Stop after",
                        "doc": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs."
                    },
                    {
                        "sbg:toolDefaultValue": "CollectAlignmentSummaryMetrics, CollectBaseDistributionByCycle, CollectInsertSizeMetrics, MeanQualityByCycle, QualityScoreDistribution]",
                        "id": "program",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "program",
                                    "symbols": [
                                        "CollectAlignmentSummaryMetrics",
                                        "CollectInsertSizeMetrics",
                                        "QualityScoreDistribution",
                                        "MeanQualityByCycle",
                                        "CollectBaseDistributionByCycle",
                                        "CollectGcBiasMetrics",
                                        "CollectSequencingArtifactMetrics"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "PROGRAM=",
                            "separate": false,
                            "itemSeparator": " PROGRAM=",
                            "shellQuote": false,
                            "position": 8,
                            "valueFrom": "${\n    if (self == 0) {\n        self = null;\n        inputs.program = null\n    };\n\n\n    //by defualt there is array of metrics programs that tool runs. \n    //if we select some other programs to specify it will only append them to the existing list. \n    //so first we need to clear list, and we are doing that \n    //by setting first program argument value to PROGRAM=null \n    //and after that we specify other parameters for PROGRAM\n    var set_program = 'null ';\n\n    if (inputs.program) {\n        for (i = 0; i < inputs.program.length; i++) {\n            if (inputs.program[i] !== \"\") {\n                set_program = set_program + \"PROGRAM=\" + inputs.program[i] + ' '\n            }\n        }\n    }\n\n    if (set_program !== 'null ') {\n        return set_program\n    }\n}"
                        },
                        "label": "Program",
                        "doc": "List of metrics programs to apply during the pass through the SAM file. This option is set to 'null' to clear the default value if any of parameters is specified. Possible values: {CollectAlignmentSummaryMetrics, CollectInsertSizeMetrics, QualityScoreDistribution, MeanQualityByCycle, CollectBaseDistributionByCycle, CollectGcBiasMetrics, RnaSeqMetrics}.",
                        "default": 0
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Reserves memory at scheduler by not passing it to java virtual machine to permit draining all memory from the instance."
                    },
                    {
                        "sbg:toolDefaultValue": "ALL_READS",
                        "id": "metrics_accumulation_level",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL_READS",
                                    "SAMPLE",
                                    "LIBRARY",
                                    "READ_GROUP"
                                ],
                                "name": "metrics_accumulation_level"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "symbols": [
                                        "ALL_READS",
                                        "SAMPLE",
                                        "LIBRARY",
                                        "READ_GROUP"
                                    ],
                                    "name": "metrics_accumulation_level"
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "METRIC_ACCUMULATION_LEVEL=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 6
                        },
                        "label": "Metric accumulation level",
                        "doc": "The level(s) at which to accumulate metrics.  Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP} This option may be specified 0 or more times. This option can be set to 'null' to clear the default list."
                    },
                    {
                        "id": "file_extension",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "FILE_EXTENSION=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "File extension",
                        "doc": "Append the given file extension to all metric file names (ex.                         OUTPUT.insert_size_metrics.EXT). None if null  Default value: null."
                    },
                    {
                        "id": "intervals",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "INTERVALS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Intervals to restrict the analysis to",
                        "doc": "An optional list of intervals to restrict analysis to. Only pertains to some of the\nPROGRAMs. Programs whose stand-alone CLP does not have an INTERVALS argument will silently ignore this argument.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "id": "db_snp",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "DB_SNP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "DBSNP file",
                        "doc": "VCF format dbSNP file, used to exclude regions around known polymorphisms from analysis by some PROGRAMs; PROGRAMs whose CLP doesn't allow for this argument will quietly ignore it."
                    },
                    {
                        "id": "include_unpaired",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_unpaired"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INCLUDE_UNPAIRED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Include unpaired",
                        "doc": "Include unpaired reads in CollectSequencingArtifactMetrics. If set to true then all paired reads will be included as well - MINIMUM_INSERT_SIZE and MAXIMUM_INSERT_SIZE will be ignored in CollectSequencingArtifactMetrics."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "in_reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Base name of output files."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_sufix",
                        "type": "string?",
                        "label": "Output sufix",
                        "doc": "This is additional parameter introduced by SBG. If specified it will be appended to output_prefix or name base of output file, before the extension."
                    }
                ],
                "outputs": [
                    {
                        "id": "multiple_metrics",
                        "doc": "Output array of TXT and PDF metrics files.",
                        "label": "Multiple metrics",
                        "type": "File[]",
                        "outputBinding": {
                            "glob": "${\n    return '{*.txt,*.pdf}'\n}",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.input_bam)\n\n}"
                        },
                        "sbg:fileTypes": "TXT"
                    }
                ],
                "doc": "Creates set of BAM metrics.\n\n### Description\nTakes an input BAM and reference sequence and runs one or more Picard metrics modules at the same time to cut down on I/O. Currently all programs are run with default options and fixed output extensions, but this may become more flexible in future.",
                "label": "Picard CollectMultipleMetrics",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx2048M'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CollectMultipleMetrics"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 14,
                        "valueFrom": "${\n    var prefix = '';\n    if (inputs.output_prefix) {\n        prefix = inputs.output_prefix\n    } else {\n        if (inputs.input_bam.metadata) {\n            if (inputs.input_bam.metadata.sample_id) {\n                prefix = inputs.input_bam.metadata.sample_id\n            } else {\n                prefix = inputs.input_bam.nameroot\n            }\n        } else {\n            prefix = inputs.input_bam.nameroot\n        }\n    }\n    if (inputs.output_sufix) {\n        prefix += '.' + inputs.output_sufix;\n    }\n    return prefix\n}"
                    },
                    {
                        "prefix": "&&",
                        "shellQuote": false,
                        "position": 1004,
                        "valueFrom": "${\n    //this is used because by defulat, tool outputs text files are named \n    //as base_name.metrics_tool_name. since those are txt files, we need to rename them \n    //so this js script does that after the tool completes. it check if file exists and if it does, \n    //then it renames it by adding '.txt' at the end of the filename\n    \n    var basename = '';\n    if (inputs.output_prefix) {\n        basename = inputs.output_prefix\n    } else {\n        if (inputs.input_bam.metadata) {\n            if (inputs.input_bam.metadata.sample_id) {\n                basename = inputs.input_bam.metadata.sample_id\n            } else {\n                basename = inputs.input_bam.nameroot\n            }\n        } else {\n            basename = inputs.input_bam.nameroot\n        }\n    }\n    if (inputs.output_sufix) {\n        basename += '.' + inputs.output_sufix;\n    }\n\n    // move commands\n    //AligmentSummaryMetrics\n    casm_start = basename + '.alignment_summary_metrics'\n    casm_end = basename + '.summary_metrics.txt'\n    mv_casm = ['[ -f ' + casm_start + ' ] && mv ', casm_start, casm_end].join(' ')\n\n    //InserSizeMetrics\n    insert_start = basename + '.insert_size_metrics'\n    insert_end = basename + '.insert_size_metrics.txt'\n    mv_insert = ['[ -f ' + insert_start + ' ] && mv ', insert_start, insert_end].join(' ')\n    \n\n    //QualityScoreDistribution\n    qual_start = basename + '.quality_distribution_metrics'\n    qual_end = basename + '.quality_distribution_metrics.txt'\n    mv_qual = ['[ -f ' + qual_start + ' ] && mv ', qual_start, qual_end].join(' ')\n\n    //MeanQualityByCycle\n    qualcycle_start = basename + '.quality_by_cycle_metrics'\n    qualcycle_end = basename + '.quality_by_cycle_metrics.txt'\n    mv_qualcycle = ['[ -f ' + qualcycle_start + ' ] && mv ', qualcycle_start, qualcycle_end].join(' ')\n    //['mv', qualcycle_start, qualcycle_end].join(' ')\n\n    //CollectBaseDistributionByCycle\n    basedist_start = basename + '.base_distribution_by_cycle_metrics'\n    basedist_end = basename + '.base_distribution_by_cycle_metrics.txt'\n    mv_basedist = ['[ -f ' + basedist_start + ' ] && mv ', basedist_start, basedist_end].join(' ')\n\n\n\n    list_all = [mv_casm, mv_insert, mv_qual, mv_qualcycle, mv_basedist]\n\n    if (!inputs.program || inputs.program[0] === \"\") {\n        return list_all.join(' ; ')\n    } else {\n\n        list_some = []\n        for (i = 0; i < inputs.program.length; i++) {\n            if (inputs.program[i] == \"CollectAlignmentSummaryMetrics\") {\n                list_some.push(mv_casm)\n            }\n            if (inputs.program[i] == \"CollectInsertSizeMetrics\") {\n                list_some.push(mv_insert)\n            }\n            if (inputs.program[i] == \"QualityScoreDistribution\") {\n                list_some.push(mv_qual)\n            }\n            if (inputs.program[i] == \"MeanQualityByCycle\") {\n                list_some.push(mv_qualcycle)\n            }\n            if (inputs.program[i] == \"CollectBaseDistributionByCycle\") {\n                list_some.push(mv_basedist)\n            }\n        }\n\n        return list_some.join(' ; ')\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  if(inputs.memory_per_job){\n    if(inputs.memory_overhead_per_job){\n    \treturn inputs.memory_per_job + inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn inputs.memory_per_job\n  }\n  else if(!inputs.memory_per_job && inputs.memory_overhead_per_job){\n\t\treturn 2048 + inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar CollectMultipleMetrics INPUT=/root/folder/example.bam OUTPUT=example && mv example.alignment_summary_metrics example.summary_metrics.txt && mv example.insert_size_metrics example.insert_size_metrics.txt",
                "sbg:toolkitVersion": "2.3.2",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/index.html"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/2.3.1"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554229385,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-collectmultiplemetrics/5"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554229414,
                        "sbg:revisionNotes": "change docker image to images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554468314,
                        "sbg:revisionNotes": "add more program options; add in_reference input"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554469273,
                        "sbg:revisionNotes": "add more program options"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555513732,
                        "sbg:revisionNotes": "fix output naming expressions"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555519686,
                        "sbg:revisionNotes": "output prefix expressin, return nameroot if output prefix or sample_id not specified"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555519755,
                        "sbg:revisionNotes": "edit output prefix expression; remove shell qoutes for other inputs"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555575572,
                        "sbg:revisionNotes": "add output sufix parameter"
                    },
                    {
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555576191,
                        "sbg:revisionNotes": "edit expression for prefix from nameroot, take first elelment after split"
                    },
                    {
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555579490,
                        "sbg:revisionNotes": "use nameroot instead of only first part after spliting by full stop"
                    },
                    {
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555794772,
                        "sbg:revisionNotes": "additional if for output prefix if metadata does not exist"
                    },
                    {
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555804641,
                        "sbg:revisionNotes": "fix2 metadata if exist"
                    },
                    {
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556016227,
                        "sbg:revisionNotes": "conditional mv if exist!"
                    },
                    {
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556018741,
                        "sbg:revisionNotes": "; instead &&"
                    },
                    {
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556020139,
                        "sbg:revisionNotes": "; instead && ALL"
                    },
                    {
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556114441,
                        "sbg:revisionNotes": "fix basename expression"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectmultiplemetrics/15",
                "sbg:revision": 15,
                "sbg:revisionNotes": "fix basename expression",
                "sbg:modifiedOn": 1556114441,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554229385,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic",
                    "vladimirk"
                ],
                "sbg:latestRevision": 15,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "aa35b7eda8eb216a673041e4571593da4243a7cfa2b6aca449cbc3299a6379d16"
            },
            "label": "CollectReadgroupBamQualityMetrics",
            "sbg:x": 1373.767333984375,
            "sbg:y": 58.794559478759766
        },
        {
            "id": "picard_collectmultiplemetrics_1",
            "in": [
                {
                    "id": "assume_sorted",
                    "default": "true"
                },
                {
                    "id": "input_bam",
                    "source": "picard_gatherbamfiles/out_alignments"
                },
                {
                    "id": "memory_per_job",
                    "default": 5000
                },
                {
                    "id": "program",
                    "default": [
                        "CollectAlignmentSummaryMetrics",
                        "CollectInsertSizeMetrics",
                        "CollectSequencingArtifactMetrics",
                        "CollectGcBiasMetrics",
                        "QualityScoreDistribution"
                    ]
                },
                {
                    "id": "metrics_accumulation_level",
                    "default": "SAMPLE"
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "output_sufix",
                    "default": "aggregated"
                }
            ],
            "out": [
                {
                    "id": "multiple_metrics"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectmultiplemetrics/15",
                "baseCommand": [
                    "java"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "AS",
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "true",
                        "id": "assume_sorted",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "assume_sorted"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ASSUME_SORTED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Assume sorted",
                        "doc": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "I",
                        "sbg:category": "File inputs",
                        "id": "input_bam",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Input file",
                        "doc": "Input SAM or BAM file.  Required.",
                        "sbg:fileTypes": "BAM, SAM"
                    },
                    {
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "0",
                        "id": "stop_after",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Stop after",
                        "doc": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs."
                    },
                    {
                        "sbg:toolDefaultValue": "CollectAlignmentSummaryMetrics, CollectBaseDistributionByCycle, CollectInsertSizeMetrics, MeanQualityByCycle, QualityScoreDistribution]",
                        "id": "program",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "program",
                                    "symbols": [
                                        "CollectAlignmentSummaryMetrics",
                                        "CollectInsertSizeMetrics",
                                        "QualityScoreDistribution",
                                        "MeanQualityByCycle",
                                        "CollectBaseDistributionByCycle",
                                        "CollectGcBiasMetrics",
                                        "CollectSequencingArtifactMetrics"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "PROGRAM=",
                            "separate": false,
                            "itemSeparator": " PROGRAM=",
                            "shellQuote": false,
                            "position": 8,
                            "valueFrom": "${\n    if (self == 0) {\n        self = null;\n        inputs.program = null\n    };\n\n\n    //by defualt there is array of metrics programs that tool runs. \n    //if we select some other programs to specify it will only append them to the existing list. \n    //so first we need to clear list, and we are doing that \n    //by setting first program argument value to PROGRAM=null \n    //and after that we specify other parameters for PROGRAM\n    var set_program = 'null ';\n\n    if (inputs.program) {\n        for (i = 0; i < inputs.program.length; i++) {\n            if (inputs.program[i] !== \"\") {\n                set_program = set_program + \"PROGRAM=\" + inputs.program[i] + ' '\n            }\n        }\n    }\n\n    if (set_program !== 'null ') {\n        return set_program\n    }\n}"
                        },
                        "label": "Program",
                        "doc": "List of metrics programs to apply during the pass through the SAM file. This option is set to 'null' to clear the default value if any of parameters is specified. Possible values: {CollectAlignmentSummaryMetrics, CollectInsertSizeMetrics, QualityScoreDistribution, MeanQualityByCycle, CollectBaseDistributionByCycle, CollectGcBiasMetrics, RnaSeqMetrics}.",
                        "default": 0
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Reserves memory at scheduler by not passing it to java virtual machine to permit draining all memory from the instance."
                    },
                    {
                        "sbg:toolDefaultValue": "ALL_READS",
                        "id": "metrics_accumulation_level",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL_READS",
                                    "SAMPLE",
                                    "LIBRARY",
                                    "READ_GROUP"
                                ],
                                "name": "metrics_accumulation_level"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "symbols": [
                                        "ALL_READS",
                                        "SAMPLE",
                                        "LIBRARY",
                                        "READ_GROUP"
                                    ],
                                    "name": "metrics_accumulation_level"
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "METRIC_ACCUMULATION_LEVEL=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 6
                        },
                        "label": "Metric accumulation level",
                        "doc": "The level(s) at which to accumulate metrics.  Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP} This option may be specified 0 or more times. This option can be set to 'null' to clear the default list."
                    },
                    {
                        "id": "file_extension",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "FILE_EXTENSION=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "File extension",
                        "doc": "Append the given file extension to all metric file names (ex.                         OUTPUT.insert_size_metrics.EXT). None if null  Default value: null."
                    },
                    {
                        "id": "intervals",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "INTERVALS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Intervals to restrict the analysis to",
                        "doc": "An optional list of intervals to restrict analysis to. Only pertains to some of the\nPROGRAMs. Programs whose stand-alone CLP does not have an INTERVALS argument will silently ignore this argument.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "id": "db_snp",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "DB_SNP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "DBSNP file",
                        "doc": "VCF format dbSNP file, used to exclude regions around known polymorphisms from analysis by some PROGRAMs; PROGRAMs whose CLP doesn't allow for this argument will quietly ignore it."
                    },
                    {
                        "id": "include_unpaired",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_unpaired"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INCLUDE_UNPAIRED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Include unpaired",
                        "doc": "Include unpaired reads in CollectSequencingArtifactMetrics. If set to true then all paired reads will be included as well - MINIMUM_INSERT_SIZE and MAXIMUM_INSERT_SIZE will be ignored in CollectSequencingArtifactMetrics."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "in_reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Base name of output files."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_sufix",
                        "type": "string?",
                        "label": "Output sufix",
                        "doc": "This is additional parameter introduced by SBG. If specified it will be appended to output_prefix or name base of output file, before the extension."
                    }
                ],
                "outputs": [
                    {
                        "id": "multiple_metrics",
                        "doc": "Output array of TXT and PDF metrics files.",
                        "label": "Multiple metrics",
                        "type": "File[]",
                        "outputBinding": {
                            "glob": "${\n    return '{*.txt,*.pdf}'\n}",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.input_bam)\n\n}"
                        },
                        "sbg:fileTypes": "TXT"
                    }
                ],
                "doc": "Creates set of BAM metrics.\n\n### Description\nTakes an input BAM and reference sequence and runs one or more Picard metrics modules at the same time to cut down on I/O. Currently all programs are run with default options and fixed output extensions, but this may become more flexible in future.",
                "label": "Picard CollectMultipleMetrics",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx2048M'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CollectMultipleMetrics"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 14,
                        "valueFrom": "${\n    var prefix = '';\n    if (inputs.output_prefix) {\n        prefix = inputs.output_prefix\n    } else {\n        if (inputs.input_bam.metadata) {\n            if (inputs.input_bam.metadata.sample_id) {\n                prefix = inputs.input_bam.metadata.sample_id\n            } else {\n                prefix = inputs.input_bam.nameroot\n            }\n        } else {\n            prefix = inputs.input_bam.nameroot\n        }\n    }\n    if (inputs.output_sufix) {\n        prefix += '.' + inputs.output_sufix;\n    }\n    return prefix\n}"
                    },
                    {
                        "prefix": "&&",
                        "shellQuote": false,
                        "position": 1004,
                        "valueFrom": "${\n    //this is used because by defulat, tool outputs text files are named \n    //as base_name.metrics_tool_name. since those are txt files, we need to rename them \n    //so this js script does that after the tool completes. it check if file exists and if it does, \n    //then it renames it by adding '.txt' at the end of the filename\n    \n    var basename = '';\n    if (inputs.output_prefix) {\n        basename = inputs.output_prefix\n    } else {\n        if (inputs.input_bam.metadata) {\n            if (inputs.input_bam.metadata.sample_id) {\n                basename = inputs.input_bam.metadata.sample_id\n            } else {\n                basename = inputs.input_bam.nameroot\n            }\n        } else {\n            basename = inputs.input_bam.nameroot\n        }\n    }\n    if (inputs.output_sufix) {\n        basename += '.' + inputs.output_sufix;\n    }\n\n    // move commands\n    //AligmentSummaryMetrics\n    casm_start = basename + '.alignment_summary_metrics'\n    casm_end = basename + '.summary_metrics.txt'\n    mv_casm = ['[ -f ' + casm_start + ' ] && mv ', casm_start, casm_end].join(' ')\n\n    //InserSizeMetrics\n    insert_start = basename + '.insert_size_metrics'\n    insert_end = basename + '.insert_size_metrics.txt'\n    mv_insert = ['[ -f ' + insert_start + ' ] && mv ', insert_start, insert_end].join(' ')\n    \n\n    //QualityScoreDistribution\n    qual_start = basename + '.quality_distribution_metrics'\n    qual_end = basename + '.quality_distribution_metrics.txt'\n    mv_qual = ['[ -f ' + qual_start + ' ] && mv ', qual_start, qual_end].join(' ')\n\n    //MeanQualityByCycle\n    qualcycle_start = basename + '.quality_by_cycle_metrics'\n    qualcycle_end = basename + '.quality_by_cycle_metrics.txt'\n    mv_qualcycle = ['[ -f ' + qualcycle_start + ' ] && mv ', qualcycle_start, qualcycle_end].join(' ')\n    //['mv', qualcycle_start, qualcycle_end].join(' ')\n\n    //CollectBaseDistributionByCycle\n    basedist_start = basename + '.base_distribution_by_cycle_metrics'\n    basedist_end = basename + '.base_distribution_by_cycle_metrics.txt'\n    mv_basedist = ['[ -f ' + basedist_start + ' ] && mv ', basedist_start, basedist_end].join(' ')\n\n\n\n    list_all = [mv_casm, mv_insert, mv_qual, mv_qualcycle, mv_basedist]\n\n    if (!inputs.program || inputs.program[0] === \"\") {\n        return list_all.join(' ; ')\n    } else {\n\n        list_some = []\n        for (i = 0; i < inputs.program.length; i++) {\n            if (inputs.program[i] == \"CollectAlignmentSummaryMetrics\") {\n                list_some.push(mv_casm)\n            }\n            if (inputs.program[i] == \"CollectInsertSizeMetrics\") {\n                list_some.push(mv_insert)\n            }\n            if (inputs.program[i] == \"QualityScoreDistribution\") {\n                list_some.push(mv_qual)\n            }\n            if (inputs.program[i] == \"MeanQualityByCycle\") {\n                list_some.push(mv_qualcycle)\n            }\n            if (inputs.program[i] == \"CollectBaseDistributionByCycle\") {\n                list_some.push(mv_basedist)\n            }\n        }\n\n        return list_some.join(' ; ')\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  if(inputs.memory_per_job){\n    if(inputs.memory_overhead_per_job){\n    \treturn inputs.memory_per_job + inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn inputs.memory_per_job\n  }\n  else if(!inputs.memory_per_job && inputs.memory_overhead_per_job){\n\t\treturn 2048 + inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar CollectMultipleMetrics INPUT=/root/folder/example.bam OUTPUT=example && mv example.alignment_summary_metrics example.summary_metrics.txt && mv example.insert_size_metrics example.insert_size_metrics.txt",
                "sbg:toolkitVersion": "2.3.2",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/index.html"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/2.3.1"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554229385,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-collectmultiplemetrics/5"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554229414,
                        "sbg:revisionNotes": "change docker image to images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554468314,
                        "sbg:revisionNotes": "add more program options; add in_reference input"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554469273,
                        "sbg:revisionNotes": "add more program options"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555513732,
                        "sbg:revisionNotes": "fix output naming expressions"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555519686,
                        "sbg:revisionNotes": "output prefix expressin, return nameroot if output prefix or sample_id not specified"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555519755,
                        "sbg:revisionNotes": "edit output prefix expression; remove shell qoutes for other inputs"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555575572,
                        "sbg:revisionNotes": "add output sufix parameter"
                    },
                    {
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555576191,
                        "sbg:revisionNotes": "edit expression for prefix from nameroot, take first elelment after split"
                    },
                    {
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555579490,
                        "sbg:revisionNotes": "use nameroot instead of only first part after spliting by full stop"
                    },
                    {
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555794772,
                        "sbg:revisionNotes": "additional if for output prefix if metadata does not exist"
                    },
                    {
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555804641,
                        "sbg:revisionNotes": "fix2 metadata if exist"
                    },
                    {
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556016227,
                        "sbg:revisionNotes": "conditional mv if exist!"
                    },
                    {
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556018741,
                        "sbg:revisionNotes": "; instead &&"
                    },
                    {
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1556020139,
                        "sbg:revisionNotes": "; instead && ALL"
                    },
                    {
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556114441,
                        "sbg:revisionNotes": "fix basename expression"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectmultiplemetrics/15",
                "sbg:revision": 15,
                "sbg:revisionNotes": "fix basename expression",
                "sbg:modifiedOn": 1556114441,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554229385,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic",
                    "vladimirk"
                ],
                "sbg:latestRevision": 15,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "aa35b7eda8eb216a673041e4571593da4243a7cfa2b6aca449cbc3299a6379d16"
            },
            "label": "CollectAggregationMetrics",
            "sbg:x": 1364.7945556640625,
            "sbg:y": -106.38367462158203
        },
        {
            "id": "picard_checkfingerprint",
            "in": [
                {
                    "id": "input",
                    "source": "picard_gatherbamfiles/out_alignments"
                },
                {
                    "id": "genotypes",
                    "source": "genotypes"
                },
                {
                    "id": "haplotype_map",
                    "source": "haplotype_map"
                },
                {
                    "id": "ignore_read_groups",
                    "default": "true"
                }
            ],
            "out": [
                {
                    "id": "fingerprinting_summary_metrics"
                },
                {
                    "id": "fingerprinting_detailed_metrics"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-checkfingerprint/5",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "I",
                        "sbg:category": "Required Arguments",
                        "id": "input",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Input SAM,BAM or VCF",
                        "doc": "Input SAM,BAM or VCF.",
                        "sbg:fileTypes": "BAM, SAM, VCF"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs."
                    },
                    {
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output prefix."
                    },
                    {
                        "sbg:category": "Required Arguments",
                        "id": "genotypes",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "G=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Genotypes",
                        "doc": "File of genotypes (VCF or GELI) to be used in comparison. May contain any number of genotypes; CheckFingerprint will use only those that are usable for fingerprinting. \nRequired.",
                        "sbg:fileTypes": "VCF, GEL"
                    },
                    {
                        "id": "expected_sample_alias",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "SAMPLE_ALIAS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Sample alias",
                        "doc": "Specify which sample's genotypes to use from the expected VCF file (the GENOTYPES file).  If it is not supplied, the sample name from the input (VCF\nor BAM read group header) will be used.  Default value: null"
                    },
                    {
                        "id": "haplotype_map",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "HAPLOTYPE_MAP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Haplotype map",
                        "doc": "The file lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting."
                    },
                    {
                        "id": "genotype_lod_threshold",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "GENOTYPE_LOD_THRESHOLD=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 13
                        },
                        "label": "Genotype LOD threshold",
                        "doc": "When counting haplotypes checked and matching, count only haplotypes where the most likely haplotype achieves at least this LOD.  Default value: 5.0. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "id": "ignore_read_groups",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "ignore_read_groups"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "IGNORE_READ_GROUPS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 18
                        },
                        "label": "Ignore read groups",
                        "doc": "If the input is a SAM/BAM, and this parameter is true, treat the entire input BAM as one single read group in the calculation, ignoring RG annotations, and producing a single fingerprint metric for the entire BAM.  Default value: false."
                    }
                ],
                "outputs": [
                    {
                        "id": "fingerprinting_summary_metrics",
                        "doc": "Summary metrics.",
                        "label": "Summary metrics",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.fingerprinting_summary_metrics"
                        },
                        "secondaryFiles": [
                            "^.bai",
                            ".bai"
                        ],
                        "sbg:fileTypes": "fingerprinting_detail_metrics"
                    },
                    {
                        "id": "fingerprinting_detailed_metrics",
                        "doc": "Fingerprinting detailed metrics.",
                        "label": "Fingerprinting detailed metrics",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.fingerprinting_detailed_metrics"
                        },
                        "sbg:fileTypes": "fingerprinting_detailed_metrics"
                    }
                ],
                "doc": "Checks the sample identity of the sequence/genotype data in the provided file (SAM/BAM or VCF)\n\n### Description\nChecks the sample identity of the sequence/genotype data in the provided file (SAM/BAM or VCF) against a set of known genotypes in the supplied genotype file (in VCF format).\nComputes a fingerprint (essentially, genotype information from different parts of the genome) from the supplied input file (SAM/BAM or VCF) file and compares it to the expected fingerprint genotypes provided. The key output is a LOD score which represents the relative likelihood of the sequence data originating from the same sample as the genotypes vs. from a random sample. \nTwo outputs are produced:\nA summary metrics file that gives metrics of the fingerprint matches when comparing the input to a set of genotypes for the expected sample. At the single sample level (if the input was a VCF) or at the read level (lane or index within a lane) (if the input was a SAM/BAM)\nA detail metrics file that contains an individual SNP/Haplotype comparison within a fingerprint comparison.\nThe metrics files fill the fields of the classes FingerprintingSummaryMetrics and FingerprintingDetailMetrics. The output files may be specified individually using the SUMMARY_OUTPUT and DETAIL_OUTPUT options. Alternatively the OUTPUT option may be used instead to give the base of the two output files, with the summary metrics having a file extension \".fingerprinting_summary_metrics\", and the detail metrics having a file extension \".fingerprinting_detail_metrics\". \n### Common Use Cases \n```\nExample comparing a bam against known genotypes:\n     java -jar picard.jar CheckFingerprint \\\n          INPUT=sample.bam \\\n          GENOTYPES=sample_genotypes.vcf \\\n          HAPLOTYPE_DATABASE=fingerprinting_haplotype_database.txt \\\n          OUTPUT=sample_fingerprinting \n```\n\nThis tool calculates a single number that reports the LOD score for identity check between the #INPUT and the #GENOTYPES. A positive value indicates that the data seems to have come from the same individual or, in other words the identity checks out. The scale is logarithmic (base 10), so a LOD of 6 indicates that it is 1,000,000 more likely that the data matches the genotypes than not. A negative value indicates that the data do not match. A score that is near zero is inconclusive and can result from low coverage or non-informative genotypes.\n\nThe identity check makes use of haplotype blocks defined in the #HAPLOTYPE_MAP file to enable it to have higher statistical power for detecting identity or swap by aggregating data from several SNPs in the haplotype block. This enables an identity check of samples with very low coverage (e.g. ~1x mean coverage).\n\nWhen provided a VCF, the identity check looks at the PL, GL and GT fields (in that order) and uses the first one that it finds.",
                "label": "Picard CheckFingerprint",
                "arguments": [
                    {
                        "prefix": "",
                        "separate": false,
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    command = '-Dsamjdk.buffer_size=131072 -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 '\n    if (inputs.memory_per_job) {\n        command += '-Xms'.concat(inputs.memory_per_job, 'M')\n    }\n    else {\n        command +='-Xms1024M '\n    }\n    return command\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CheckFingerprint"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": -1,
                        "valueFrom": "${\n    if (inputs.genotypes && inputs.haplotype_map) {\n        return 'java'\n    } else {\n        return 'echo java'\n    }\n}"
                    },
                    {
                        "prefix": "O=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.output_prefix) {\n        return inputs.output_prefix\n    } else {\n        return inputs.input.nameroot\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        return inputs.memory_per_job\n    }\n    return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar CheckFingerprint OUTPUT=example.tested.sorted.bam INPUT=/root/dir/example.tested.bam SORT_ORDER=coordinate",
                "sbg:toolkitVersion": "2.16.0-SNAPSHOT",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/command-line-overview.html#SortSam"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/1.138"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554471698,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-checkfingerprint/12"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554471879,
                        "sbg:revisionNotes": "change docker image to images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554472135,
                        "sbg:revisionNotes": "add expression for conditional execution"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554472291,
                        "sbg:revisionNotes": "fix label for sample_alias input"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554473179,
                        "sbg:revisionNotes": "add expression for default output naming"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555500933,
                        "sbg:revisionNotes": ""
                    }
                ],
                "sbg:wrapperAuthor": "Vladimir Kovacevic",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-checkfingerprint/5",
                "sbg:revision": 5,
                "sbg:revisionNotes": "",
                "sbg:modifiedOn": 1555500933,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554471698,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 5,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "ac680d7806c7408283a058bac6f20ddcbc3dbb3fd850a8537355613eed2a3b032"
            },
            "label": "Picard CheckFingerprint",
            "sbg:x": 1374.053955078125,
            "sbg:y": 249.65768432617188
        },
        {
            "id": "picard_collectwgsmetrics",
            "in": [
                {
                    "id": "input_bam",
                    "source": "picard_gatherbamfiles/out_alignments"
                },
                {
                    "id": "reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "include_bq_histogram",
                    "default": "true"
                },
                {
                    "id": "memory_per_job",
                    "source": "memory_per_job_1"
                },
                {
                    "id": "intervals",
                    "source": "wgs_coverage_interval_list"
                },
                {
                    "id": "read_length",
                    "default": 250,
                    "source": "read_length"
                },
                {
                    "id": "use_fast_algorithm",
                    "default": "true"
                },
                {
                    "id": "validation_stringency",
                    "default": "SILENT"
                }
            ],
            "out": [
                {
                    "id": "wgs_metrics"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectwgsmetrics/3",
                "baseCommand": [
                    "java"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "I",
                        "sbg:category": "File inputs",
                        "id": "input_bam",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input",
                        "doc": "Input SAM or BAM file.  Required. Note: Sort order should be coordinate based and not query name based.",
                        "sbg:fileTypes": "SAM, BAM"
                    },
                    {
                        "sbg:altPrefix": "CAP",
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "250",
                        "id": "coverage_cap",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "COVERAGE_CAP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Coverage cap",
                        "doc": "This option provides a maximum value for base coverage. Bases with coverage exceeding the given coverage value will be treated as they if they had such maximum value."
                    },
                    {
                        "sbg:altPrefix": "Q",
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "20",
                        "id": "minimum_base_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MINIMUM_BASE_QUALITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Minimum base quality",
                        "doc": "Minimum base quality for a base to contribute coverage."
                    },
                    {
                        "sbg:altPrefix": "MQ",
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "20",
                        "id": "minimum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MINIMUM_MAPPING_QUALITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Minimum mapping quality",
                        "doc": "Minimum mapping quality for a read to contribute coverage."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "-1",
                        "id": "stop_after",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 13
                        },
                        "label": "Stop after",
                        "doc": "For debugging purposes, stop after processing the given number of genomic bases.  Default value: -1. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:altPrefix": "R=",
                        "sbg:category": "File inputs",
                        "id": "reference",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 7
                        },
                        "label": "Reference",
                        "doc": "The reference sequence in FASTA format to which reads will be aligned.  Required.",
                        "sbg:fileTypes": "FASTA, FA, FASTA.GZ"
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "False",
                        "id": "include_bq_histogram",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_bq_histogram"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INCLUDE_BQ_HISTOGRAM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Include base quality histogram",
                        "doc": "This parameter determines whether to include the base quality histogram in the metrics file.  Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "false",
                        "id": "count_unpaired",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "count_unpaired"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "COUNT_UNPAIRED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Count unpaired",
                        "doc": "If option true is selected, unpaired reads and paired reads with one unmapped end will be counted. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Execution options",
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048MB for single threaded jobs."
                    },
                    {
                        "id": "memory_overhead_per_job",
                        "type": "File?",
                        "label": "Memory overhead per job",
                        "doc": "Reserves memory at scheduler by not passing it to java virtual machine to permit draining all memory from the instance."
                    },
                    {
                        "sbg:toolDefaultValue": "10000",
                        "id": "locus_accumulation_cap",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "LOCUS_ACCUMULATION_CAP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 7
                        },
                        "label": "Locus accumulation cap",
                        "doc": "At positions with coverage exceeding this value, completely ignore reads that accumulate beyond this value (so that they will not be considered for PCT_EXC_CAPPED).  Used to keep memory consumption in check, but could create bias if set too low  Default value: 100000."
                    },
                    {
                        "id": "intervals",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "INTERVALS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals",
                        "doc": "An interval list file that contains the positions to restrict the assessment. Please note  that all bases of reads that overlap these intervals will be considered, even if some of those bases extend beyond the boundaries of the interval. The ideal use case for this argument is to use it to restrict the calculation to a subset of (whole) contigs.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "id": "sample_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "SAMPLE_SIZE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 7
                        },
                        "doc": "Sample Size used for Theoretical Het Sensitivity sampling. Default is 10000. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "id": "read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "READ_LENGTH=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Read length",
                        "doc": "Average read length in the file. Default is 150.  Default value: 150."
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "id": "use_fast_algorithm",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "use_fast_algorithm"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "USE_FAST_ALGORITHM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use fast algorithm",
                        "doc": "If true, fast algorithm is used.  Default value: false."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "SILENT"
                                ],
                                "name": "validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VALIDATION_STRINGENCY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Validation stringency"
                    }
                ],
                "outputs": [
                    {
                        "id": "wgs_metrics",
                        "doc": "Output metrics file.",
                        "label": "WGS metrics",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.wgs_metrics.txt",
                            "outputEval": "${\n    self = inheritMetadata(self, inputs.input_bam);\n\n\n    for (let i = 0; i < self.length; i++) {\n        var out_metadata = {\n            '__inherit__': 'input_file'\n        };\n        self[i] = setMetadata(self[i], out_metadata)\n    };\n\n    return self\n\n}"
                        },
                        "sbg:fileTypes": "TXT"
                    }
                ],
                "doc": "Computes a number of metrics on BAM for evaluating the coverage and performance of whole genome sequencing experiments.\n\n### Common issues\n1) BAM file - Sort order should be coordinate based.",
                "label": "Picard CollectWgsMetrics",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx2048M'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CollectWgsMetrics"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.input_bam) {\n        filename = [].concat(inputs.input_bam)[0].path\n\n        return filename.split('.').slice(0, -1).concat(\"wgs_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  if(inputs.memory_per_job){\n    if(inputs.memory_overhead_per_job){\n    \treturn inputs.memory_per_job + inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn inputs.memory_per_job\n  }\n  else if(!inputs.memory_per_job && inputs.memory_overhead_per_job){\n\t\treturn 2048 + inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar CollectWgsMetrics INPUT=/root/folder/example.bam OUTPUT=example.wgs_metrics.txt REFERENCE_SEQUENCE=/second/folder/human.fasta",
                "sbg:toolkitVersion": "2.3.1",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/2.3.1"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554473570,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-collectwgsmetrics/4"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554474234,
                        "sbg:revisionNotes": "change docker version to images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554474590,
                        "sbg:revisionNotes": "add validation_stringency input argument"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554475506,
                        "sbg:revisionNotes": "fix positions for input arguments"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectwgsmetrics/3",
                "sbg:revision": 3,
                "sbg:revisionNotes": "fix positions for input arguments",
                "sbg:modifiedOn": 1554475506,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554473570,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 3,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a59917df1a842abefde60bb199994797d105fd15c56fdcdc776635f2cc1fd65c4"
            },
            "label": "Picard CollectWgsMetrics",
            "sbg:x": 1368.6505126953125,
            "sbg:y": -260.5620422363281
        },
        {
            "id": "picard_collectrawwgsmetrics",
            "in": [
                {
                    "id": "in_alignments",
                    "source": "picard_gatherbamfiles/out_alignments"
                },
                {
                    "id": "include_bq_histogram",
                    "default": "true"
                },
                {
                    "id": "intervals",
                    "source": "wgs_coverage_interval_list"
                },
                {
                    "id": "use_fast_algorithm",
                    "default": "true"
                },
                {
                    "id": "read_length",
                    "default": 250,
                    "source": "read_length_1"
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "memory_per_job",
                    "source": "memory_per_job"
                },
                {
                    "id": "cpu_per_job",
                    "source": "cpu_per_job"
                }
            ],
            "out": [
                {
                    "id": "metrics_file"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectrawwgsmetrics/5",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Required Arguments",
                        "id": "in_alignments",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input SAM or BAM file",
                        "doc": "Input SAM or BAM file.  Required.",
                        "sbg:fileTypes": "SAM, BAM",
                        "secondaryFiles": [
                            "${\n    return [self.basename + '.bai', self.nameroot + '.bai']\n}"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output metrics file."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "minimum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MINIMUM_MAPPING_QUALITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Minimum mapping quality",
                        "doc": "Minimum mapping quality for a read to contribute coverage.  Default value: 0. This option an be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "3",
                        "id": "minimum_base_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MINIMUM_BASE_QUALITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Minimum base quality",
                        "doc": "Minimum base quality for a base to contribute coverage. N bases will be treated as having a base quality of negative infinity and will therefore be excluded from coverage regardless of the value of this parameter. Default value: 3. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:toolDefaultValue": "100000",
                        "sbg:category": "Optional Arguments",
                        "id": "coverage_cap",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "COVERAGE_CAP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Coverage cap",
                        "doc": "Treat positions with coverage exceeding this value as if they had coverage at this value (but calculate the difference for PCT_EXC_CAPPED). Default value: 100000. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "200000",
                        "id": "locus_accumilation_cap",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "LOCUS_ACCUMULATION_CAP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Locus accumulation cap",
                        "doc": "At positions with coverage exceeding this value, completely ignore reads that accumulate beyond this value (so that they will not be considered for PCT_EXC_CAPPED). Used to keep memory consumption in check, but could create bias if set too low. Default value: 200000. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "-1",
                        "id": "stop_after",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "STOP_AFTER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Stop after",
                        "doc": "For debugging purposes, stop after processing this many genomic bases.  Default value: -1. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "include_bq_histogram",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_bq_histogram"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INCLUDE_BQ_HISTOGRAM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Include BQ histogram",
                        "doc": "Determines whether to include the base quality histogram in the metrics file.  Default value: false.This option can be set to 'null' to clear the default value. Possible values: {true, false}"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "count_unpaired",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "count_unpaired"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "COUNT_UNPAIRED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Count unpaired",
                        "doc": "If true, count unpaired reads, and paired reads with one end unmapped  Default value: false.This option can be set to 'null' to clear the default value. Possible values {true, false}"
                    },
                    {
                        "sbg:toolDefaultValue": "10000",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "SAMPLE_SIZE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample size",
                        "doc": "Sample Size used for Theoretical Het Sensitivity sampling. Default is 10000.  Default value: 10000. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "intervals",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "INTERVALS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invervals",
                        "doc": "An interval list file that contains the positions to restrict the assessment. Please note that all bases of reads that overlap these intervals will be considered, even if some of those bases extend beyond the boundaries of the interval. The ideal use case for this argument is to use it to restrict the calculation to a subset of (whole) contigs.  Default value: null.",
                        "sbg:fileTypes": "BED, INTERVALS, INTERVAL_LIST"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "use_fast_algorithm",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "use_fast_algorithm"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "USE_FAST_ALGORITHM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use fast algorithm",
                        "doc": "If true, fast algorithm is used.  Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "150",
                        "id": "read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "READ_LENGTH=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read length",
                        "doc": "Average read length in the file. Default is 150. Default value: 150. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Required Arguments",
                        "id": "in_reference",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence file.  Required.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:category": "Execution Parameters",
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job"
                    },
                    {
                        "sbg:category": "Execution Parameters",
                        "sbg:toolDefaultValue": "0",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "Execution parameters",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job"
                    }
                ],
                "outputs": [
                    {
                        "id": "metrics_file",
                        "label": "Metrics file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.txt",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "sbg:fileTypes": "TXT"
                    }
                ],
                "label": "Picard CollectRawWgsMetrics",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "java"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xms' + inputs.memory_per_job + 'm'\n    } \n    return '-Xms2048m'\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "-jar /usr/gitc/picard.jar"
                    },
                    {
                        "prefix": "",
                        "separate": false,
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CollectRawWgsMetrics"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.output_prefix) {\n        return inputs.output_prefix + '.raw_wgs_metrics.txt'\n    }\n    return inputs.in_alignments.nameroot + '.raw_wgs_metrics.txt'\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    var memory = 2048;\n    if (inputs.memory_per_job) {\n        memory = inputs.memory_per_job\n    }\n    if (inputs.memory_overhead_per_job) {\n        memory += inputs.memory_overhead_per_job\n    }\n    return memory\n}",
                        "coresMin": "$( inputs.cpu_per_job ? inputs.cpu_per_job : 1)"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554476405,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554477784,
                        "sbg:revisionNotes": "init"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554478186,
                        "sbg:revisionNotes": "fix position for output prefix argument"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554478527,
                        "sbg:revisionNotes": "fix positioning of input arguments"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554478959,
                        "sbg:revisionNotes": "remove shell quoutes from command line arguments"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554479885,
                        "sbg:revisionNotes": "manually add extension for output file"
                    }
                ],
                "sbg:image_url": null,
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectrawwgsmetrics/5",
                "sbg:revision": 5,
                "sbg:revisionNotes": "manually add extension for output file",
                "sbg:modifiedOn": 1554479885,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554476405,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 5,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a49fdff0cf8a8a51d35a0ec8438c9e7853b60faeae767b14f95b62daab4a4dc7f"
            },
            "label": "Picard CollectRawWgsMetrics",
            "sbg:x": 1371.6505126953125,
            "sbg:y": -431.8573303222656
        },
        {
            "id": "calculatereadgroupchecksum",
            "in": [
                {
                    "id": "in_alignments",
                    "source": "picard_gatherbamfiles/out_alignments"
                }
            ],
            "out": [
                {
                    "id": "out_md5_file"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-calculatereadgroupchecksum/1",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Required Arguments",
                        "id": "in_alignments",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input SAM or BAM file",
                        "doc": "The input SAM or BAM file.   Required.",
                        "sbg:fileTypes": "BAM, SAM",
                        "secondaryFiles": [
                            "${\n    return [self.basename + '.bai', self.nameroot + '.bai']\n}"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "The file to which the hash code should be written.  Default value: null."
                    },
                    {
                        "sbg:category": "Execution Parameters",
                        "sbg:toolDefaultValue": "1024",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job"
                    },
                    {
                        "sbg:category": "Execution parameters",
                        "sbg:toolDefaultValue": "0",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "Execution parameters",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job"
                    }
                ],
                "outputs": [
                    {
                        "id": "out_md5_file",
                        "doc": "MD5 hashsum of input BAM or SAM file",
                        "label": "Output MD5 file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.md5",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "sbg:fileTypes": "MD5, READ_GROUP.MD5"
                    }
                ],
                "label": "Picard CalculateReadGroupChecksum",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "java"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xms' + inputs.memory_per_job + 'm'\n    } \n    return '-Xms1024m'\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "-jar /usr/gitc/picard.jar"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CalculateReadGroupChecksum"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.output_prefix) {\n        return inputs.output_prefix + '.read_group.md5'\n    }\n    return inputs.in_alignments.nameroot + '.read_group.md5'\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    var memory = 2048;\n    if (inputs.memory_per_job) {\n        memory = inputs.memory_per_job\n    }\n    if (inputs.memory_overhead_per_job) {\n        memory += inputs.memory_overhead_per_job\n    }\n    return memory\n}",
                        "coresMin": "$( inputs.cpu_per_job ? inputs.cpu_per_job : 1)"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554524278,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554524941,
                        "sbg:revisionNotes": "init"
                    }
                ],
                "sbg:image_url": null,
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-calculatereadgroupchecksum/1",
                "sbg:revision": 1,
                "sbg:revisionNotes": "init",
                "sbg:modifiedOn": 1554524941,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554524278,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 1,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a5ae5ebabddbd3a94ee428945c9aaed2644befbb4c1a066b6e9914a6595eb85c1"
            },
            "label": "CalculateReadGroupChecksum",
            "sbg:x": 1366.9814453125,
            "sbg:y": -588.2002563476562
        },
        {
            "id": "converttocram",
            "in": [
                {
                    "id": "in_alignments",
                    "source": "picard_gatherbamfiles/out_alignments"
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                }
            ],
            "out": [
                {
                    "id": "out_cram"
                },
                {
                    "id": "out_cram_md5"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/converttocram/2",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Required Arguments",
                        "id": "in_alignments",
                        "type": "File",
                        "label": "Input BAM file",
                        "sbg:fileTypes": "BAM",
                        "secondaryFiles": [
                            "${\n    return [self.basename + '.bai', self.nameroot + '.bai']\n}"
                        ]
                    },
                    {
                        "sbg:category": "Required Arguments",
                        "id": "in_reference",
                        "type": "File",
                        "label": "Reference",
                        "doc": "Reference genome",
                        "sbg:fileTypes": "FA, FASTA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Optional prefix for the output CRAM file"
                    }
                ],
                "outputs": [
                    {
                        "id": "out_cram",
                        "label": "Output CRAM file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.cram",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "secondaryFiles": [
                            ".crai"
                        ],
                        "sbg:fileTypes": "CRAM"
                    },
                    {
                        "id": "out_cram_md5",
                        "label": "Output MD5 file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.md5",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "sbg:fileTypes": "MD5"
                    }
                ],
                "label": "ConvertToCram",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "samtools view -C -T $(inputs.in_reference.path) $(inputs.in_alignments.path) | tee $(inputs.output_prefix ? inputs.output_prefix : inputs.in_alignments.nameroot).cram | md5sum | awk '{print $1}' > $(inputs.output_prefix ? inputs.output_prefix : inputs.in_alignments.nameroot).cram.md5;"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "seq_cache_populate.pl -root ./ref/cache $(inputs.in_reference.path); export REF_PATH=: ;export REF_CACHE=./ref/cache/%2s/%2s/%s ; samtools index $(inputs.output_prefix ? inputs.output_prefix : inputs.in_alignments.nameroot).cram"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": 2000,
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554525678,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554526356,
                        "sbg:revisionNotes": "init"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554526910,
                        "sbg:revisionNotes": "edit command line, remove 'set' commands"
                    }
                ],
                "sbg:image_url": null,
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/converttocram/2",
                "sbg:revision": 2,
                "sbg:revisionNotes": "edit command line, remove 'set' commands",
                "sbg:modifiedOn": 1554526910,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554525678,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 2,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a034ce721fd946343ff9ffc9690df99d396019060525dc90c430d292546a935b7"
            },
            "label": "ConvertToCram",
            "sbg:x": 1375.053955078125,
            "sbg:y": 428.8288269042969
        },
        {
            "id": "checkprevalidation",
            "in": [
                {
                    "id": "duplication_metrics",
                    "source": "picard_markduplicates/output_metrics"
                },
                {
                    "id": "chimerism_metrics",
                    "source": [
                        "picard_collectmultiplemetrics_1/multiple_metrics"
                    ]
                }
            ],
            "out": [
                {
                    "id": "duplication_value"
                },
                {
                    "id": "chimerism_value"
                },
                {
                    "id": "is_outlier_data"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/checkprevalidation/9",
                "baseCommand": [
                    "/bin/bash",
                    "bash_greps.sh"
                ],
                "inputs": [
                    {
                        "id": "duplication_metrics",
                        "type": "File"
                    },
                    {
                        "id": "chimerism_metrics",
                        "type": "File[]",
                        "sbg:fileTypes": "TXT"
                    },
                    {
                        "sbg:category": "Opational arguments",
                        "sbg:toolDefaultValue": "0.30",
                        "id": "max_duplication_in_reasonable_sample",
                        "type": "float?",
                        "label": "Max duplication in reasonable sample"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0.15",
                        "id": "max_chimerism_in_reasonable_sample",
                        "type": "float?",
                        "label": "Max chimerism in reasonable sample"
                    }
                ],
                "outputs": [
                    {
                        "id": "duplication_value",
                        "doc": "Percentage of duplications obtained from Picard MarkDuplicates output.",
                        "label": "Duplication value",
                        "type": "float?",
                        "outputBinding": {
                            "loadContents": true,
                            "glob": "duplication_value.txt",
                            "outputEval": "${\n    return parseFloat(self[0].contents)\n}"
                        }
                    },
                    {
                        "id": "chimerism_value",
                        "doc": "Percentage of chimeras obtained from Picard AlignmentSummaryMetrics output.",
                        "label": "Chimerism value",
                        "type": "float?",
                        "outputBinding": {
                            "loadContents": true,
                            "glob": "chimerism_value.txt",
                            "outputEval": "${\n    return parseFloat(self[0].contents)\n}"
                        }
                    },
                    {
                        "id": "is_outlier_data",
                        "label": "Is outlier data",
                        "type": "boolean?",
                        "outputBinding": {
                            "loadContents": true,
                            "glob": "*.txt",
                            "outputEval": "${\n    max_duplication_in_reasonable_sample = 0.30;\n    max_chimerism_in_reasonable_sample = 0.15;\n    \n    if (inputs.max_duplication_in_reasonable_sample !== null) {\n        max_duplication_in_reasonable_sample = inputs.max_duplication_in_reasonable_sample;\n    };\n    if (inputs.max_chimerism_in_reasonable_sample !== null) {\n        max_chimerism_in_reasonable_sample = inputs.max_chimerism_in_reasonable_sample\n    };\n    \n    duplication_rate = 0;\n    chimerism_rate = 0;\n    for (i=0; i<self.length; i++) {\n        file_name = self[i].path.split('/').pop();\n        if (file_name == 'duplication_value.txt') {\n            duplication_rate = parseFloat(self[i].contents)\n        }\n        if (file_name == 'chimerism_value.txt') {\n            chimerism_rate = parseFloat(self[i].contents)\n        }\n    }\n    if (duplication_rate > max_duplication_in_reasonable_sample || chimerism_rate > max_chimerism_in_reasonable_sample) {\n        return true\n    } else {\n        return false\n    }\n}"
                        }
                    }
                ],
                "doc": "This tool parses duplication.csv and chimerism.csv files created by processing Picard MarkDuplicates output and Picard CollectMultipleMetrics output (alignment_summary_metrics) respectively. Outputs are two float values representing percentage of duplications and percentage of chimeric reads.\n\n###**Input**\n\n* Picard MarkDuplicates metrics file\n* Picard CollectMultipleMetrics alignment summary metrics file\n\n###**Output** \n\n* Float value representing percentage of duplications\n* Float value representing percentage of chimeric reads\n\n###**Common Use Cases**\n\nThe tool only accepts two above mentioned metrics files and has no additional arguments.\n\n###**Changes Introduced by Seven Bridges**\n\nThe code provided within WGS Germline WDL was slightly adjusted and regrouped into two scripts – `bash_greps.sh` and `CheckPreValidation.py`.\n\n###**Common Issues and Important Notes**\nNone.",
                "label": "CheckPreValidation",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    return inputs.duplication_metrics.path\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    chimerism_array = [].concat.apply([], inputs.chimerism_metrics)\n    for (i=0; i<chimerism_array.length; i++) {\n        file_name = chimerism_array[i].path.split('/').pop()\n        if (file_name.includes('summary_metrics.txt')) {\n            return chimerism_array[i]\n        }\n    }\n    return null\n}"
                    },
                    {
                        "prefix": "",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "&& python CheckPreValidation.py"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": 1000,
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "CheckPreValidation.py",
                                "entry": "import csv\n\nwith open('duplication.csv') as dupfile:\n    reader = csv.DictReader(dupfile, delimiter='\\t')\n    for row in reader:\n        with open(\"duplication_value.txt\",\"w\") as file:\n            file.write(row['PERCENT_DUPLICATION'])\n            file.close()\n\nwith open('chimerism.csv') as chimfile:\n    reader = csv.DictReader(chimfile, delimiter='\\t')\n    for row in reader:\n        with open(\"chimerism_value.txt\",\"w\") as file:\n            file.write(row['PCT_CHIMERAS'])\n            file.close()",
                                "writable": false
                            },
                            {
                                "entryname": "bash_greps.sh",
                                "entry": "#!/bin/bash\n\necho \"Positional Parameters\"\necho '$0 = ' $0\necho '$1 = ' $1\necho '$2 = ' $2\n\n# Parsing duplications\ngrep -A 1 PERCENT_DUPLICATION $1 > duplication.csv\n\n# Parsing summary metrics\ngrep -A 3 PCT_CHIMERAS $2 | grep -v OF_PAIR > chimerism.csv",
                                "writable": false
                            }
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552920680,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552920730,
                        "sbg:revisionNotes": "Copy of revision 4 from Vlada's project."
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554533644,
                        "sbg:revisionNotes": "add boolean output is_outlier_data, add output eval expression"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554533975,
                        "sbg:revisionNotes": "fix typo in is_outlier_data expression"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554534058,
                        "sbg:revisionNotes": "fix output eval expression or is_outlier_data; add output label"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554534547,
                        "sbg:revisionNotes": "fix logical expression in output eval for is_outlier_data output"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554545620,
                        "sbg:revisionNotes": "fix eval expression for is_outlier_data output"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554546402,
                        "sbg:revisionNotes": "fix eval expression: type comparison of zero and null"
                    },
                    {
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554565956,
                        "sbg:revisionNotes": "fix chimerism file expression, accept array of files but select only summary_metrics.txt file"
                    },
                    {
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554566281,
                        "sbg:revisionNotes": "refine expression for chimerism file"
                    }
                ],
                "sbg:image_url": null,
                "sbg:toolkitVersion": "4",
                "sbg:toolkit": "GATK",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "BSD 3-clause",
                "sbg:categories": [
                    "Other"
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/checkprevalidation/9",
                "sbg:revision": 9,
                "sbg:revisionNotes": "refine expression for chimerism file",
                "sbg:modifiedOn": 1554566281,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1552920680,
                "sbg:createdBy": "ana_d",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic",
                    "ana_d"
                ],
                "sbg:latestRevision": 9,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a8d4ab159794cef68a8b9dadda8b95e513acf286c6c8863932cf93395c802be14"
            },
            "label": "CheckPreValidation",
            "sbg:x": 1637.554443359375,
            "sbg:y": -18.277223587036133
        },
        {
            "id": "gatk_validatesamfile",
            "in": [
                {
                    "id": "input",
                    "source": "converttocram/out_cram"
                },
                {
                    "id": "IGNORE",
                    "default": [
                        "MISSING_TAG_NM"
                    ]
                },
                {
                    "id": "MAX_OUTPUT",
                    "default": 1000000000
                },
                {
                    "id": "MODE",
                    "default": "VERBOSE"
                },
                {
                    "id": "memory_per_job",
                    "default": 6000
                },
                {
                    "id": "is_outlier_data",
                    "source": "checkprevalidation/is_outlier_data"
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                }
            ],
            "out": [
                {
                    "id": "report"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/gatk-validatesamfile/9",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Required Arguments",
                        "id": "input",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input",
                        "doc": "Input SAM/BAM/CRAM file  Required.",
                        "sbg:fileTypes": "SAM, BAM, CRAM",
                        "secondaryFiles": [
                            "${\n    return [self.basename + '.bai', self.nameroot + '.bai', self.basename + '.crai', self.nameroot + '.crai']\n}"
                        ]
                    },
                    {
                        "sbg:altPrefix": null,
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "5",
                        "id": "COMPRESSION_LEVEL",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "COMPRESSION_LEVEL=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Compression Level",
                        "doc": "Compression level for all compressed files created (e.g. BAM and GELI).  Default value: 5."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "CREATE_INDEX",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "CREATE_INDEX"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "CREATE_INDEX=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Index",
                        "doc": "Whether to create a BAM index when writing a coordinate-sorted BAM file.  Default value:\n                              false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "CREATE_MD5_FILE",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "CREATE_MD5_FILE"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "CREATE_MD5_FILE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Md5 File",
                        "doc": "Whether to create an MD5 digest for any BAM or FASTQ files created.    Default value:\n                              false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": null,
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "IGNORE",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "IGNORE",
                                    "symbols": [
                                        "INVALID_QUALITY_FORMAT",
                                        "INVALID_FLAG_PROPER_PAIR",
                                        "INVALID_FLAG_MATE_UNMAPPED",
                                        "MISMATCH_FLAG_MATE_UNMAPPED",
                                        "INVALID_FLAG_MATE_NEG_STRAND",
                                        "MISMATCH_FLAG_MATE_NEG_STRAND",
                                        "INVALID_FLAG_FIRST_OF_PAIR",
                                        "INVALID_FLAG_SECOND_OF_PAIR",
                                        "PAIRED_READ_NOT_MARKED_AS_FIRST_OR_SECOND",
                                        "INVALID_FLAG_NOT_PRIM_ALIGNMENT",
                                        "INVALID_FLAG_SUPPLEMENTARY_ALIGNMENT",
                                        "INVALID_FLAG_READ_UNMAPPED",
                                        "INVALID_INSERT_SIZE",
                                        "INVALID_MAPPING_QUALITY",
                                        "INVALID_CIGAR",
                                        "ADJACENT_INDEL_IN_CIGAR",
                                        "INVALID_MATE_REF_INDEX",
                                        "MISMATCH_MATE_REF_INDEX",
                                        "INVALID_REFERENCE_INDEX",
                                        "INVALID_ALIGNMENT_START",
                                        "MISMATCH_MATE_ALIGNMENT_START",
                                        "MATE_FIELD_MISMATCH",
                                        "INVALID_TAG_NM",
                                        "MISSING_TAG_NM",
                                        "MISSING_HEADER",
                                        "MISSING_SEQUENCE_DICTIONARY",
                                        "MISSING_READ_GROUP",
                                        "RECORD_OUT_OF_ORDER",
                                        "READ_GROUP_NOT_FOUND",
                                        "RECORD_MISSING_READ_GROUP",
                                        "INVALID_INDEXING_BIN",
                                        "MISSING_VERSION_NUMBER",
                                        "INVALID_VERSION_NUMBER",
                                        "TRUNCATED_FILE",
                                        "MISMATCH_READ_LENGTH_AND_QUALS_LENGTH",
                                        "EMPTY_READ",
                                        "CIGAR_MAPS_OFF_REFERENCE",
                                        "MISMATCH_READ_LENGTH_AND_E2_LENGTH",
                                        "MISMATCH_READ_LENGTH_AND_U2_LENGTH",
                                        "E2_BASE_EQUALS_PRIMARY_BASE",
                                        "BAM_FILE_MISSING_TERMINATOR_BLOCK",
                                        "UNRECOGNIZED_HEADER_TYPE",
                                        "POORLY_FORMATTED_HEADER_TAG",
                                        "HEADER_TAG_MULTIPLY_DEFINED",
                                        "HEADER_RECORD_MISSING_REQUIRED_TAG",
                                        "HEADER_TAG_NON_CONFORMING_VALUE",
                                        "INVALID_DATE_STRING",
                                        "TAG_VALUE_TOO_LARGE",
                                        "INVALID_INDEX_FILE_POINTER",
                                        "INVALID_PREDICTED_MEDIAN_INSERT_SIZE",
                                        "DUPLICATE_READ_GROUP_ID",
                                        "MISSING_PLATFORM_VALUE",
                                        "INVALID_PLATFORM_VALUE",
                                        "DUPLICATE_PROGRAM_GROUP_ID",
                                        "MATE_NOT_FOUND",
                                        "MATES_ARE_SAME_END",
                                        "MISMATCH_MATE_CIGAR_STRING",
                                        "MATE_CIGAR_STRING_INVALID_PRESENCE",
                                        "INVALID_UNPAIRED_MATE_REFERENCE",
                                        "INVALID_UNALIGNED_MATE_START",
                                        "MISMATCH_CIGAR_SEQ_LENGTH",
                                        "MISMATCH_SEQ_QUAL_LENGTH",
                                        "MISMATCH_FILE_SEQ_DICT",
                                        "QUALITY_NOT_STOREDINVALID_QUALITY_FORMAT",
                                        "QUALITY_NOT_STORED"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "IGNORE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        var arr = [].concat(self);\n        var enums = [];\n        for (i=0; i<arr.length; i++) {\n            enums.push(arr[i])\n        }\n        return enums.join(' IGNORE=')\n    }\n}"
                        },
                        "label": "Ignore",
                        "doc": "List of validation error types to ignore.  This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "ignore_warnings",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "ignore_warnings"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "IGNORE_WARNINGS=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ignore Warnings",
                        "doc": "If true, only report errors and ignore warnings.  Default value: false. Possible values:\n                              {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-BISULFITE",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "is_bisulfite_sequenced",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "IS_BISULFITE_SEQUENCED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Is Bisulfite Sequenced",
                        "doc": "Whether the SAM/BAM/CRAM file consists of bisulfite sequenced reads. If so, C->T is not counted as an error in computing the value of the NM tag.  Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": null,
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "8000",
                        "id": "MAX_OPEN_TEMP_FILES",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_OPEN_TEMP_FILES=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Open Temp Files",
                        "doc": "Relevant for a coordinate-sorted file containing read pairs only. Maximum number of file handles to keep open when spilling mate info to disk. Set this number a little lower than the per-process maximum number of file that may be open. This number can be found by executing the 'ulimit -n' command on a Unix system.  Default value: 8000."
                    },
                    {
                        "sbg:altPrefix": "-MO",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "100",
                        "id": "MAX_OUTPUT",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_OUTPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Output",
                        "doc": "The maximum number of lines output in verbose mode  Default value: 100."
                    },
                    {
                        "sbg:altPrefix": null,
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "500000",
                        "id": "MAX_RECORDS_IN_RAM",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Records In Ram",
                        "doc": "When writing SAM files that need to be sorted, this will specify the number of records\n                              stored in RAM before spilling to disk. Increasing this number reduces the number of file\n                              handles needed to sort a SAM file, and increases the amount of RAM needed.  Default value:\n                              500000."
                    },
                    {
                        "sbg:altPrefix": "-M",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "VERBOSE",
                        "id": "MODE",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "VERBOSE",
                                    "SUMMARY"
                                ],
                                "name": "MODE"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "MODE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mode",
                        "doc": "Mode of output  Default value: VERBOSE. Possible values: {VERBOSE, SUMMARY}."
                    },
                    {
                        "sbg:altPrefix": "-O",
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output file or standard out if missing  Default value: null."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "QUIET",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "QUIET"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "QUIET=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quiet",
                        "doc": "Whether to suppress job-summary info on System.err.  Default value: false. Possible\n                              values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "VALIDATE_INDEX",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "VALIDATE_INDEX"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VALIDATE_INDEX=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Validate Index",
                        "doc": "If true and input is a BAM file with an index file, also validates the index.  Default\n                              value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory Per Job",
                        "doc": "Memory Per Job"
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Memory Overhead Per Job"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "is_outlier_data",
                        "type": "boolean?",
                        "label": "Is outlier data"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "in_reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "REFERENCE_SEQUENCE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference genome.",
                        "sbg:fileTypes": "FA, FASTA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:category": "Execution Parameters",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job"
                    }
                ],
                "outputs": [
                    {
                        "id": "report",
                        "doc": "Validation report",
                        "label": "Validation report",
                        "type": "File?",
                        "outputBinding": {
                            "loadContents": true,
                            "glob": "*.validation_report.txt"
                        },
                        "sbg:fileTypes": "VALIDATION_REPORT, TXT"
                    }
                ],
                "doc": "Validates SAM/BAM/CRAM file\n\n###Description\nCommand line program wrapping SamFileValidator.\nThis tool reports on the validity of a SAM or BAM file relative to the SAM format specification. This is useful for troubleshooting errors encountered with other tools that may be caused by improper formatting, faulty alignments, incorrect flag values, etc.\n\nBy default, the tool runs in VERBOSE mode and will exit after finding 100 errors and output them to the console (stdout). Therefore, it is often more practical to run this tool initially using the MODE=SUMMARY option. This mode outputs a summary table listing the numbers of all 'errors' and 'warnings'.\n\nWhen fixing errors in your file, it is often useful to prioritize the severe validation errors and ignore the errors/warnings of lesser concern. This can be done using the IGNORE and/or IGNORE_WARNINGS arguments. For helpful suggestions on error prioritization, please follow this link to obtain additional documentation on ValidateSamFile.\n\nAfter identifying and fixing your 'warnings/errors', we recommend that you rerun this tool to validate your SAM/BAM file prior to proceeding with your downstream analysis. This will verify that all problems in your file have been addressed.\n\n### Common Use Cases  \n``\n    ./gatk-launch ValidateSamFile \\\n       -I input.bam\n```",
                "label": "Picard ValidateSamFile",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "java"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n    return '\\\"-Xmx2048M\\\"'\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "-jar /usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "ValidateSamFile"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.output_prefix) {\n        return inputs.output_prefix + '.validation_report.txt'\n    } else {\n        return inputs.input.nameroot + '.validation_report.txt'\n    }\n}"
                    },
                    {
                        "prefix": "SKIP_MATE_VALIDATION=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 5,
                        "valueFrom": "${\n    if (inputs.is_outlier_data) {\n        return 'true'\n    }\n    return 'false'\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": "$( inputs.cpu_per_job ? inputs.cpu_per_job : 1)"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:image_url": null,
                "sbg:wrapperAuthor": "teodora.aleksic",
                "sbg:cmdPreview": "/gatk/gatk --javaOptions \"-Xmx2048M\" ValidateSamFile --input input.bam  ; echo $? > status_code.txt",
                "sbg:toolkitVersion": "",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://software.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadinstitute/gatk"
                    },
                    {
                        "label": "Download",
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.6/"
                    }
                ],
                "sbg:toolkit": "GATK 4.0.0.0",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554830241,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/gatk-validatesamfile/3"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554890585,
                        "sbg:revisionNotes": "change from gatk docker to gitc; change path to picard jar file; add wdl specific inputs."
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554890685,
                        "sbg:revisionNotes": "add in_reference input"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554890932,
                        "sbg:revisionNotes": "delete duplicate input for reference"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554893433,
                        "sbg:revisionNotes": "fix input parameter prefixes accortiding to picard style; fix IGNORE input, set to array of enums, fix expression; add cpu_per_job input, add cpu requirements expression"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554897436,
                        "sbg:revisionNotes": "add secondary files requirement for input file"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554898379,
                        "sbg:revisionNotes": "fix expression for IGNORE input enums"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554900083,
                        "sbg:revisionNotes": "move skip_mate_validation to positional arguments"
                    },
                    {
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554900487,
                        "sbg:revisionNotes": "fix postion of positional argument, remove shell qoute"
                    },
                    {
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1554900770,
                        "sbg:revisionNotes": "change extension to validation_report.txt"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/gatk-validatesamfile/9",
                "sbg:revision": 9,
                "sbg:revisionNotes": "change extension to validation_report.txt",
                "sbg:modifiedOn": 1554900770,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1554830241,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 9,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a18ff998ba668d99b1daa6fd5e84b39c8878b26a1379d063396670ce2c34550f6"
            },
            "label": "ValidateCram",
            "sbg:x": 1929.5145263671875,
            "sbg:y": 149.2068634033203
        },
        {
            "id": "scatterintervallist",
            "in": [
                {
                    "id": "interval_lists",
                    "source": [
                        "wgs_calling_interval_lists"
                    ]
                },
                {
                    "id": "unique",
                    "default": "true"
                },
                {
                    "id": "sort",
                    "default": "true"
                },
                {
                    "id": "scatter_count",
                    "default": 50,
                    "source": "scatter_count"
                },
                {
                    "id": "break_bands_at_multiples_of",
                    "default": 1000000,
                    "source": "break_bands_at_multiples_of"
                },
                {
                    "id": "subdivision_mode",
                    "default": "BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW"
                }
            ],
            "out": [
                {
                    "id": "interval_list"
                },
                {
                    "id": "interval_count"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/scatterintervallist/2",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "I=",
                        "sbg:category": "File inputs",
                        "id": "interval_lists",
                        "type": "File[]",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15,
                            "valueFrom": "${\n    if (self) {\n        self = [].concat(self)\n        var paths = [];\n        for (i=0; i<self.length; i++) {\n            paths.push(self[i].path)\n        }\n        return paths.join(' INPUT=')\n    }\n}"
                        },
                        "label": "Interval lists",
                        "doc": "One or more interval lists. If multiple interval lists are provided the output is theresult of merging the inputs. Supported formats are interval_list and VCF. Default value: null. This option must be specified at least 1 times."
                    },
                    {
                        "sbg:altPrefix": "O=",
                        "sbg:category": "Optional Arguments",
                        "id": "output",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "OUTPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Output",
                        "doc": "The output interval list file to write (if SCATTER_COUNT is 1) or the directory into which to write the scattered interval sub-directories (if SCATTER_COUNT > 1). Default value: null."
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "id": "padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "PADDING=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Padding",
                        "doc": "The amount to pad each end of the intervals by before other operations are undertaken. Negative numbers are allowed and indicate intervals should be shrunk. Resulting intervals < 0 bases long will be removed. Padding is applied to the interval lists  before the ACTION is performed. Default value: 0. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "unique",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "unique"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "UNIQUE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Unique",
                        "doc": "If true, merge overlapping and adjacent intervals to create a list of unique intervals. Implies SORT=true  Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "sort",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "sort"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "SORT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Sort",
                        "doc": "If true, sort the resulting interval list by coordinate. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "CONCAT",
                        "id": "action",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "CONCAT",
                                    "UNION",
                                    "INTERSECT",
                                    "SUBTRACT",
                                    "SYMDIFF",
                                    "OVERLAPS"
                                ],
                                "name": "action"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ACTION=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Action",
                        "doc": "Action to take on inputs. Default value: CONCAT. This option can be set to 'null' to clear the default value. Possible values: {CONCAT (The concatenation of all the INPUTs, no sorting or merging of overlapping/abutting intervals implied. Will result in an unsorted list unless requested otherwise.) UNION (Like CONCATENATE but with UNIQUE and SORT implied, the result being the set-wise union of all INPUTS.) INTERSECT (The sorted, uniqued set of all loci that are contained in all of the INPUTs.) SUBTRACT (Subtracts SECOND_INPUT from INPUT. The resulting loci are there in INPUT that are not in SECOND_INPUT) SYMDIFF (Find loci that are in INPUT or SECOND_INPUT but are not in both.) OVERLAPS (Find only intervals in INPUT that have any overlap with SECOND_INPUT)}"
                    },
                    {
                        "sbg:category": "File inputs",
                        "sbg:altPrefix": "SI=",
                        "id": "second_input",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "SECOND_INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15,
                            "valueFrom": "${\n    if (self) {\n        self = [].concat(self)\n        var paths = [];\n        for (i=0; i<self.length; i++) {\n            paths.push(self[i].path)\n        }\n        return paths.join(' SECOND_INPUT=')\n    }\n}"
                        },
                        "label": "Second input",
                        "doc": "Second set of intervals for SUBTRACT and DIFFERENCE operations. Default value: null. This option may be specified 0 or more times."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "Comment",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "COMMENT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Comment",
                        "doc": "One or more lines of comment to add to the header of the output file. Default value: null. This option may be specified 0 or more times."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "1",
                        "id": "scatter_count",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "SCATTER_COUNT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Scatter count",
                        "doc": "The number of files into which to scatter the resulting list by locus; in some situations, fewer intervals may be emitted. Note - if > 1, the resultant scattered intervals will be sorted and uniqued. The sort will be inverted if the INVERT flag is set. Default value: 1. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "include_filtered",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "include_filtered"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INCLUDE_FILTERED=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Include filtered",
                        "doc": "Whether to include filtered variants in the vcf when generating an interval list from vcf. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}"
                    },
                    {
                        "sbg:toolDefaultValue": "0",
                        "sbg:category": "Optional Arguments",
                        "sbg:altPrefix": "BRK=",
                        "id": "break_bands_at_multiples_of",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "BREAK_BANDS_AT_MULTIPLES_OF=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Break bands at multiples of",
                        "doc": "If set to a positive value will create a new interval list with the original intervals broken up at integer multiples of this value. Set to 0 to NOT break up intervals. Default value: 0. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:altPrefix": "M=",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "INTERVAL_SUBDIVISION",
                        "id": "subdivision_mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "INTERVAL_SUBDIVISION",
                                    "BALANCING_WITHOUT_INTERVAL_SUBDIVISION",
                                    "BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW"
                                ],
                                "name": "subdivision_mode"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "SUBDIVISION_MODE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Subdivision mode",
                        "doc": "Do not subdivide. Default value: INTERVAL_SUBDIVISION. This option can be set to 'null' to clear the default value. Possible values: {INTERVAL_SUBDIVISION, BALANCING_WITHOUT_INTERVAL_SUBDIVISION, BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW}"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "invert",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "invert"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "INVERT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Invert",
                        "doc": "Produce the inverse list. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "1024",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048MB for single threaded jobs."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "500000",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Max records in RAM",
                        "doc": "When writing files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort the file, and increases the amount of RAM needed."
                    }
                ],
                "outputs": [
                    {
                        "id": "interval_list",
                        "doc": "Interval list",
                        "label": "Interval list",
                        "type": "File[]?",
                        "outputBinding": {
                            "glob": "out/*/*.interval_list",
                            "outputEval": "$(inheritMetadata(self, inputs.interval_lists))"
                        },
                        "sbg:fileTypes": "interval_list"
                    },
                    {
                        "id": "interval_count",
                        "doc": "Number of intervals.",
                        "label": "Interval count",
                        "type": "int?",
                        "outputBinding": {
                            "loadContents": true,
                            "glob": "interval_count.txt",
                            "outputEval": "${\n    return parseInt(self[0].contents)\n}"
                        }
                    }
                ],
                "doc": "This tool calls [Picard's IntervalListTools](https://software.broadinstitute.org/gatk/documentation/tooldocs/4.0.1.1/picard_util_IntervalListTools.php) to scatter the input interval list into scatter_count sub interval lists. The number of sub interval lists may not be exactly equal to scatter_count, there may be slightly more or less. Thus, there is a block of python code which is used to count the number of generated sub interval lists.\n\n###**Input**\n\n* [Required] Interval lists: One or more interval lists\n* [Optional] Second input: Second set of intervals for SUBTRACT and DIFFERENCE operations\n\n###**Output**\n\n* Interval list: All intervals grouped into the new list\n* Number of intervals: Number of new intervals\n\n###**Common Use Cases**\n\n     // Germline WDL command\n     java -Xms1g -jar /usr/gitc/picard.jar \\\n          IntervalListTools \\\n          SCATTER_COUNT=${scatter_count} \\\n          SUBDIVISION_MODE=BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW \\\n          UNIQUE=true \\\n          SORT=true \\\n          BREAK_BANDS_AT_MULTIPLES_OF=${break_bands_at_multiples_of} \\\n          INPUT=${interval_list} \\\n          OUTPUT=out\n\nAfter this command, python script for renaming and counting subintervals is executed. See [ScatterIntervalList task](https://github.com/gatk-workflows/broad-prod-wgs-germline-snps-indels/blob/master/PairedEndSingleSampleWf.gatk4.0.wdl) for more details.\n\n###**Changes Introduced by Seven Bridges**\n\nThe list of arguments that are excluded due to poor applicability in the cloud context or for other reasons:\n\n```\n        --help\n        --stdhelp\n        --version\n```\n\n###**Common Issues and Important Notes**\nNone.",
                "label": "ScatterIntervalList",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "mkdir"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "out"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "&&"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "java"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx1024M'\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 5,
                        "valueFrom": "-jar"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 6,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 7,
                        "valueFrom": "IntervalListTools"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 20,
                        "valueFrom": "&&"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 21,
                        "valueFrom": "python3"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 22,
                        "valueFrom": "ScatterIntervalList.py"
                    },
                    {
                        "prefix": "--out_prefix",
                        "shellQuote": false,
                        "position": 23,
                        "valueFrom": "out"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 8,
                        "valueFrom": "out"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        return inputs.memory_per_job\n    }\n    return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "ScatterIntervalList.py",
                                "entry": "import glob\nimport os\nimport argparse\n\nargs = argparse.ArgumentParser()\n\nargs.add_argument('--out_prefix', help='Output prefix', required=False)\nparsed = args.parse_args()\nout_prefix = str(parsed.out_prefix)\n\n# Works around a JES limitation where multiples files with the same name overwrite each other when globbed\nintervals = sorted(glob.glob(out_prefix + \"/*/*.interval_list\"))\n\nfor i, interval in enumerate(intervals):\n    (directory, filename) = os.path.split(interval)\n    newName = os.path.join(directory, str(i + 1) + filename)\n    os.rename(interval, newName)\n\ninterval_count = len(intervals)\nprint(interval_count)\n\nwith open(\"interval_count.txt\", \"w\") as ic:\n    ic.write(str(interval_count))\n    ic.close()\n",
                                "writable": false
                            }
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552922637,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552922671,
                        "sbg:revisionNotes": "Copy of revision 3 from Vlada's project."
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552926364,
                        "sbg:revisionNotes": "repeat fixed on SECOND_INPUT"
                    }
                ],
                "sbg:image_url": null,
                "sbg:toolkit": "Picard",
                "sbg:toolkitVersion": "2.15.0-SNAPSHOT",
                "sbg:categories": [
                    "Other"
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/2.3.1"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "GATK Germline WDL",
                        "id": "https://github.com/gatk-workflows/broad-prod-wgs-germline-snps-indels/blob/master/PairedEndSingleSampleWf.gatk4.0.wdl"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/scatterintervallist/2",
                "sbg:revision": 2,
                "sbg:revisionNotes": "repeat fixed on SECOND_INPUT",
                "sbg:modifiedOn": 1552926364,
                "sbg:modifiedBy": "ana_d",
                "sbg:createdOn": 1552922637,
                "sbg:createdBy": "ana_d",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "ana_d"
                ],
                "sbg:latestRevision": 2,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a00ac7fa2aa38baf547c29901f82f4b07717ab6ebab060084e085475fe3a6abf2"
            },
            "label": "ScatterIntervalList",
            "sbg:x": 1861.3651123046875,
            "sbg:y": -204.86447143554688
        },
        {
            "id": "gatk_printreads",
            "in": [
                {
                    "id": "createOutputBamIndex",
                    "default": "true"
                },
                {
                    "id": "interval_padding",
                    "default": 500,
                    "source": "interval_padding"
                },
                {
                    "id": "intervals_file",
                    "source": "scatterintervallist/interval_list"
                },
                {
                    "id": "reads",
                    "source": [
                        "picard_gatherbamfiles/out_alignments"
                    ]
                }
            ],
            "out": [
                {
                    "id": "recalibrated_bam_file"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/gatk-printreads/4",
                "baseCommand": [
                    "/usr/gitc/gatk4/gatk-launch"
                ],
                "inputs": [
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:category": "Optional Arguments",
                        "id": "addOutputSAMProgramRecord",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "addOutputSAMProgramRecord"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--addOutputSAMProgramRecord",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add Output Sam Program Record",
                        "doc": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "-1",
                        "id": "cloudIndexPrefetchBuffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cloud Index Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1."
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "40",
                        "id": "cloudPrefetchBuffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloudPrefetchBuffer",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cloud Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40."
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "createOutputBamIndex",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "createOutputBamIndex"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--createOutputBamIndex",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Bam Index",
                        "doc": "If true, creates a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "createOutputVariantIndex",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "createOutputVariantIndex"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--createOutputVariantIndex",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Variant Index",
                        "doc": "If true, creates a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disableBamIndexCaching",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "disableBamIndexCaching"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--disableBamIndexCaching",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Bam Index Caching",
                        "doc": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified.  Caching is automatically disabled if there are no intervals specified.  Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "id": "disableReadFilter",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--disableReadFilter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Read Filter",
                        "doc": "Read filters to be disabled before analysis  This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disableSequenceDictionaryValidation",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "disableSequenceDictionaryValidation"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--disableSequenceDictionaryValidation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Sequence Dictionary Validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!  Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disableToolDefaultReadFilters",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "disableToolDefaultReadFilters"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--disableToolDefaultReadFilters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Tool Default Read Filters",
                        "doc": "Disable all tool default read filters. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval_exclusion_padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Exclusion Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including. Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "UNION",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Set Rule",
                        "doc": "Set merging approach to use for combining interval inputs. Default value: UNION. Possible values: {UNION, INTERSECTION}."
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "lenient",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "lenient"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--lenient",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Lenient",
                        "doc": "Lenient processing of VCF files. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "id": "readFilter",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--readFilter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Filter",
                        "doc": "Read filters to be applied before analysis. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:category": "Optional Arguments",
                        "id": "readIndex",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--readIndex",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Index",
                        "doc": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "SILENT",
                        "id": "readValidationStringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "readValidationStringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--readValidationStringency",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Validation Stringency",
                        "doc": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Optional Arguments",
                        "id": "reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence. Default value: null.",
                        "sbg:fileTypes": "FA, FASTA",
                        "secondaryFiles": [
                            ".fai"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "10.0",
                        "id": "secondsBetweenProgressUpdates",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--secondsBetweenProgressUpdates",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Seconds Between Progress Updates",
                        "doc": "Output traversal statistics every time this many seconds elapse. Default value: 10.0."
                    },
                    {
                        "sbg:altPrefix": "-ambigFilterFrac",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "sbg:toolDefaultValue": "0.05",
                        "id": "ambigFilterFrac",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--ambigFilterFrac",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig Filter Frac",
                        "doc": "Threshold fraction of non-regular bases (e.g. N) above which to filter. Default value: 0.05."
                    },
                    {
                        "sbg:altPrefix": "-maxFragmentLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "sbg:toolDefaultValue": "1000000",
                        "id": "maxFragmentLength",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maxFragmentLength",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Fragment Length",
                        "doc": "Keep only read pairs with fragment length at most equal to the given value. Default value: 1000000."
                    },
                    {
                        "sbg:altPrefix": "-library",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "library",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--library",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Library",
                        "doc": "The name of the library to keep. Required."
                    },
                    {
                        "sbg:altPrefix": "-maximumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "maximumMappingQuality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maximumMappingQuality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Maximum Mapping Quality",
                        "doc": "Maximum mapping quality to keep (inclusive). Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-minimumMappingQuality",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "sbg:toolDefaultValue": "10",
                        "id": "minimumMappingQuality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--minimumMappingQuality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Minimum Mapping Quality",
                        "doc": "Minimum mapping quality to keep (inclusive). Default value: 10."
                    },
                    {
                        "sbg:altPrefix": "-dontRequireSoftClipsBothEnds",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "sbg:toolDefaultValue": "false",
                        "id": "dontRequireSoftClipsBothEnds",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "dontRequireSoftClipsBothEnds"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--dontRequireSoftClipsBothEnds",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dont Require Soft Clips Both Ends",
                        "doc": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-filterTooShort",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "sbg:toolDefaultValue": "30",
                        "id": "filterTooShort",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--filterTooShort",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Filter Too Short",
                        "doc": "Value for which reads with less than this number of aligned bases is considered too short. Default value: 30."
                    },
                    {
                        "sbg:altPrefix": "-PLFilterName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "PLFilterName",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--PLFilterName",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "PL Filter Name",
                        "doc": "Keep reads with RG:PL attribute containing this string. This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "-blackListedLanes",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "blackListedLanes",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--blackListedLanes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Black Listed Lanes",
                        "doc": "Keep reads with platform units not on the list. This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "-blackList",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "blackList",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--blackList",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Black List",
                        "doc": "This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "-keepReadGroup",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "keepReadGroup",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--keepReadGroup",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Read Group",
                        "doc": "The name of the read group to keep. Required."
                    },
                    {
                        "sbg:altPrefix": "-maxReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "maxReadLength",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maxReadLength",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Read Length",
                        "doc": "Keep only reads with length at most equal to the specified value. Required."
                    },
                    {
                        "sbg:altPrefix": "-minReadLength",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "sbg:toolDefaultValue": "1",
                        "id": "minReadLength",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--minReadLength",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Read Length",
                        "doc": "Keep only reads with length at least equal to the specified value. Default value: 1."
                    },
                    {
                        "sbg:altPrefix": "-readName",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "readName",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--readName",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Name",
                        "doc": "Keep only reads with this read name. Required."
                    },
                    {
                        "sbg:altPrefix": "-keepReverse",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "keepReverse",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "keepReverse"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--keepReverse",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Reverse",
                        "doc": "Keep only reads on the reverse strand. Required. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-sample",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "sample",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample",
                        "doc": "The name of the sample(s) to keep, filtering out all others. This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "id": "intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals File",
                        "doc": "One or more genomic intervals over which to operate. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Intervals File",
                        "doc": "One or more genomic intervals to exclude from processing. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "id": "intervals_string",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals String",
                        "doc": "One or more genomic intervals over which to operate. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_string",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Intervals String",
                        "doc": "One or more genomic intervals to exclude from processing. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:toolDefaultValue": "true",
                        "sbg:altPrefix": "-addOutputVCFCommandLine",
                        "sbg:category": "Optional Arguments",
                        "id": "addOutputVCFCommandLine",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "addOutputVCFCommandLine"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--addOutputVCFCommandLine",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add Output VCF Command Line",
                        "doc": "If true, adds a command line header line to created VCF files. Default value: true. Possible values: {true, false}"
                    },
                    {
                        "sbg:altPrefix": "-imr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "ALL",
                        "id": "interval_merging_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval_merging_rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval merging rule",
                        "doc": "Interval merging rule for abutting intervals  Default value: ALL. Possible values: {ALL, OVERLAPPING_ONLY}"
                    },
                    {
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "ambigFilterBases",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--ambigFilterBases",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig Filter Bases",
                        "doc": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Default value: null. Cannot be used in conjuction with argument(s) maxAmbiguousBaseFraction."
                    },
                    {
                        "sbg:altPrefix": "-sequenceDictionary",
                        "sbg:category": "Optional Arguments",
                        "id": "sequenceDictionary",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--sequenceDictionary",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sequence Dictionary",
                        "doc": "Use the given sequence dictionary as the master/canonical sequence dictionary. Must be a .dict file. Default value: null.",
                        "sbg:fileTypes": "DICT"
                    },
                    {
                        "sbg:category": "Required Arguments",
                        "sbg:altPrefix": "-I",
                        "id": "reads",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "--input",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        self = [].concat(self)\n        var paths = [];\n        for (i=0; i<self.length; i++) {\n            paths.push(self[i].path)\n        }\n        return paths.join(' --input ')\n    }\n}"
                        },
                        "label": "Reads",
                        "doc": "BAM/SAM/CRAM file containing reads. This argument must be specified at least once. Required.",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "secondaryFiles": [
                            ".bai"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Optional Arguments",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048MB for single-threaded jobs."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job",
                        "doc": "Overhead that gets added to the memory_per_job value to ensure that the computation unit doesn't get overloaded."
                    }
                ],
                "outputs": [
                    {
                        "id": "recalibrated_bam_file",
                        "doc": "Write output to this BAM filename.",
                        "label": "Recalibrated BAM",
                        "type": "File[]",
                        "outputBinding": {
                            "glob": "*.bam",
                            "outputEval": "${\n    self = inheritMetadata(self, inputs.reads);\n\n\n    var add_metadata_key_intervals_file = function(self, inputs) {\n        // With IndelRealigner\n        if ([].concat(inputs.reads)[0].metadata)\n            if ([].concat(inputs.reads)[0].metadata.intervals_file)\n                return [].concat(inputs.reads)[0].metadata.intervals_file\n\n        // W/o Indelrealigner\n        if (inputs.intervals_file)\n            if ([].concat(inputs.intervals_file)[0].metadata)\n                if (inputs.intervals_file.metadata.sbg_scatter)\n                    return [].concat(inputs.intervals_file)[0].path.split('/').pop()\n\n        return 'NO_INTERVALS'\n    }\n    for (let i = 0; i < self.length; i++) {\n        var out_metadata = {\n            'intervals_file': add_metadata_key_intervals_file(self[i], inputs)\n        };\n        self[i] = setMetadata(self[i], out_metadata)\n    };\n\n    return self\n\n}"
                        },
                        "secondaryFiles": [
                            "^.bai"
                        ],
                        "sbg:fileTypes": "BAM, SAM, CRAM"
                    }
                ],
                "doc": "[GATK PrintReads](https://software.broadinstitute.org/gatk/documentation/tooldocs/current/org_broadinstitute_hellbender_tools_PrintReads.php) is a tool that writes reads from SAM format file (SAM/BAM/CRAM) that pass criteria to a new file. A common use case is to subset reads by genomic interval using the `-L` argument. Note when applying genomic intervals, the tool is literal and does not retain mates of paired-end reads outside of the interval, if any. Data with missing mates will fail ValidateSamFile validation with MATE_NOT_FOUND, but certain tools may still analyze the data. If needed, to rescue such mates, use either FilterSamReads or ExtractOriginalAlignmentRecordsByNameSpark.\n\nBy default, PrintReads applies the WellformedReadFilter at the engine level. What this means is that the tool does not print reads that fail the WellformedReadFilter filter. You can similarly apply other engine-level filters to remove specific types of reads with the `--read-filter` argument. See documentation category 'Read Filters' for a list of available filters. To keep reads that do not pass the WellformedReadFilter, either disable the filter with `--disable-read-filter` or disable all default filters with `--disable-tool-default-read-filters`.\n\nThe reference is strictly required when handling CRAM files.\n\n###**Input**  \nOne or more SAM, BAM or CRAM files.\n\n###**Output**  \nA single processed BAM file.\n\n###**Common Use Cases**  \n\n    // Prints all reads that have a mapping quality above zero  \n    java -jar GenomeAnalysisTK.jar \\  \n         -T PrintReads \\  \n         -R reference.fasta \\  \n         -I input1.bam \\  \n         -I input2.bam \\  \n         -o output.bam \\  \n         --read-filter MappingQualityZero  \n\n    // Prints the first 2000 reads in the BAM file  \n    java -jar GenomeAnalysisTK.jar \\  \n         -T PrintReads \\  \n         -R reference.fasta \\  \n         -I input.bam \\  \n         -o output.bam \\  \n         -n 2000  \n\n    // Downsamples BAM file to 25%   \n    java -jar GenomeAnalysisTK.jar \\  \n         -T PrintReads \\  \n         -R reference.fasta \\  \n         -I input.bam \\  \n         -o output.bam \\  \n         -dfrac 0.25 \n\n    // WGS Germline WDL command\n    java -jar GenomeAnalysisTK.jar \\\n         -T PrintReads \\\n         -I input.bam \\\n         --interval_padding 500 \\\n         -L interval_list \\\n         -O local.sharded.bam \\\n\n###**Changes Introduced by Seven Bridges**\n\nThe list of arguments that are excluded due to poor applicability in the cloud context or for other reasons:\n\n```\n         --arguments_file\n         --createOutputBamMD5\n         --createOutputVariantMD5\n         --gcs_max_retries\n         --help\n         --QUIET\n         --TMP_DIR\n         --use_jdk_deflater\n         --use_jdk_inflater\n         --verbosity\n         --version\n         --showHidden\n```\n\nIn addition, there are few arguments which can be provided either as string or file: `--intervals`, `--excludeIntervals` and `--reference`. The first two are designed such that the user can provide both formats (as different inputs), whereas `--reference` can be provided only as a file.\n\nOutput name is automatically generated by adding _.sharded_ suffix to the input file basename (i.e. `--output` argument is hard-coded).\n\n\n###**Common Issues and Important Notes**  \n\nTools in GATK that require a FASTA reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The FASTA index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the FASTA reference. These two secondary files are essential for GATK to work properly. To append these two files to your FASTA reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "label": "GATK PrintReads",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0
                    },
                    {
                        "prefix": "--javaOptions",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '\\\"-Xmx2048M\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "PrintReads"
                    },
                    {
                        "prefix": "--output",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    read_name = [].concat(inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length - 1).join('.')\n\n    if (inputs.bqsr) {\n        return read_namebase + '.base_recalibrated.bam'\n    } else {\n        return read_namebase + '.sharded.bam'\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": "${\n    if (inputs.cpu_per_job) {\n        return inputs.cpu_per_job\n    }\n    return 1\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /root/gatk.jar PrintReads --input /path/to/reads-1.ext --input /path/to/reads-2.ext --output reads-1.bam",
                "sbg:toolkitVersion": "4.beta.5",
                "sbg:license": "BSD 3-clause",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/tooldocs/"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/org_broadinstitute_gatk_tools_walkers_readutils_PrintReads.php"
                    }
                ],
                "sbg:toolkit": "GATK",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552912417,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1552912536,
                        "sbg:revisionNotes": "Copy of revision 11 from Vlada's project"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "ana_d",
                        "sbg:modifiedOn": 1553003546,
                        "sbg:revisionNotes": "memory_per_job and memory_overhead_per_job added"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555337056,
                        "sbg:revisionNotes": "add secondary file for output bam"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555337734,
                        "sbg:revisionNotes": "fix glob expression for secondary output file"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/gatk-printreads/4",
                "sbg:revision": 4,
                "sbg:revisionNotes": "fix glob expression for secondary output file",
                "sbg:modifiedOn": 1555337734,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1552912417,
                "sbg:createdBy": "ana_d",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic",
                    "ana_d"
                ],
                "sbg:latestRevision": 4,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "afc668032f5a226e264d41a44f9ad30266251497a86b7664166e9233dd46986bf"
            },
            "label": "GATK PrintReads",
            "scatter": [
                "intervals_file"
            ],
            "sbg:x": 2011.8798828125,
            "sbg:y": -374.1097106933594
        },
        {
            "id": "gatk_haplotypecaller_4_1_0_0",
            "in": [
                {
                    "id": "contamination_fraction_to_filter",
                    "default": 0,
                    "source": "checkcontamination/contamination"
                },
                {
                    "id": "emit_ref_confidence",
                    "default": "GVCF"
                },
                {
                    "id": "in_alignments",
                    "source": [
                        "gatk_printreads/recalibrated_bam_file"
                    ]
                },
                {
                    "id": "include_intervals",
                    "source": "scatterintervallist/interval_list"
                },
                {
                    "id": "max_alternate_alleles",
                    "default": 3
                },
                {
                    "id": "mem_overhead_per_job",
                    "default": 100
                },
                {
                    "id": "mem_per_job",
                    "source": "mem_per_job"
                },
                {
                    "id": "read_filter",
                    "default": [
                        "OverclippedReadFilter"
                    ]
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                }
            ],
            "out": [
                {
                    "id": "out_variants"
                },
                {
                    "id": "out_alignments"
                },
                {
                    "id": "out_graph"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-haplotypecaller-4-1-0-0/4",
                "baseCommand": [
                    "/opt/gatk"
                ],
                "inputs": [
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "0.002",
                        "id": "active_probability_threshold",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--active-probability-threshold",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Active probability threshold",
                        "doc": "Minimum probability for a locus to be considered active."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "activity_profile_out",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--activity-profile-out",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Activity profile output",
                        "doc": "Output the raw activity profile results in IGV format."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "adaptive_pruning",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--adaptive-pruning",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Adaptive pruning",
                        "doc": "Use Mutect2's adaptive graph pruning algorithm."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "0.001",
                        "id": "adaptive_pruning_initial_error_rate",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--adaptive-pruning-initial-error-rate",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Adaptive pruning initial error rate",
                        "doc": "Initial base error rate estimate for adaptive pruning."
                    },
                    {
                        "sbg:altPrefix": "-add-output-sam-program-record",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "add_output_sam_program_record",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "add_output_sam_program_record"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--add-output-sam-program-record",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add output SAM program record",
                        "doc": "If true, adds a pg tag to created SAM/BAM/CRAM files."
                    },
                    {
                        "sbg:altPrefix": "-add-output-vcf-command-line",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "add_output_vcf_command_line",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "add_output_vcf_command_line"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--add-output-vcf-command-line",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add output VCF command line",
                        "doc": "If true, adds a command line header line to created VCF files."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "all_site_pls",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--all-site-pls",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Annotate all sites with PLs",
                        "doc": "Annotate all sites with PLs."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "alleles",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--alleles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Alleles",
                        "doc": "The set of alleles at which to genotype when --genotyping_mode is genotype_given_alleles.",
                        "sbg:fileTypes": "BCF2, VCF, VCF3",
                        "secondaryFiles": [
                            ".idx"
                        ]
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "allow_non_unique_kmers_in_ref",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--allow-non-unique-kmers-in-ref",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Allow non unique kmers in ref",
                        "doc": "Allow graphs that have non-unique kmers in the reference."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "annotate_with_num_discovered_alleles",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--annotate-with-num-discovered-alleles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Annotate with num discovered alleles",
                        "doc": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site."
                    },
                    {
                        "sbg:altPrefix": "-A",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "annotation",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "annotation",
                                    "symbols": [
                                        "AlleleFraction",
                                        "AS_BaseQualityRankSumTest",
                                        "AS_FisherStrand",
                                        "AS_InbreedingCoeff",
                                        "AS_MappingQualityRankSumTest",
                                        "AS_QualByDepth",
                                        "AS_ReadPosRankSumTest",
                                        "AS_RMSMappingQuality",
                                        "AS_StrandOddsRatio",
                                        "BaseQuality",
                                        "BaseQualityRankSumTest",
                                        "ChromosomeCounts",
                                        "ClippingRankSumTest",
                                        "CountNs",
                                        "Coverage",
                                        "DepthPerAlleleBySample",
                                        "DepthPerSampleHC",
                                        "ExcessHet",
                                        "FisherStrand",
                                        "FragmentLength",
                                        "GenotypeSummaries",
                                        "InbreedingCoeff",
                                        "LikelihoodRankSumTest",
                                        "MappingQuality",
                                        "MappingQualityRankSumTest",
                                        "MappingQualityZero",
                                        "OriginalAlignment",
                                        "OxoGReadCounts",
                                        "PolymorphicNuMT",
                                        "PossibleDeNovo",
                                        "QualByDepth",
                                        "ReadOrientationArtifact",
                                        "ReadPosition",
                                        "ReadPosRankSumTest",
                                        "ReferenceBases",
                                        "RMSMappingQuality",
                                        "SampleList",
                                        "StrandArtifact",
                                        "StrandBiasBySample",
                                        "StrandOddsRatio",
                                        "TandemRepeat",
                                        "UniqueAltReadCount"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "",
                            "itemSeparator": "null",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--annotation ' + self.join(' --annotation ')\n    }\n}"
                        },
                        "label": "Annotation",
                        "doc": "One or more specific annotations to add to variant calls."
                    },
                    {
                        "sbg:altPrefix": "-G",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "annotation_group",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "annotation_group",
                                    "symbols": [
                                        "AS_StandardAnnotation",
                                        "OrientationBiasMixtureModelAnnotation",
                                        "ReducibleAnnotation",
                                        "StandardAnnotation",
                                        "StandardHCAnnotation",
                                        "StandardMutectAnnotation"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--annotation-group ' + self.join(' --annotation-group ')\n    }\n}"
                        },
                        "label": "Annotation group",
                        "doc": "One or more groups of annotations to apply to variant calls."
                    },
                    {
                        "sbg:altPrefix": "-AX",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "annotations_to_exclude",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "annotations_to_exclude",
                                    "symbols": [
                                        "BaseQualityRankSumTest",
                                        "ChromosomeCounts",
                                        "Coverage",
                                        "DepthPerAlleleBySample",
                                        "DepthPerSampleHC",
                                        "ExcessHet",
                                        "FisherStrand",
                                        "InbreedingCoeff",
                                        "MappingQualityRankSumTest",
                                        "QualByDepth",
                                        "ReadPosRankSumTest",
                                        "RMSMappingQuality",
                                        "StrandOddsRatio"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--annotations-to-exclude ' + self.join(' --annotations-to-exclude ')\n    }\n}"
                        },
                        "label": "Annotations to exclude",
                        "doc": "One or more specific annotations to exclude from variant calls."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "arguments_file",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        var cmd = '';\n        for (i=0; i<self.length; i++) {\n            cmd += ' --arguments_file ' + self[i].path\n        }\n        return cmd\n    }\n}"
                        },
                        "label": "Arguments",
                        "doc": "Read one or more arguments files and add them to the command line.",
                        "sbg:fileTypes": "TXT"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "assembly_region_out",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--assembly-region-out",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Assembly region output",
                        "doc": "Output the assembly region to this IGV formatted file."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "100",
                        "id": "assembly_region_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--assembly-region-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Assembly region padding",
                        "doc": "Number of additional bases of context to include around each assembly region."
                    },
                    {
                        "sbg:altPrefix": "-bamout",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "bam_output",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--bam-output",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "BAM output",
                        "doc": "File to which assembled haplotypes should be written."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "CALLED_HAPLOTYPES",
                        "id": "bam_writer_type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL_POSSIBLE_HAPLOTYPES",
                                    "CALLED_HAPLOTYPES"
                                ],
                                "name": "bam_writer_type"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--bam-writer-type",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "BAM writer type",
                        "doc": "Which haplotypes should be written to the BAM."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "18",
                        "id": "base_quality_score_threshold",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--base-quality-score-threshold",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Base quality score threshold",
                        "doc": "Base qualities below this threshold will be reduced to the minimum (6)."
                    },
                    {
                        "sbg:altPrefix": "-comp",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "comp",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        var cmd = '';\n        for (i=0; i<self.length; i++) {\n            cmd += ' --comp ' + self[i].path\n        }\n        return cmd\n    }\n}"
                        },
                        "label": "Comparison VCF",
                        "doc": "Comparison vcf file(s).",
                        "sbg:fileTypes": "VCF"
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "consensus",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--consensus",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Consensus",
                        "doc": "1000g consensus mode."
                    },
                    {
                        "sbg:altPrefix": "-contamination-file",
                        "sbg:category": "Advanced Arguments",
                        "id": "contamination_fraction_per_sample_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--contamination-fraction-per-sample-file",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Contamination fraction per sample",
                        "doc": "Tab-separated file containing fraction of contamination in sequencing data (per sample) to aggressively remove. Format should be \".",
                        "sbg:fileTypes": "TSV"
                    },
                    {
                        "sbg:altPrefix": "-contamination",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "contamination_fraction_to_filter",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--contamination-fraction-to-filter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Contamination fraction to filter",
                        "doc": "Fraction of contamination in sequencing data (for all samples) to aggressively remove 0."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "correct_overlapping_quality",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--correct-overlapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Correct overlapping quality",
                        "doc": "Undocumented option."
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "create_output_bam_index",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_output_bam_index"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--create-output-bam-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create output BAM index",
                        "doc": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file."
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "create_output_bam_md5",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-bam-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create output BAM md5",
                        "doc": "If true, create a md5 digest for any BAM/SAM/CRAM file created."
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "create_output_variant_index",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_output_variant_index"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--create-output-variant-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create output variant index",
                        "doc": "If true, create a vcf index when writing a coordinate-sorted VCF file."
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "create_output_variant_md5",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-variant-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create output variant md5",
                        "doc": "If true, create a a md5 digest any VCF file created."
                    },
                    {
                        "sbg:altPrefix": "-D",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "dbsnp",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--dbsnp",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "dbSNP",
                        "doc": "dbSNP file.",
                        "sbg:fileTypes": "VCF",
                        "secondaryFiles": [
                            ".idx"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-debug",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "debug",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--debug",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Debug",
                        "doc": "Print out very verbose debug information about each triggering active region."
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_bam_index_caching",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-bam-index-caching",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable BAM index caching",
                        "doc": "If true, don't cache BAM indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_optimizations",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-optimizations",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable optimizations",
                        "doc": "Don't skip calculations in activeregions with no variants."
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_read_filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "disable_read_filter",
                                    "symbols": [
                                        "GoodCigarReadFilter",
                                        "MappedReadFilter",
                                        "MappingQualityAvailableReadFilter",
                                        "MappingQualityReadFilter",
                                        "NonZeroReferenceLengthAlignmentReadFilter",
                                        "NotDuplicateReadFilter",
                                        "NotSecondaryAlignmentReadFilter",
                                        "PassesVendorQualityCheckReadFilter",
                                        "WellformedReadFilter"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--disable-read-filter ' + self.join(' --disable-read-filter ')\n    }\n}"
                        },
                        "label": "Disable read filter",
                        "doc": "Read filters to be disabled before analysis."
                    },
                    {
                        "sbg:altPrefix": "-disable-sequence-dictionary-validation",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_sequence_dictionary_validation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-sequence-dictionary-validation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable sequence dictionary validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!"
                    },
                    {
                        "sbg:altPrefix": "-disable-tool-default-annotations",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_tool_default_annotations",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-annotations",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable tool default annotations",
                        "doc": "Disable all tool default annotations."
                    },
                    {
                        "sbg:altPrefix": "-disable-tool-default-read-filters",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_tool_default_read_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-read-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable tool default read filters",
                        "doc": "Disable all tool default read filters (warning: many tools will not function correctly without their default read filters on)."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "do_not_run_physical_phasing",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--do-not-run-physical-phasing",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Do not run physical phasing",
                        "doc": "Disable physical phasing."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "dont_increase_kmer_sizes_for_cycles",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-increase-kmer-sizes-for-cycles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dont increase kmer sizes for cycles",
                        "doc": "Disable iterating over kmer sizes when graph cycles are detected."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "dont_trim_active_regions",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-trim-active-regions",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dont trim active regions",
                        "doc": "If specified, we will not trim down the active region from the full region (active + extension) to just the active interval for genotyping."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "dont_use_soft_clipped_bases",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-use-soft-clipped-bases",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Do not use soft clipped bases",
                        "doc": "Do not analyze soft clipped bases in the reads."
                    },
                    {
                        "sbg:altPrefix": "-ERC",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "NONE",
                        "id": "emit_ref_confidence",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "NONE",
                                    "BP_RESOLUTION",
                                    "GVCF"
                                ],
                                "name": "emit_ref_confidence"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--emit-ref-confidence",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Emit ref confidence",
                        "doc": "Mode for emitting reference confidence scores."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "enable_all_annotations",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--enable-all-annotations",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Enable all annotations",
                        "doc": "Use all possible annotations (not for the faint of heart)."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--exclude-intervals ' + self.join(' --exclude-intervals ')\n    }\n}"
                        },
                        "label": "Exclude intervals string values",
                        "doc": "One or more genomic intervals to exclude from processing."
                    },
                    {
                        "sbg:altPrefix": "-founder-id",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "founder_id",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--founder-id ' + self.join(' --founder-id ')\n    }\n}"
                        },
                        "label": "Founder id",
                        "doc": "Samples representing the population \"founders\"."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "gatk_config_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--gatk-config-file",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "GATK config",
                        "doc": "A configuration file to use with the GATK.",
                        "sbg:fileTypes": "TXT"
                    },
                    {
                        "sbg:altPrefix": "-gcs-retries",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "20",
                        "id": "gcs_max_retries",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--gcs-max-retries",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "GCS max retries",
                        "doc": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "gcs_project_for_requester_pays",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--gcs-project-for-requester-pays",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "GCS project for requester pays",
                        "doc": "Project to bill when accessing \"requester pays\" buckets. If unset, these buckets cannot be accessed. Default value: ."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "genotype_filtered_alleles",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--genotype-filtered-alleles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Genotype filtered alleles",
                        "doc": "Whether to genotype all given alleles, even filtered ones, --genotyping_mode is genotype_given_alleles."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "DISCOVERY",
                        "id": "genotyping_mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "DISCOVERY",
                                    "GENOTYPE_GIVEN_ALLELES"
                                ],
                                "name": "genotyping_mode"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--genotyping-mode",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Genotyping mode",
                        "doc": "Specifies how to determine the alternate alleles to use for genotyping."
                    },
                    {
                        "sbg:altPrefix": "-graph",
                        "sbg:category": "Optional Arguments",
                        "id": "graph_output",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--graph-output",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Graph output",
                        "doc": "Write debug assembly graph information to this file."
                    },
                    {
                        "sbg:altPrefix": "-GQB",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 70, 80, 90, 99",
                        "id": "gvcf_gq_bands",
                        "type": "int[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--gvcf-gq-bands ' + self.join(' --gvcf-gq-bands ')\n    }\n}"
                        },
                        "label": "GVCF GQ bands",
                        "doc": "Exclusive upper bounds for reference confidence GQ bands (must be value from 1 to 100 and specified in increasing order)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0.001",
                        "id": "heterozygosity",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--heterozygosity",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Heterozygosity",
                        "doc": "Heterozygosity value used to compute prior likelihoods for any locus. See the gatkdocs for full details on the meaning of this population genetics concept."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0.01",
                        "id": "heterozygosity_stdev",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--heterozygosity-stdev",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Heterozygosity stdev",
                        "doc": "Standard deviation of heterozygosity for SNP and indel calling."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "1.25E-4",
                        "id": "indel_heterozygosity",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--indel-heterozygosity",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Indel heterozygosity",
                        "doc": "Heterozygosity for indel calling. See the gatkdocs for heterozygosity for full details on the meaning of this population genetics concept."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "10",
                        "id": "indel_size_to_eliminate_in_ref_model",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--indel-size-to-eliminate-in-ref-model",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Indel size to eliminate in ref model",
                        "doc": "The size of an indel to check for in the reference model."
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Required Arguments",
                        "id": "in_alignments",
                        "type": "File[]",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    in_files = [].concat(inputs.in_alignments)\n    if (in_files) {\n        var cmd = '';\n        for (i=0; i<in_files.length; i++) {\n            cmd += ' --input ' + in_files[i].path\n        }\n        return cmd\n    }\n}"
                        },
                        "label": "Input alignments",
                        "doc": "BAM/SAM/CRAM file containing reads this argument must be specified at least once.",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "secondaryFiles": [
                            "${ \n    return [self.basename+\".bai\", self.nameroot + \".bai\",\n            self.basename+\".crai\", self.nameroot + \".crai\"]\n}"
                        ]
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "id": "input_prior",
                        "type": "float[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--input-prior ' + self.join(' --input-prior ')\n    }\n}"
                        },
                        "label": "Input prior",
                        "doc": "Input prior for calls."
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-exclusion-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval exclusion padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding."
                    },
                    {
                        "sbg:altPrefix": "-imr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "ALL",
                        "id": "interval_merging_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-merging-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval merging rule",
                        "doc": "Interval merging rule for abutting intervals."
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including."
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "UNION",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-set-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval set rule",
                        "doc": "Set merging approach to use for combining interval inputs."
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Include genomic intervals",
                        "doc": "One or more genomic intervals over which to operate.",
                        "sbg:fileTypes": "INTERVAL_LIST"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--intervals ' + self.join(' --intervals ')\n    }\n}"
                        },
                        "label": "Intervals string values",
                        "doc": "One or more genomic intervals over which to operate."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "10, 25",
                        "id": "kmer_size",
                        "type": "int[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--kmer-size ' + self.join(' --kmer-size ')\n    }\n}"
                        },
                        "label": "Kmer size",
                        "doc": "Kmer size to use in the read threading assembler."
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "lenient",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--lenient",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Lenient",
                        "doc": "Lenient processing of VCF files."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "6",
                        "id": "max_alternate_alleles",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-alternate-alleles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max alternate alleles",
                        "doc": "Maximum number of alternate alleles to genotype."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "300",
                        "id": "max_assembly_region_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-assembly-region-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max assembly region size",
                        "doc": "Maximum size of an assembly region."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "1024",
                        "id": "max_genotype_count",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-genotype-count",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max genotype count",
                        "doc": "Maximum number of genotypes to consider at any site."
                    },
                    {
                        "sbg:altPrefix": "-mnp-dist",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "max_mnp_distance",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-mnp-distance",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max MNP distance",
                        "doc": "Two or more phased substitutions separated by this distance or less are merged into MNPs. Warning: when used in GVCF mode, resulting GVCFs cannot be joint-genotyped."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "128",
                        "id": "max_num_haplotypes_in_population",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-num-haplotypes-in-population",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max num haplotypes in population",
                        "doc": "Maximum number of haplotypes to consider for your population."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "50",
                        "id": "max_prob_propagation_distance",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-prob-propagation-distance",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max prob propagation distance",
                        "doc": "Upper limit on how many bases away probability mass can be moved around when calculating the boundaries between active and inactive assembly regions."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "50",
                        "id": "max_reads_per_alignment_start",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-reads-per-alignment-start",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max reads per alignment start",
                        "doc": "Maximum number of reads to retain per alignment start position. Reads above this threshold will be downsampled. Set to 0 to disable."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "100",
                        "id": "max_unpruned_variants",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-unpruned-variants",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max unpruned variants",
                        "doc": "Maximum number of variants in graph the adaptive pruner will allow."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "maximum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maximum-mapping-quality",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"MappingQualityReadFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Maximum mapping quality",
                        "doc": "Valid only if \"MappingQualityReadFilter\" is specified:\nMaximum mapping quality to keep (inclusive)."
                    },
                    {
                        "sbg:category": "Platform options",
                        "id": "mem_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job",
                        "doc": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise."
                    },
                    {
                        "sbg:category": "Platform options",
                        "sbg:toolDefaultValue": "2048",
                        "id": "mem_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "50",
                        "id": "min_assembly_region_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-assembly-region-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min assembly region size",
                        "doc": "Minimum size of an assembly region."
                    },
                    {
                        "sbg:altPrefix": "-mbq",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "10",
                        "id": "min_base_quality_score",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-base-quality-score",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min base quality score",
                        "doc": "Minimum base quality required to consider a base for calling."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "4",
                        "id": "min_dangling_branch_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-dangling-branch-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min dangling branch length",
                        "doc": "Minimum length of a dangling branch to attempt recovery."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "2",
                        "id": "min_pruning",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-pruning",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min pruning",
                        "doc": "Minimum support to not prune paths in the graph."
                    },
                    {
                        "sbg:category": "Conditional Arguments",
                        "sbg:toolDefaultValue": "20",
                        "id": "minimum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--minimum-mapping-quality",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"MappingQualityReadFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Minimum mapping quality",
                        "doc": "Valid only if \"MappingQualityReadFilter\" is specified:\nMinimum mapping quality to keep (inclusive)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "4",
                        "id": "native_pair_hmm_threads",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--native-pair-hmm-threads",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Native pairHMM threads",
                        "doc": "How many threads should a native pairHMM implementation use."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "native_pair_hmm_use_double_precision",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--native-pair-hmm-use-double-precision",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Native pairHMM use double precision",
                        "doc": "Use double precision in the native pairHMM. This is slower but matches the java implementation better."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "1",
                        "id": "num_pruning_samples",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--num-pruning-samples",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Num pruning samples",
                        "doc": "Number of samples that must pass the minPruning threshold."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "num_reference_samples_if_no_call",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--num-reference-samples-if-no-call",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Num reference samples if no call",
                        "doc": "Number of hom-ref genotypes to infer at sites not present in a panel."
                    },
                    {
                        "sbg:altPrefix": "-O",
                        "sbg:category": "Required Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output prefix."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "EMIT_VARIANTS_ONLY",
                        "id": "output_mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "EMIT_VARIANTS_ONLY",
                                    "EMIT_ALL_CONFIDENT_SITES",
                                    "EMIT_ALL_SITES"
                                ],
                                "name": "output_mode"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--output-mode",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Output mode",
                        "doc": "Specifies which type of calls are contained output."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "10",
                        "id": "pair_hmm_gap_continuation_penalty",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--pair-hmm-gap-continuation-penalty",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pair HMM gap continuation penalty",
                        "doc": "Flat gap continuation penalty for use in the pairHMM."
                    },
                    {
                        "sbg:altPrefix": "-pairHMM",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "FASTEST_AVAILABLE",
                        "id": "pair_hmm_implementation",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "EXACT",
                                    "ORIGINAL",
                                    "LOGLESS_CACHING",
                                    "AVX_LOGLESS_CACHING",
                                    "AVX_LOGLESS_CACHING_OMP",
                                    "EXPERIMENTAL_FPGA_LOGLESS_CACHING",
                                    "FASTEST_AVAILABLE"
                                ],
                                "name": "pair_hmm_implementation"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--pair-hmm-implementation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pair HMM implementation",
                        "doc": "The pairHMM implementation to use for genotype likelihood calculations."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "CONSERVATIVE",
                        "id": "pcr_indel_model",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "NONE",
                                    "HOSTILE",
                                    "AGGRESSIVE",
                                    "CONSERVATIVE"
                                ],
                                "name": "pcr_indel_model"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--pcr-indel-model",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "PCR indel model",
                        "doc": "The PCR indel model to use."
                    },
                    {
                        "sbg:altPrefix": "-ped",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "pedigree",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--pedigree",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pedigree",
                        "doc": "Pedigree file for determining the population \"founders\".",
                        "sbg:fileTypes": "PED"
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "45",
                        "id": "phred_scaled_global_read_mismapping_rate",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--phred-scaled-global-read-mismapping-rate",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Phred scaled global read mismapping rate",
                        "doc": "The global assumed mismapping rate for reads."
                    },
                    {
                        "sbg:altPrefix": "-population",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "population_callset",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--population-callset",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Population callset",
                        "doc": "Callset to use in calculating genotype priors.",
                        "sbg:fileTypes": "VCF"
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "1.0",
                        "id": "pruning_lod_threshold",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--pruning-lod-threshold",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pruning lod threshold",
                        "doc": "Log-10 likelihood ratio threshold for adaptive pruning algorithm."
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "id": "read_filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "AlignmentAgreesWithHeaderReadFilter",
                                        "AllowAllReadsReadFilter",
                                        "AmbiguousBaseReadFilter",
                                        "CigarContainsNoNOperator",
                                        "FirstOfPairReadFilter",
                                        "FragmentLengthReadFilter",
                                        "GoodCigarReadFilter",
                                        "HasReadGroupReadFilter",
                                        "LibraryReadFilter",
                                        "MappedReadFilter",
                                        "MappingQualityAvailableReadFilter",
                                        "MappingQualityNotZeroReadFilter",
                                        "MappingQualityReadFilter",
                                        "MatchingBasesAndQualsReadFilter",
                                        "MateDifferentStrandReadFilter",
                                        "MateOnSameContigOrNoMappedMateReadFilter",
                                        "MetricsReadFilter",
                                        "NonChimericOriginalAlignmentReadFilter",
                                        "NonZeroFragmentLengthReadFilter",
                                        "NonZeroReferenceLengthAlignmentReadFilter",
                                        "NotDuplicateReadFilter",
                                        "NotOpticalDuplicateReadFilter",
                                        "NotSecondaryAlignmentReadFilter",
                                        "NotSupplementaryAlignmentReadFilter",
                                        "OverclippedReadFilter",
                                        "PairedReadFilter",
                                        "PassesVendorQualityCheckReadFilter",
                                        "PlatformReadFilter",
                                        "PlatformUnitReadFilter",
                                        "PrimaryLineReadFilter",
                                        "ProperlyPairedReadFilter",
                                        "ReadGroupBlackListReadFilter",
                                        "ReadGroupReadFilter",
                                        "ReadLengthEqualsCigarLengthReadFilter",
                                        "ReadLengthReadFilter",
                                        "ReadNameReadFilter",
                                        "ReadStrandFilter",
                                        "SampleReadFilter",
                                        "SecondOfPairReadFilter",
                                        "SeqIsStoredReadFilter",
                                        "ValidAlignmentEndReadFilter",
                                        "ValidAlignmentStartReadFilter",
                                        "WellformedReadFilter"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--read-filter ' + self.join(' --read-filter ')\n    }\n}"
                        },
                        "label": "Read filter",
                        "doc": "Read filters to be applied before analysis."
                    },
                    {
                        "sbg:altPrefix": "-read-index",
                        "sbg:category": "Optional Arguments",
                        "id": "read_index",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self) {\n        return '--read-index ' + self.join(' --read-index ')\n    }\n}"
                        },
                        "label": "Read index",
                        "doc": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically."
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "SILENT",
                        "id": "read_validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "read_validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-validation-stringency",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read validation stringency",
                        "doc": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value silent can improve performance when processing a bam file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "recover_dangling_heads",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--recover-dangling-heads",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Recover dangling heads",
                        "doc": "This argument is deprecated since version 3.3."
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Required Arguments",
                        "sbg:toolDefaultValue": "FASTA, FA",
                        "id": "in_reference",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence file.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-ALIAS",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample name",
                        "doc": "Name of single sample to use from a multi-sample bam."
                    },
                    {
                        "sbg:altPrefix": "-ploidy",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "2",
                        "id": "sample_ploidy",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--sample-ploidy",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample ploidy",
                        "doc": "Ploidy (number of chromosomes) per sample. For pooled data, set to (number of samples in each pool x Sample Ploidy)."
                    },
                    {
                        "sbg:altPrefix": "-seconds-between-progress-updates",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "10.0",
                        "id": "seconds_between_progress_updates",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--seconds-between-progress-updates",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Seconds between progress updates",
                        "doc": "Output traversal statistics every time this many seconds elapse."
                    },
                    {
                        "sbg:altPrefix": "-sequence-dictionary",
                        "sbg:category": "Optional Arguments",
                        "id": "sequence_dictionary",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sequence-dictionary",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sequence dictionary",
                        "doc": "Use the given sequence dictionary as the master/canonical sequence dictionary. Must be a .dict file."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "sites_only_vcf_output",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--sites-only-vcf-output",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sites only VCF output",
                        "doc": "If true, don't emit genotype fields when writing VCF file output."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "JAVA",
                        "id": "smith_waterman",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "FASTEST_AVAILABLE",
                                    "AVX_ENABLED",
                                    "JAVA"
                                ],
                                "name": "smith_waterman"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--smith-waterman",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Smith waterman",
                        "doc": "Which Smith-Waterman implementation to use, generally FASTEST_AVAILABLE is the right choice."
                    },
                    {
                        "sbg:altPrefix": "-stand-call-conf",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "30.0",
                        "id": "standard_min_confidence_threshold_for_calling",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--standard-min-confidence-threshold-for-calling",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Standard min confidence threshold for calling",
                        "doc": "The minimum phred-scaled confidence threshold at which variants should be called."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "tmp_dir",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--tmp-dir",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Tmp dir",
                        "doc": "Temporary directory to use."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "use_alleles_trigger",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-alleles-trigger",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use alleles trigger",
                        "doc": "Use additional trigger on variants found in an external alleles file."
                    },
                    {
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "use_filtered_reads_for_annotations",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-filtered-reads-for-annotations",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use filtered reads for annotations",
                        "doc": "Use the contamination-filtered read maps for the purposes of annotating variants."
                    },
                    {
                        "sbg:altPrefix": "-jdk-deflater",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "use_jdk_deflater",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-jdk-deflater",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use JdkDeflater",
                        "doc": "Whether to use the JdkDeflater (as opposed to IntelDeflater)."
                    },
                    {
                        "sbg:altPrefix": "-jdk-inflater",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "use_jdk_inflater",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-jdk-inflater",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use JdkInflater",
                        "doc": "Whether to use the jdkinflater (as opposed to IntelInflater)."
                    },
                    {
                        "sbg:altPrefix": "-new-qual",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "use_new_qual_calculator",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "use_new_qual_calculator"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--use-new-qual-calculator",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use new qual calculator",
                        "doc": "Use the new AF model instead of the so-called exact model."
                    },
                    {
                        "sbg:altPrefix": "-old-qual",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "use_old_qual_calculator",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-old-qual-calculator",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use old qual calculator",
                        "doc": "Use the old AF model."
                    },
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--verbosity",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude genomic intervals",
                        "doc": "One or more genomic intervals to exclude from processing.",
                        "sbg:fileTypes": "INTERVAL_LIST"
                    },
                    {
                        "sbg:category": "Platform options",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job",
                        "doc": "Number of CPUs to be used per job."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "ambig_filter_bases",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-bases",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"AmbiguousBaseReadFilter\") != -1 &&\n        inputs.read_filter.indexOf(\"maxAmbiguousBaseFraction\") == -1){\n            return self\n        }\n    }\n}\n"
                        },
                        "label": "Ambig filter bases",
                        "doc": "Valid only if \"AmbiguousBaseReadFilter\" is specified:\nThreshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjuction with argument(s) maxAmbiguousBaseFraction."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "sbg:toolDefaultValue": "0.05",
                        "id": "ambig_filter_frac",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-frac",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"AmbiguousBaseReadFilter\") != -1 &&\n        inputs.read_filter.indexOf(\"maxAmbiguousBases\") == -1){\n            return self\n        }\n    }\n}\n"
                        },
                        "label": "Ambig filter frac",
                        "doc": "Valid only if \"AmbiguousBaseReadFilter\" is specified:\nThreshold fraction of ambiguous bases. Cannot be used in conjuction with argument(s) maxAmbiguousBases."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "sbg:toolDefaultValue": "1000000",
                        "id": "max_fragment_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-fragment-length",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"FragmentLengthReadFilter\") != -1){\n            return self\n        }\n    }\n}\n"
                        },
                        "label": "Max fragment length",
                        "doc": "Valid only if \"FragmentLengthReadFilter\" is specified:\nMaximum length of fragment (insert size)."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "library",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"LibraryReadFilter\") != -1){\n            return '--library ' + self.join(' --library ')\n        }\n    }\n}\n\n"
                        },
                        "label": "Library",
                        "doc": "Valid only if \"LibraryReadFilter\" is specified:\nName of the library to keep. This argument must be specified at least once."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "sbg:toolDefaultValue": "false",
                        "id": "dont_require_soft_clips_both_ends",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-require-soft-clips-both-ends",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"OverclippedReadFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Do not require soft clips",
                        "doc": "Valid only if \"OverclippedReadFilter\" is specified:\nAllow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "sbg:toolDefaultValue": "30",
                        "id": "filter_too_short",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--filter-too-short",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"OverclippedReadFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Filter too short",
                        "doc": "Valid only if \"OverclippedReadFilter\" is specified:\nMinimum number of aligned bases."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "platform_filter_name",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"PlatformReadFilter\") != -1){\n            return \"--platform-filter-name \" + self.join(' --platform-filter-name ')\n        }\n    }\n}\n\n"
                        },
                        "label": "Platform filter name",
                        "doc": "Valid only if \"PlatformReadFilter\" is specified:\nPlatform attribute (PL) to match.  This argument must be specified at least once."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "black_listed_lanes",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"PlatformUnitReadFilter\") != -1){\n            return \"--black-listed-lanes \" + self.join(' --black-listed-lanes ')\n        }\n    }\n}\n\n"
                        },
                        "label": "Black listed lanes",
                        "doc": "Valid only if \"PlatformUnitReadFilter\" is specified:\nPlatform unit (PU) to filter out. This argument must be specified at least once."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "read_group_black_list",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"ReadGroupBlackListReadFilter\") != -1){\n            return \"--read-group-black-list \" + self.join(' --read-group-black-list ')\n        }\n    }\n}\n\n"
                        },
                        "label": "Read group black list",
                        "doc": "Valid only if \"ReadGroupBlackListReadFilter\" is specified:\nThe name of the read group to filter out. This argument must be specified at least once."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "keep_read_group",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--keep-read-group",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"ReadGroupReadFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Keep read group",
                        "doc": "Valid only if \"ReadGroupReadFilter\" is specified:\nThe name of the read group to keep."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "max_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-read-length",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"ReadLengthReadFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Max read length",
                        "doc": "Valid only if \"ReadLengthReadFilter\" is specified:\nKeep only reads with length at most equal to the specified value."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "sbg:toolDefaultValue": "1",
                        "id": "min_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-read-length",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"ReadLengthReadFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Min read length",
                        "doc": "Valid only if \"ReadLengthReadFilter\" is specified:\nKeep only reads with length at least equal to the specified value."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "read_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-name",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"ReadNameReadFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Read name",
                        "doc": "Valid only if \"ReadNameReadFilter\" is specified:\nKeep only reads with this read name."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "sbg:toolDefaultValue": "false",
                        "id": "keep_reverse_strand_only",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--keep-reverse-strand-only",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"ReadStrandFilter\") != -1){\n            return self\n        }\n    }\n}"
                        },
                        "label": "Keep reverse strand only",
                        "doc": "Valid only if \"ReadStrandFilter\" is specified:\nKeep only reads on the reverse strand."
                    },
                    {
                        "sbg:category": "Conditional Arguments for read-filter option",
                        "id": "sample",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    if(self && inputs.read_filter){\n        if(inputs.read_filter.indexOf(\"SampleReadFilter\") != -1){\n            return \"--sample \" + self.join(' --sample ')\n        }\n    }\n}\n\n"
                        },
                        "label": "Sample",
                        "doc": "Valid only if \"SampleReadFilter\" is specified:\nThe name of the sample(s) to keep, filtering out all others  This argument must be specified at least once."
                    },
                    {
                        "sbg:category": "Required Arguments",
                        "sbg:toolDefaultValue": "vcf",
                        "id": "output_extension",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "vcf",
                                    "vcf.gz"
                                ],
                                "name": "output_extension"
                            }
                        ],
                        "label": "Output VCF extension",
                        "doc": "Output VCF extension.",
                        "default": "vcf"
                    }
                ],
                "outputs": [
                    {
                        "id": "out_variants",
                        "doc": "A raw, unfiltered, highly specific callset in VCF format.",
                        "label": "VCF output",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "${ return [\"*.vcf\", \"*.vcf.gz\"]}",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "secondaryFiles": [
                            "${ \n    return [self.basename+\".tbi\", self.nameroot + \".tbi\",\n            self.basename+\".idx\", self.nameroot + \".idx\"]\n}"
                        ],
                        "sbg:fileTypes": "VCF"
                    },
                    {
                        "id": "out_alignments",
                        "doc": "Assembled haplotypes.",
                        "label": "BAM output",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "${\n    if(inputs.bam_output){\n        return inputs.bam_output\n    }\n}",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        },
                        "secondaryFiles": [
                            "^.bai"
                        ],
                        "sbg:fileTypes": "BAM"
                    },
                    {
                        "id": "out_graph",
                        "doc": "Assembly graph information.",
                        "label": "Graph output",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "${\n    if(inputs.graph_output){\n        return inputs.graph_output\n    }\n}",
                            "outputEval": "$(inheritMetadata(self, inputs.in_alignments))"
                        }
                    }
                ],
                "doc": "Call germline single nucleotide polymorphisms (SNPs) and indels via local re-assembly of haplotypes. To call SNPs and indels, **HaplotypeCaller** requires BAM file(s) containing reads aligned to the reference genome.\n\n**HaplotypeCaller** is capable of calling SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region. In other words, whenever the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. Reassembled reads are realigned to the reference. This allows **HaplotypeCaller** to be more accurate when calling regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. It also makes **HaplotypeCaller** much better at calling indels than position-based callers like UnifiedGenotyper.\n\nIn the GVCF workflow used for scalable variant calling in DNA sequence data, **HaplotypeCaller** runs per-sample to generate an intermediate GVCF (not to be used in final analysis), which can then be used in GenotypeGVCFs for joint genotyping of multiple samples in a very efficient way. The GVCF workflow enables rapid incremental processing of samples as they roll off the sequencer, as well as scaling to very large cohort sizes. \n\nIn addition, **HaplotypeCaller** is able to handle non-diploid organisms as well as pooled experiment data. Note however that the algorithms used to calculate variant likelihoods are not well suited to extreme allele frequencies (relative to ploidy) so its use is not recommended for somatic (cancer) variant discovery. For that purpose, use **Mutect2** instead.\n\nFinally, **HaplotypeCaller** is also able to correctly handle splice junctions that make RNAseq a challenge for most variant callers.\n\n*A list of **all inputs and parameters** with corresponding descriptions can be found at the bottom of this page.*\n\n### Common Use Cases\n\n- Call variants individually on each sample in GVCF mode\n\n```\n gatk --java-options \"-Xmx4g\" HaplotypeCaller  \\\n   -R Homo_sapiens_assembly38.fasta \\\n   -I input.bam \\\n   -O output.g.vcf.gz \\\n   -ERC GVCF\n```\n\n\n- Call variants individually on each sample in GVCF mode with allele-specific annotations. [Here](https://software.broadinstitute.org/gatk/documentation/article?id=9622) you can read more details about allele-specific annotation and filtering.\n\n```\ngatk --java-options \"-Xmx4g\" HaplotypeCaller  \\\n   -R Homo_sapiens_assembly38.fasta \\\n   -I input.bam \\\n   -O output.g.vcf.gz \\\n   -ERC GVCF \\\n   -G Standard \\\n   -G AS_Standard\n```\n\n\n- Call variants with [bamout](https://software.broadinstitute.org/gatk/documentation/article?id=5484) to show realigned reads. After performing a local reassembly and realignment the reads get moved to different mapping positions than what you can observe in the original BAM file. This option could be used to visualize what rearrangements **HaplotypeCaller** has made.\n\n```\n gatk --java-options \"-Xmx4g\" HaplotypeCaller  \\\n   -R Homo_sapiens_assembly38.fasta \\\n   -I input.bam \\\n   -O output.vcf.gz \\\n   -bamout bamout.bam\n```\n\n\n### Common issues and important notes\n\n- If **Read filter** (`--read-filter`) option is set to \"LibraryReadFilter\", **Library** (`--library`) option must be set to some value.\n- If **Read filter** (`--read-filter`) option is set to \"PlatformReadFilter\", **Platform filter name** (`--platform-filter-name`) option must be set to some value.\n- If **Read filter** (`--read-filter`) option is set to\"PlatformUnitReadFilter\", **Black listed lanes** (`--black-listed-lanes`) option must be set to some value. \n- If **Read filter** (`--read-filter`) option is set to \"ReadGroupBlackListReadFilter\", **Read group black list** (`--read-group-black-list`) option must be set to some value.\n- If **Read filter** (`--read-filter`) option is set to \"ReadGroupReadFilter\", **Keep read group** (`--keep-read-group`) option must be set to some value.\n- If **Read filter** (`--read-filter`) option is set to \"ReadLengthReadFilter\", **Max read length** (`--max-read-length`) option must be set to some value.\n- If **Read filter** (`--read-filter`) option is set to \"ReadNameReadFilter\", **Read name** (`--read-name`) option must be set to some value.\n- If **Read filter** (`--read-filter`) option is set to \"ReadStrandFilter\", **Keep reverse strand only** (`--keep-reverse-strand-only`) option must be set to some value.\n- If **Read filter** (`--read-filter`) option is set to \"SampleReadFilter\", **Sample** (`--sample`) option must be set to some value.\n- When working with PCR-free data, be sure to set **PCR indel model** (`--pcr_indel_model`) to NONE.\n- When running **Emit ref confidence** ( `--emit-ref-confidence`) in GVCF or in BP_RESOLUTION mode, the confidence threshold is automatically set to 0. This cannot be overridden by the command line. The threshold can be set manually to the desired level when using **GenotypeGVCFs**.\n- It is recommended to use a list of intervals to speed up the analysis. See [this document](https://software.broadinstitute.org/gatk/documentation/article?id=4133) for details.\n\n### Changes Introduced by Seven Bridges\n\n- **Include intervals** (`--intervals`) option is divided into **Include genomic intervals** and **Intervals string values** options.\n- **Exclude intervals** (`--exclude-intervals`) option is divided into **Exclude genomic intervals** and **Exclude intervals string values** options.\n- Using the **Output prefix** parameter you can set the name of the VCF output. If this value is not set the output name will be generated based on **Sample ID** metadata value from one of the input BAM files. If **Sample ID** value is not set the name will be inherited from one of the input BAM file names.\n\n### Performance Benchmarking\n\nBelow is a table describing the runtimes and task costs for a couple of samples with different file sizes.\n\n| Experiment type |  Input size | Paired-end | # of reads | Read length | Duration |  Cost (spot) | Cost (on-demand) | AWS instance type |\n|:--------------:|:------------:|:--------:|:-------:|:---------:|:----------:|:------:|:------:|:------:|\n|     RNA-Seq     | 2.6 GB |     Yes    |     16M     |     101     |   50min   | 0.22$ | 0.44$ | c4.2xlarge |\n|     RNA-Seq     | 7.7 GB |     Yes    |     50M     |     101     |   1h31min   | 0.40$ | 0.87$ | c4.2xlarge |\n|     RNA-Seq     | 12.7 GB |     Yes    |     82M    |     101     |  2h19min  | 0.61$ | 1.22$ | c4.2xlarge |\n|     RNA-Seq     | 25 GB |     Yes    |     164M    |     101     |  4h5min  | 1.07$ | 2.43 | c4.2xlarge |",
                "label": "GATK HaplotypeCaller",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--java-options"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.mem_per_job) {\n        return '\\\"-Xmx'.concat(inputs.mem_per_job, 'M') + '\\\"'\n    } else {\n        // this is required for Best Practice GATK RNA-seq workflow\n        return '\\\"-Xms6000m\\\"'\n    }\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "HaplotypeCaller"
                    },
                    {
                        "prefix": "--output",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    // if output parameter is set, return output file name\n    if(inputs.output_prefix && inputs.output_extension){\n        return inputs.output_prefix + '.' + inputs.output_extension\n    } else {\n        // determine output file extenstion\n        var out_ext;\n        if(inputs.emit_ref_confidence == 'GVCF' && inputs.output_extension){\n            out_ext = '.g.' + inputs.output_extension\n        } else {\n            out_ext = '.' + inputs.output_extension\n        }\n        var in_prefix;\n        var in_num = [].concat(inputs.in_alignments).length;\n        // create output file name if there is one input file\n        if(in_num == 1){\n            var in_align = [].concat(inputs.in_alignments)[0]\n            // check if the sample_id metadata value is defined for the input file\n            if(in_align.metadata && in_align.metadata.sample_id){\n                in_prefix = in_align.metadata.sample_id\n            // if sample_id is not defined\n            } else {\n                in_prefix = [].concat(inputs.in_alignments)[0].nameroot\n            }\n            return in_prefix + out_ext\n        }\n        // create output file name if there are more than one input files\n        else if(in_num > 1){\n            var in_align = [].concat(inputs.in_alignments);\n            var in_sample_ids = [];\n            var in_align_names = [];\n            for (i = 0; i < in_align.length; i++) {\n                // check if the sample_id metadata value is defined for the input file\n                if(in_align[i].metadata && in_align[i].metadata.sample_id){\n                    in_sample_ids.push(in_align[i].metadata.sample_id)\n                }\n                in_align_names.push(in_align[i].nameroot)\n            }\n            if(in_sample_ids.length != 0){\n                in_prefix = in_sample_ids.sort()[0]\n            // if sample_id is not defined\n            } else {\n                in_prefix = in_align_names.sort()[0]\n            }\n            return in_prefix + '.' + in_num + out_ext\n        }\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  var memory = 6500;\n  \n  if(inputs.mem_per_job){\n  \t memory = inputs.mem_per_job\n  }\n  if(inputs.mem_overhead_per_job){\n\treturn memory + inputs.mem_overhead_per_job  \n  }\n  else{\n  \treturn memory\n  }\n}",
                        "coresMin": "${\n    if(inputs.cpu_per_job){\n        return inputs.cpu_per_job\n    } else {\n        return 1\n    }\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefan_stojanovic/gatk:4.1.0.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};",
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "Genomics",
                    "Variant Calling"
                ],
                "sbg:image_url": null,
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:links": [
                    {
                        "id": "https://www.broadinstitute.org/gatk/index.php",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/releases/download/4.0.12.0/gatk-4.0.12.0.zip",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.biorxiv.org/content/10.1101/201178v3",
                        "label": "Publication"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/org_broadinstitute_hellbender_tools_walkers_haplotypecaller_HaplotypeCaller.php",
                        "label": "Documentation"
                    }
                ],
                "sbg:projectName": "GATK 4.1.0.0 - Demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "uros_sipetic",
                        "sbg:modifiedOn": 1553086627,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-haplotypecaller-4-1-0-0/4"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "uros_sipetic",
                        "sbg:modifiedOn": 1553105347,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-haplotypecaller-4-1-0-0/8"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554720901,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-haplotypecaller-4-1-0-0/13"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554730721,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-haplotypecaller-4-1-0-0/14"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554999234,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-haplotypecaller-4-1-0-0/15"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:toolkit": "GATK",
                "sbg:toolkitVersion": "4.1.0.0",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-haplotypecaller-4-1-0-0/4",
                "sbg:revision": 4,
                "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-haplotypecaller-4-1-0-0/15",
                "sbg:modifiedOn": 1554999234,
                "sbg:modifiedBy": "veliborka_josipovic",
                "sbg:createdOn": 1553086627,
                "sbg:createdBy": "uros_sipetic",
                "sbg:project": "uros_sipetic/gatk-4-1-0-0-demo",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "uros_sipetic",
                    "veliborka_josipovic"
                ],
                "sbg:latestRevision": 4,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a8f06bed471c8d15f446c29e03326cf47a7828c2f286ca923e7e6fc199978bf6b",
                "sbg:copyOf": "veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-haplotypecaller-4-1-0-0/15"
            },
            "label": "GATK HaplotypeCaller",
            "scatter": [
                "in_alignments",
                "include_intervals"
            ],
            "sbg:x": 2206.9072265625,
            "sbg:y": -236.69577026367188
        },
        {
            "id": "mergevcfs",
            "in": [
                {
                    "id": "input",
                    "source": [
                        "gatk4_genotypegvcfs/vcf"
                    ]
                }
            ],
            "out": [
                {
                    "id": "output"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/mergevcfs/7",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Required Arguments",
                        "sbg:altPrefix": "-I",
                        "id": "input",
                        "type": "File[]",
                        "label": "Input",
                        "doc": "VCF input files File format is determined by file extension. This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "sbg:category": "Optional Arguments",
                        "id": "compression_level",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--COMPRESSION_LEVEL",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Compression Level",
                        "doc": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5."
                    },
                    {
                        "sbg:toolDefaultValue": "true",
                        "sbg:category": "Optional Arguments",
                        "id": "create_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--CREATE_INDEX",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Index",
                        "doc": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:category": "Optional Arguments",
                        "id": "create_md5_file",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--CREATE_MD5_FILE",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Md5 File",
                        "doc": "Whether to create an MD5 digest for any BAM or FASTQ files created. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:toolDefaultValue": "500000",
                        "sbg:category": "Optional Arguments",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--MAX_RECORDS_IN_RAM",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Records In Ram",
                        "doc": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000."
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:category": "Optional Arguments",
                        "id": "quiet",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--QUIET",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quiet",
                        "doc": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence file. Default value: null.",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "sbg:category": "Optional Arguments",
                        "id": "validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--VALIDATION_STRINGENCY",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Validation Stringency",
                        "doc": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:toolDefaultValue": "INFO",
                        "sbg:category": "Optional Arguments",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--VERBOSITY",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "do_not_clip_intervals",
                        "type": "boolean?",
                        "label": "Clip Intervals",
                        "doc": "Clip intervals name from output file name"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job in MB",
                        "doc": "Memory per job in MB."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per jobin MB",
                        "doc": "Memory overhead per job."
                    }
                ],
                "outputs": [
                    {
                        "id": "output",
                        "doc": "The merged VCF file. File format is determined by file extension.",
                        "label": "The merged VCF file.",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "${\n    inputs = [].concat(inputs.input)\n\n    if (inputs[0].path.endsWith('.gz'))\n        return '*.vcf.gz'\n    else\n        return '*.vcf'\n}",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.input)\n\n}"
                        },
                        "secondaryFiles": [
                            ".idx"
                        ],
                        "sbg:fileTypes": "VCF"
                    }
                ],
                "doc": "Merges multiple sorted VCF files into one VCF file. \n\n\n###**Common Use Cases**  \nThe most frequent use case is gathering and merging VCF files from HaplotypeCaller scatter jobs.\n\n###**Changes Introduced by Seven Bridges**\nName of the output VCF is given by searching for the common prefix in input VCF files.\n\n###**Common Issues and Important Notes**  \nInput files must be sorted by their contigs and, within contigs, by start position. The input files must have the same sample and contig lists. \n\nAn index file is created and a sequence dictionary is required by default.\n\nThrows IllegalArgumentException if the contig lists are not present in the input files, are not identical or if the sample lists are not the same;this class uses the GATK to merge headers, which may throw exceptions if the headers cannot be merged. See VCFUtils.smartMergeHeaders for details.\nAn index file is created for the output file by default. Using an output file name with a \".gz\" extension will create gzip-compressed output.",
                "label": "GATK MergeVcfs",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/usr/gitc/gatk4/gatk-launch"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--javaOptions"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n    return '\\\"-Xmx2048M\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "MergeVcfs"
                    },
                    {
                        "prefix": "--output",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    function find_prefix(variants) {\n        var prefix = ''\n        var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n\n        // Finds longest common prefix between variant names\n        for (var i = 1; i < variants.length; ++i) {\n            var j = 0;\n            var current = variants[i].path.replace(/^.*[\\\\\\/]/, '')\n\n            while (first[j] == current[j] &&\n                j < (first.length - 1) &&\n                j < (current.length - 1)) ++j\n\n            // Inits prefixs or shortens it\n            if (i == 1 || prefix.length > j)\n                prefix = first.slice(0, j)\n        }\n\n        // Clips trailing characters\n        while (prefix.endsWith('.') || prefix.endsWith('_') || prefix.endsWith('-'))\n            prefix = prefix.slice(0, prefix.length - 1)\n\n        return prefix\n    }\n\n\n    var variants = [].concat(inputs.input)\n\n    if (!inputs.do_not_clip_intervals && variants.length > 1) {\n        var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n\n        var extensions = ''\n\n        if (first.endsWith('.g.vcf'))\n            extensions = '.g.vcf'\n        else if (first.endsWith('.vcf'))\n            extensions = '.vcf'\n        else if (first.endsWith('.g.vcf.gz'))\n            extensions = '.g.vcf.gz'\n        else if (first.endsWith('.vcf.gz'))\n            extensions = '.vcf.gz'\n\n        var prefix = find_prefix(variants)\n\n        if (prefix.length > 0)\n            return prefix + extensions\n        else\n            return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n    } else\n        return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    inputs = inputs.input\n\n    cmd = []\n\n    for (i = 0; i < inputs.length; i++) {\n        cmd.push('--input', inputs[i].path)\n    }\n\n    return cmd.join(' ')\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "GATK-4"
                ],
                "sbg:cmdPreview": "/gatk/gatk --java-options \"-Xmx1M\" MergeVcfs --OUTPUT input-1.vcf  --INPUT /path/to/input-1.vcf --INPUT /path/to/input-2.vcf --INPUT /path/to/input-3.vcf",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolkitVersion": "4.beta.5",
                "sbg:toolkit": "GATK",
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
                        "label": "Documentation"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/download/",
                        "label": "Download"
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555340122,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555340735,
                        "sbg:revisionNotes": "latest docker images.sbgenomics.com/vladimirk/gatk:4.1.0.0"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555342780,
                        "sbg:revisionNotes": "docker and cmd"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555343344,
                        "sbg:revisionNotes": "prefixes fix"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555344275,
                        "sbg:revisionNotes": "description"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555346082,
                        "sbg:revisionNotes": "just added test files names"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555346366,
                        "sbg:revisionNotes": "do_not_clip_intervals instead clip_intervals"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555348454,
                        "sbg:revisionNotes": "add secondary .idx file for vcf output file"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/mergevcfs/7",
                "sbg:revision": 7,
                "sbg:revisionNotes": "add secondary .idx file for vcf output file",
                "sbg:modifiedOn": 1555348454,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1555340122,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "vladimirk_user",
                    "stefan_stojanovic",
                    "vladimirk"
                ],
                "sbg:latestRevision": 7,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "aa536579339082f69a64d3b1bf5df1c3a2c916b480796122d685b951826fea402"
            },
            "label": "GATK MergeVcfs",
            "sbg:x": 2531.0927734375,
            "sbg:y": -408.2152099609375
        },
        {
            "id": "gatk_validatevariants",
            "in": [
                {
                    "id": "variant",
                    "source": "mergevcfs/output"
                },
                {
                    "id": "dbsnp",
                    "source": "dbsnp"
                },
                {
                    "id": "intervals",
                    "source": "wgs_calling_interval_lists"
                },
                {
                    "id": "reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "validationTypeToExclude",
                    "default": [
                        "ALLELES"
                    ]
                }
            ],
            "out": [
                {
                    "id": "status"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "stefan_stojanovic/gatk-4-0-dev/gatk-validatevariants/4",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "--variant",
                        "sbg:category": "Required Arguments",
                        "id": "variant",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "-V",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Variant",
                        "doc": "A VCF file containing variants  Required.",
                        "sbg:fileTypes": "VCF, VCF.GZ"
                    },
                    {
                        "sbg:altPrefix": "-addOutputSAMProgramRecord",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "addOutputSAMProgramRecord",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--addOutputSAMProgramRecord",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Add Output Sam Program Record",
                        "doc": "If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible\n                              values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-addOutputVCFCommandLine",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "addOutputVCFCommandLine",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--addOutputVCFCommandLine",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Add Output Vcf Command Line",
                        "doc": "If true, adds a command line header line to created VCF files.  Default value: true.\n                              Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-CIPB",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "-1",
                        "id": "cloudIndexPrefetchBuffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloudIndexPrefetchBuffer",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Cloud Index Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to\n                              cloudPrefetchBuffer if unset.  Default value: -1."
                    },
                    {
                        "sbg:altPrefix": "-CPB",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "40",
                        "id": "cloudPrefetchBuffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloudPrefetchBuffer",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Cloud Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40."
                    },
                    {
                        "sbg:altPrefix": "-OBI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "createOutputBamIndex",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--createOutputBamIndex",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Create Output Bam Index",
                        "doc": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default\n                              value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-OBM",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "createOutputBamMD5",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--createOutputBamMD5",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Create Output Bam Md5",
                        "doc": "If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.\n                              Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "createOutputVariantIndex",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--createOutputVariantIndex",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Create Output Variant Index",
                        "doc": "If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:\n                              true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-OVM",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "createOutputVariantMD5",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--createOutputVariantMD5",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Create Output Variant Md5",
                        "doc": "If true, create a a MD5 digest any VCF file created.  Default value: false. Possible\n                              values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-D",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": null,
                        "id": "dbsnp",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--dbsnp",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Dbsnp",
                        "doc": "DbSNP file  Default value: null.",
                        "secondaryFiles": [
                            ".idx"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disableBamIndexCaching",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disableBamIndexCaching",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Disable Bam Index Caching",
                        "doc": "If true, don't cache bam indexes, this will reduce memory requirements but may harm\n                              performance if many intervals are specified.  Caching is automatically disabled if there\n                              are no intervals specified.  Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-DF",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "disableReadFilter",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--disableReadFilter",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Disable Read Filter",
                        "doc": "Filters to be disabled before analysis  This argument may be specified 0 or more\n                              times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-disableSequenceDictionaryValidation",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disableSequenceDictionaryValidation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disableSequenceDictionaryValidation",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Disable Sequence Dictionary Validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility.\n                              Use at your own risk!  Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-disableToolDefaultReadFilters",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disableToolDefaultReadFilters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disableToolDefaultReadFilters",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Disable Tool Default Read Filters",
                        "doc": "Disable all tool default read filters  Default value: false. Possible values: {true,\n                              false}."
                    },
                    {
                        "sbg:altPrefix": "-doNotValidateFilteredRecords",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "doNotValidateFilteredRecords",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "doNotValidateFilteredRecords"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--doNotValidateFilteredRecords",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Do Not Validate Filtered Records",
                        "doc": "Skip validation on filtered records  Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": null,
                        "id": "excludeIntervals",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--excludeIntervals",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Exclude Intervals",
                        "doc": "One or more genomic intervals to exclude from processing  This argument may be specified 0\n                              or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-I",
                        "sbg:category": "Optional Arguments",
                        "id": "input",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--input",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Input",
                        "doc": "BAM/SAM/CRAM file containing reads  This argument may be specified 0 or more times.\n                              Default value: null.",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "secondaryFiles": [
                            ".bai"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval_exclusion_padding",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Interval Exclusion Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval_padding",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Interval Padding",
                        "doc": "Of padding (in bp) to add to each interval you are including.  Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "UNION",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval_set_rule",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Interval Set Rule",
                        "doc": "Set merging approach to use for combining interval inputs  Default value: UNION. Possible\n                              values: {UNION, INTERSECTION}."
                    },
                    {
                        "sbg:altPrefix": "--intervals",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": null,
                        "id": "intervals",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "-L",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Intervals",
                        "doc": "One or more genomic intervals over which to operate  This argument may be specified 0 or\n                              more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "lenient",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--lenient",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Lenient",
                        "doc": "Lenient processing of VCF files  Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "-RF",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "readFilter",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--readFilter",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Read Filter",
                        "doc": "Read filters to be applied before analysis  This argument may be specified 0 or more\n                              times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-readIndex",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "readIndex",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--readIndex",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Read Index",
                        "doc": "Indices to use for the read inputs. If specified, an index must be provided for every read\n                              input and in the same order as the read inputs. If this argument is not specified, the\n                              path to the index for each input will be inferred automatically.  This argument may be\n                              specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-VS",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "SILENT",
                        "id": "readValidationStringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "readValidationStringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--readValidationStringency",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Read Validation Stringency",
                        "doc": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default\n                              stringency value SILENT can improve performance when processing a BAM file in which\n                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default\n                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:altPrefix": "--reference",
                        "sbg:category": "Optional Arguments",
                        "id": "reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "-R",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Reference",
                        "doc": "Reference sequence  Default value: null.",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-secondsBetweenProgressUpdates",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "10",
                        "id": "secondsBetweenProgressUpdates",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--secondsBetweenProgressUpdates",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Seconds Between Progress Updates",
                        "doc": "Output traversal statistics every time this many seconds elapse  Default value: 10.0."
                    },
                    {
                        "sbg:altPrefix": "-sequenceDictionary",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "sequenceDictionary",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sequenceDictionary",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Sequence Dictionary",
                        "doc": "Use the given sequence dictionary as the master/canonical sequence dictionary.  Must be a\n                              .dict file.  Default value: null."
                    },
                    {
                        "sbg:altPrefix": "-Xtype",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": null,
                        "id": "validationTypeToExclude",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "validationTypeToExclude",
                                    "symbols": [
                                        "ALL",
                                        "REF",
                                        "IDS",
                                        "ALLELES",
                                        "CHR_COUNTS"
                                    ]
                                }
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--validation-type-to-exclude",
                            "itemSeparator": " --validationTypeToExclude ",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Validation Type To Exclude",
                        "doc": "Which validation type to exclude from a full strict validation  This argument may be\n                              specified 0 or more times. Default value: null. Possible values: {ALL, REF, IDS, ALLELES,\n                              CHR_COUNTS}."
                    },
                    {
                        "sbg:altPrefix": "-verbosity",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--verbosity",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,\n                              INFO, DEBUG}."
                    },
                    {
                        "sbg:altPrefix": "-warnOnErrors",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "warnOnErrors",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--warnOnErrors",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Warn On Errors",
                        "doc": "Just emit warnings on errors instead of terminating the run at the first instance  Default\n                              value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory Per Job",
                        "doc": "Memory Per Job"
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Reserves memory at scheduler by not passing it to java virtual machine to permit draining all memory from the instance."
                    },
                    {
                        "id": "validate_gvcf",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "-gvcf",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Validate GVCF",
                        "doc": "Validate this file as a GVCF  Default value: false. Possible values: {true, false}"
                    }
                ],
                "outputs": [
                    {
                        "id": "status",
                        "doc": "VCF validation status message. Can be: PASS or FAIL.",
                        "label": "Status",
                        "type": "string?",
                        "outputBinding": {
                            "loadContents": true,
                            "glob": "status_code.txt",
                            "outputEval": "${\n    code = self[0].contents[0]\n\n    if (code == '0')\n        return 'PASS'\n    else\n        return 'FAIL'\n}"
                        }
                    }
                ],
                "doc": "Validates a VCF file with an extra strict set of criteria.\n\n###Description\n\nThis tool is designed to validate the correctness of the formatting of VCF files. In addition to standard adherence to the VCF specification, this tool performs extra strict validations to ensure that the information contained within the file is correctly encoded. These include:\n\n - **REF** - correctness of the reference base(s)\n - **CHR_COUNTS** - accuracy of AC and AN values\n - **IDS** - tests against rsIDs when a dbSNP file is provided (requires a dbsnp VCF provided via `--dbsnp`).\n - **ALLELES** - that all alternate alleles are present in at least one sample\n\nBy default the tool applies all the strict validations unless you indicate which one you want you want to exclude using `--validationTypeToExclude`. You can exclude as many types as you want. You can exclude all strict validations with the special code `ALL`. In this case the tool will only test for adherence to the VCF specification.\n\n\n### Common Use Cases \n\nTo perform VCF format and all strict validations:\n```\n    ./gatk-launch ValidateVariants \\\n       -R ref.fasta \\\n       -V input.vcf \\\n       --dbsnp dbsnp.vcf\n```\nTo perform only VCF format tests:\n```\n    ./gatk-launch ValidateVariants\n       -R ref.fasta \\\n       -V input.vcf \\\n       --validationTypeToExclude ALL\n```\nTo perform all validations except the strict **ALLELE** validation:\n```\n    ./gatk-launch ValidateVariants \\\n       -R ref.fasta \\\n       -V input.vcf \\\n       --validationTypeToExclude ALLELES \\\n       --dbsnp dbsnp.vcf\n```\n### Common Issues and Important Note\n\nBy default, the tool works only with VCF resource files. To use VCF.GZ resource files, the tool wrapper needs to be modified.",
                "label": "GATK ValidateVariants",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "/opt/gatk"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "--java-options"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xms'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n    return '\\\"-Xms3000M\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "ValidateVariants"
                    },
                    {
                        "shellQuote": false,
                        "position": 105,
                        "valueFrom": "; echo $? > status_code.txt"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/gatk:4.0.11.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "GATK-4.0"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "/gatk/gatk --java-options \"-Xms3000M\" ValidateVariants -V /path/to/variant.vcf  ; echo $? > status_code.txt",
                "sbg:toolkitVersion": "4.0.0.0",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://software.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/gatk"
                    },
                    {
                        "label": "Download",
                        "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://software.broadinstitute.org/gatk/gatkdocs/4.beta.6/"
                    }
                ],
                "sbg:toolkit": "GATK 4.0",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK 4.0.11.0 Toolkit Dev",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555346117,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/gatk-validatevariants/13"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555346324,
                        "sbg:revisionNotes": "change docker image to images.sbgenomics.com/vladimirk/gatk:4.0.11.0"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555346441,
                        "sbg:revisionNotes": "change intervals input type to file"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555347223,
                        "sbg:revisionNotes": "update base command line"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555347882,
                        "sbg:revisionNotes": "fix prefix for --validation-type-to-exclude"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "stefan_stojanovic/gatk-4-0-dev/gatk-validatevariants/4",
                "sbg:revision": 4,
                "sbg:revisionNotes": "fix prefix for --validation-type-to-exclude",
                "sbg:modifiedOn": 1555347882,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1555346117,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "stefan_stojanovic/gatk-4-0-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 4,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a42617fb323eddf893e2f1a89f37c0edc3aaaa9cd6d58095de74f0ce1a064b9cf"
            },
            "label": "ValidateVCF",
            "sbg:x": 2916.975830078125,
            "sbg:y": -321
        },
        {
            "id": "picard_collectvariantcallingmetrics",
            "in": [
                {
                    "id": "input_vcf",
                    "source": "mergevcfs/output"
                },
                {
                    "id": "dbSNP_file",
                    "source": "dbsnp"
                },
                {
                    "id": "target_intervals",
                    "source": "wgs_evaluation_interval_list"
                },
                {
                    "id": "sequence_dictionary",
                    "source": "ref_dict"
                }
            ],
            "out": [
                {
                    "id": "summary_metrics"
                },
                {
                    "id": "detail_metrics"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectvariantcallingmetrics/2",
                "baseCommand": [
                    "java"
                ],
                "inputs": [
                    {
                        "id": "input_vcf",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 7
                        },
                        "label": "Input vcf file for analysis",
                        "doc": "Input vcf file for analysis.",
                        "sbg:fileTypes": "VCF",
                        "secondaryFiles": [
                            ".idx"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "none",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "output file prefix name",
                        "doc": "Prefix of the output file name."
                    },
                    {
                        "id": "dbSNP_file",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "DBSNP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 9
                        },
                        "label": "Reference dbSNP file",
                        "doc": "Reference dbSNP file in dbSNP or VCF format",
                        "sbg:fileTypes": "dbSNP, VCF"
                    },
                    {
                        "id": "target_intervals",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "TI=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Target intervals",
                        "doc": "Target intervals to restrict analysis to.",
                        "sbg:fileTypes": "BED, INTERVALS"
                    },
                    {
                        "id": "sequence_dictionary",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "SD=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Sequence dictionary",
                        "doc": "Sequence dictionary file.",
                        "sbg:fileTypes": "DICT"
                    },
                    {
                        "sbg:toolDefaultValue": "False",
                        "id": "gvcf_input",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "gvcf_input"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "GVCF_INPUT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 12
                        },
                        "label": "Single-sample gvcf",
                        "doc": "Set to true if running on a single-sample gvcf.  Default value: false."
                    },
                    {
                        "sbg:toolDefaultValue": "1",
                        "id": "thread_count",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "THREAD_COUNT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 13
                        },
                        "label": "Thread count",
                        "doc": "Thread count."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Reserves memory at scheduler by not passing it to java virtual machine to permit draining all memory from the instance."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs."
                    }
                ],
                "outputs": [
                    {
                        "id": "summary_metrics",
                        "doc": "A collection of metrics relating to snps and indels.",
                        "label": "Summary metrics",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.variant_calling_summary_metrics",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.input_vcf)\n\n}"
                        },
                        "sbg:fileTypes": "VARIANT_CALLING_SUMMARY_METRICS"
                    },
                    {
                        "id": "detail_metrics",
                        "doc": "Detail metrics.",
                        "label": "Detail metrics",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.variant_calling_detail_metrics"
                        },
                        "sbg:fileTypes": "VARIANT_CALLING_DETAIL_METRICS"
                    }
                ],
                "doc": "Collects per-sample and aggregate (spanning all samples) metrics from the provided VCF file.\n\n\n###Description\nRequired Inputs:\n\n* **Input VCF**  - Input vcf file for analysis.\n* **dbSNP** - Reference dbSNP file in dbSNP or VCF format.\n\nOptional Inputs:\n* **Output filename** - Path (except for the file extension) of output metrics files to write.\n* **Target intervals** - Target intervals to restrict analysis to. Default value: null.\n* **Sequence dictionary** - If present, speeds loading of dbSNP file, will look for dictionary in vcf if not present here. Default value: null.\n* **GVCF input** - Set to true if running on a single-sample gvcf. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}\n* **Thread count** - Default value: 1. This option can be set to 'null' to clear the default value.\n\nOutputs:\n\n* **Metrics** -  Per-sample and aggregate (spanning all samples) metrics from the provided VCF file.",
                "label": "Picard CollectVariantCallingMetrics",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx2048M'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/usr/gitc/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "CollectVariantCallingMetrics"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 8,
                        "valueFrom": "${\n    if (inputs.output_prefix) {\n        return inputs.output_prefix + '.vcfMetrics'\n    } else if (inputs.input_vcf) {\n        if (inputs.input_vcf.metadata) {\n            if ('sample_id' in inputs.input_vcf.metadata) {\n                filename = inputs.input_vcf.metadata['sample_id']\n                return filename + \".vcfMetrics\"\n            }\n        } else {\n            filename = inputs.input_vcf.path\n            filebase = filename.split('.').slice(0, -1)\n            return filebase.concat(\"vcfMetrics\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n        }\n\n    }\n    return inputs.input_vcf.nameroot + '.vcfMetrics'\n}\n"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  if(inputs.memory_per_job){\n    if(inputs.memory_overhead_per_job){\n    \treturn inputs.memory_per_job + inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn inputs.memory_per_job\n  }\n  else if(!inputs.memory_per_job && inputs.memory_overhead_per_job){\n\t\treturn 2048 + inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                        "coresMin": "${\n    if (inputs.cpu_per_job) {\n        return inputs.cpu_per_job\n    }\n    return 1\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /usr/gitc/picard.jar CollectVariantCallingMetrics INPUT=/path/to/input_vcf.ext OUTPUT=input_vcf.vcfMetrics DBSNP=/path/to/dbSNP_file.ext",
                "sbg:toolkitVersion": "2.3.1",
                "sbg:toolkit": "Picard",
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555340661,
                        "sbg:revisionNotes": "Copy of vladimirk/gatk4-0-4-0-toolkit-dev/picard-collectvariantcallingmetrics/7"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555340773,
                        "sbg:revisionNotes": "change docker image to images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555350352,
                        "sbg:revisionNotes": "fix output naming expression"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/picard-collectvariantcallingmetrics/2",
                "sbg:revision": 2,
                "sbg:revisionNotes": "fix output naming expression",
                "sbg:modifiedOn": 1555350352,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1555340661,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 2,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a8f48107cb3128977bb4617d43a57cf1a6e231f15ecd46de2ab32dd1de3913e4b"
            },
            "label": "CollectVariantCallingMetrics",
            "sbg:x": 2925.15625,
            "sbg:y": -69.42192077636719
        },
        {
            "id": "picard_fastqtosam",
            "in": [
                {
                    "id": "fastq",
                    "source": [
                        "sbg_pair_fastqs_by_metadata/tuple_list"
                    ]
                },
                {
                    "id": "sample_name",
                    "default": "SAMPLE1",
                    "source": "sample_name"
                },
                {
                    "id": "library_name",
                    "default": "Lib",
                    "source": "library_name"
                },
                {
                    "id": "platform_unit",
                    "default": "1",
                    "source": "platform_unit"
                },
                {
                    "id": "platform",
                    "default": "Illumina",
                    "source": "platform"
                },
                {
                    "id": "output_format",
                    "default": "BAM"
                }
            ],
            "out": [
                {
                    "id": "alignment_file"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "stefan_stojanovic/gatk-germline-wf-dev/picard-fastqtosam/5",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "500000",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max records in RAM",
                        "doc": "When writing SAM files that need to be sorted, this attribute will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "5",
                        "id": "compression_level",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "COMPRESSION_LEVEL=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Compression level",
                        "doc": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "SILENT",
                        "id": "validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VALIDATION_STRINGENCY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (inputs.validation_stringency) {\n        return inputs.validation_stringency\n    } else {\n        return \"SILENT\"\n    }\n}"
                        },
                        "label": "Validation stringency",
                        "doc": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "False",
                        "id": "quiet",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "True",
                                    "False"
                                ],
                                "name": "quiet"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "QUIET=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quiet",
                        "doc": "This attribute suppresses job-summary info on System.err. Default value: False. This option can be set to 'null' to clear the default value. Possible values: {True, False}."
                    },
                    {
                        "sbg:altPrefix": "INFO",
                        "sbg:category": "Options",
                        "sbg:toolDefaultValue": "INFO",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "VERBOSITY=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:category": "Execution options",
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "Amount of RAM memory to be used per job. Defaults to 2048MB for single threaded jobs."
                    },
                    {
                        "sbg:category": "Input files",
                        "id": "fastq",
                        "type": "File[]?",
                        "label": "Fastq file",
                        "doc": "Input fastq file (optionally gzipped) for single end data, or first read in paired end data.",
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ"
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "quality_format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "Solexa",
                                    "Illumina",
                                    "Standard"
                                ],
                                "name": "quality_format"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "QUALITY_FORMAT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quality format",
                        "doc": "A value describing how the quality values are encoded in the input FASTQ file. Either Solexa (phred scaling + 66), Illumina (phred scaling + 64) or Standard (phred scaling + 33). If this value is not specified, the quality format will be detected automatically."
                    },
                    {
                        "sbg:category": "Parameters",
                        "sbg:toolDefaultValue": "A",
                        "id": "read_group_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "READ_GROUP_NAME=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read group name",
                        "doc": "Read group name."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "sample_name",
                        "type": "string?",
                        "label": "Sample name",
                        "doc": "Sample name to insert into the read group header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "library_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "LIBRARY_NAME=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Library name",
                        "doc": "The library name to place into the LB attribute in the read group header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "platform_unit",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "PLATFORM_UNIT=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Platform unit",
                        "doc": "The platform unit (often run_barcode.lane) to insert into the read group header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "platform",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "PLATFORM=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Platform",
                        "doc": "The platform type (e.g. illumina, solid) to insert into the read group header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "sequencing_center",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "SEQUENCING_CENTER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sequencing center",
                        "doc": "The sequencing center from which the data originated."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "predicted_insert_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "PREDICTED_INSERT_SIZE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Predicted insert size",
                        "doc": "Predicted median insert size, to insert into the read group header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "program_group",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "PROGRAM_GROUP=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Program group",
                        "doc": "Program group to insert into the read group header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "platform_model",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "PLATFORM_MODEL=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Platform model",
                        "doc": "Platform model to insert into the group header (free-form text providing further details of the platform/technology used)."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "comment",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "COMMENT=",
                            "itemSeparator": " COMMENT= ",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Comment",
                        "doc": "Comment(s) to include in the merged output file's header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "description",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "DESCRIPTION=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Description",
                        "doc": "Inserted into the read group header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "run_date",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "RUN_DATE=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Run date",
                        "doc": "Date the run was produced, to insert into the read group header."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "sort_order",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "unsorted",
                                    "queryname",
                                    "coordinate",
                                    "duplicate",
                                    "unknown"
                                ],
                                "name": "sort_order"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "SORT_ORDER=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sort order",
                        "doc": "The sort order for the output sam/bam file."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "min_q",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MIN_Q=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Q",
                        "doc": "Minimum quality allowed in the input fastq. An exception will be thrown if a quality is less than this value."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "max_q",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "MAX_Q=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Q",
                        "doc": "Maximum quality allowed in the input fastq. An exception will be thrown if a quality is greater than this value."
                    },
                    {
                        "sbg:category": "Parameters",
                        "sbg:toolDefaultValue": "false",
                        "id": "allow_and_ignore_empty_lines",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "allow_and_ignore_empty_lines"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "ALLOW_AND_IGNORE_EMPTY_LINES=",
                            "separate": false,
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Allow and ignore empty lines",
                        "doc": "Allow (and ignore) empty lines."
                    },
                    {
                        "sbg:category": "Parameters",
                        "id": "output_format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "SAM",
                                    "BAM"
                                ],
                                "name": "output_format"
                            }
                        ],
                        "label": "Output format",
                        "doc": "Output unaligned SAM file or unaligned BAM file."
                    }
                ],
                "outputs": [
                    {
                        "id": "alignment_file",
                        "doc": "Generated SAM file",
                        "label": "Alignment file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "{*.sam,*.bam}",
                            "outputEval": "${\n    if (inputs.fastq) {\n        return inheritMetadata(self, inputs.fastq)\n    }\n}"
                        },
                        "sbg:fileTypes": "BAM, SAM"
                    }
                ],
                "doc": "Converts a FASTQ file to an unaligned BAM or SAM file. This tool extracts read sequences and base qualities from the input FASTQ file and writes them out to a new file in unaligned BAM (uBAM) format. Read group information can be provided on the command line.\n\nThree versions of FASTQ quality scales are supported: FastqSanger, FastqSolexa and FastqIllumina (see http://maq.sourceforge.net/fastq.shtml for details). Input FASTQ files can be in GZip format (with .gz extension).",
                "label": "Picard FastqToSam",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '-Xmx'.concat(inputs.memory_per_job, 'M')\n    }\n    return '-Xmx2048M'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "-jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "/opt/picard.jar"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "FastqToSam"
                    },
                    {
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.fastq) {\n        ext = '.sam'\n        if (inputs.output_format && inputs.output_format == 'BAM') ext = '.bam'\n        tmp = inputs.fastq[0].path.split('/').pop().split('.')\n        tmp.pop()\n        tmp = tmp.join('.')\n        if (tmp.endsWith('1')) tmp = tmp.slice(0, -1)\n        if (tmp.endsWith('R') || tmp.endsWith('r')) tmp = tmp.slice(0, -1)\n        if (tmp.endsWith('.') || tmp.endsWith('_')) tmp = tmp.slice(0, -1)\n        return tmp + ext\n    }\n}"
                    },
                    {
                        "prefix": "",
                        "separate": false,
                        "shellQuote": false,
                        "position": 5,
                        "valueFrom": "${\n    if (inputs.fastq) {\n        // Set input reads in the correct order depending of the paired end from metadata\n        \n        // Set output file name\n        if(inputs.fastq[0] instanceof Array){\n        input_reads = inputs.fastq[0] // scatter mode\n        } else {\n        input_reads = inputs.fastq = [].concat(inputs.fastq)\n        }\n        \n        \n        //Read metadata for input reads\n        read_metadata = input_reads[0].metadata\n        if(!read_metadata) read_metadata = []\n        \n        order = 0 // Consider this as normal order given at input: pe1 pe2\n        \n        // Check if paired end 1 corresponds to the first given read\n        if(read_metadata == []){ order = 0 }\n        else if('paired_end' in  read_metadata){ \n        pe1 = read_metadata.paired_end\n        if(pe1 != 1) order = 1 // change order\n        }\n        \n        // Return reads in the correct order\n        if (input_reads.length == 1){\n        return 'FASTQ='+input_reads[0].path // Only one read present\n        }\n        else if (input_reads.length == 2){\n        if (order == 0) return 'FASTQ='+input_reads[0].path + ' FASTQ2='+input_reads[1].path\n        else return 'FASTQ='+input_reads[1].path + ' FASTQ2=' + input_reads[0].path\n        }\n    }\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": -1,
                        "valueFrom": "$(inputs.fastq ? 'java': 'echo java')"
                    },
                    {
                        "prefix": "SAMPLE_NAME=",
                        "separate": false,
                        "shellQuote": false,
                        "position": 5,
                        "valueFrom": "${\n    if (inputs.sample_name) {\n        return inputs.sample_name\n    } else if (inputs.fastq) {\n        if (inputs.fastq[0].metadata.sample_id) {\n            return inputs.fastq[0].metadata.sample_id\n        }\n    } else {\n        return 'SAMPLE1'\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        return inputs.memory_per_job\n    }\n    return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "eab0e70b6629",
                        "dockerPull": "images.sbgenomics.com/nikola_jovanovic/picard:2.9.2"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Converters"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard.jar FastqToSam FASTQ=/path/to/fastq_r1.fq SAMPLE_NAME=sample_name-string-value OUTPUT=fastq.sam",
                "sbg:toolkitVersion": "2.9.2",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/1.140"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:toolkit": "Picard",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "GATK Germline WF DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555418438,
                        "sbg:revisionNotes": "Copy of nikola_jovanovic/picard-2-9-2-demo/picard-fastqtosam/6"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555939138,
                        "sbg:revisionNotes": "Copy of nikola_jovanovic/picard-2-9-2-demo/picard-fastqtosam/6"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555941652,
                        "sbg:revisionNotes": "accept array of fastq files instead of single file"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556129708,
                        "sbg:revisionNotes": "add conditional execution"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556129953,
                        "sbg:revisionNotes": "add conditional metadata inheritance"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556130322,
                        "sbg:revisionNotes": "add expression to take sample_name from metadata, if not then set default SAMPLE1 value"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "stefan_stojanovic/gatk-germline-wf-dev/picard-fastqtosam/5",
                "sbg:revision": 5,
                "sbg:revisionNotes": "add expression to take sample_name from metadata, if not then set default SAMPLE1 value",
                "sbg:modifiedOn": 1556130322,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1555418438,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "stefan_stojanovic/gatk-germline-wf-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic",
                    "vladimirk"
                ],
                "sbg:latestRevision": 5,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a4d3b8622b424ae6f92089907c0f3cfccc367bbc9be02db31912e50a9e47e84d6"
            },
            "label": "Picard FastqToSam",
            "scatter": [
                "fastq"
            ],
            "sbg:x": -744.186767578125,
            "sbg:y": -142.60804748535156
        },
        {
            "id": "sbg_pair_fastqs_by_metadata",
            "in": [
                {
                    "id": "fastq_list",
                    "source": [
                        "fastq_list"
                    ]
                }
            ],
            "out": [
                {
                    "id": "tuple_list"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "stefan_stojanovic/gatk-germline-wf-dev/sbg-pair-fastqs-by-metadata/2",
                "baseCommand": [
                    "echo"
                ],
                "inputs": [
                    {
                        "id": "fastq_list",
                        "type": "File[]?",
                        "label": "List of FASTQ files",
                        "doc": "List of the FASTQ files with properly set metadata fileds.",
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ"
                    }
                ],
                "outputs": [
                    {
                        "id": "tuple_list",
                        "doc": "List of grouped FASTQ files by metadata fields.",
                        "label": "List of grouped FASTQ files",
                        "type": "File[]?",
                        "outputBinding": {
                            "outputEval": "${\n    function get_meta_map(m, file, meta) {\n        if (meta in file.metadata) {\n            return m[file.metadata[meta]]\n        } else {\n            return m['Undefined']\n        }\n    }\n\n    function create_new_map(map, file, meta) {\n        if (meta in file.metadata) {\n            map[file.metadata[meta]] = {}\n            return map[file.metadata[meta]]\n        } else {\n            map['Undefined'] = {}\n            return map['Undefined']\n        }\n    }\n    \n    if (inputs.fastq_list) {\n\n        arr = [].concat(inputs.fastq_list)\n        map = {}\n    \n        for (i in arr) {\n    \n            sm_map = get_meta_map(map, arr[i], 'sample_id')\n            if (!sm_map) sm_map = create_new_map(map, arr[i], 'sample_id')\n    \n            lb_map = get_meta_map(sm_map, arr[i], 'library_id')\n            if (!lb_map) lb_map = create_new_map(sm_map, arr[i], 'library_id')\n    \n            pu_map = get_meta_map(lb_map, arr[i], 'platform_unit_id')\n            if (!pu_map) pu_map = create_new_map(lb_map, arr[i], 'platform_unit_id')\n    \n            if ('file_segment_number' in arr[i].metadata) {\n                if (pu_map[arr[i].metadata['file_segment_number']]) {\n                    a = pu_map[arr[i].metadata['file_segment_number']]\n                    ar = [].concat(a)\n                    ar = ar.concat(arr[i])\n                    pu_map[arr[i].metadata['file_segment_number']] = ar\n                } else {\n                    pu_map[arr[i].metadata['file_segment_number']] = [].concat(arr[i])\n                }\n            } else {\n                if (pu_map['Undefined']) {\n                    a = pu_map['Undefined']\n                    ar = [].concat(a)\n                    ar = ar.concat(arr[i])\n                    pu_map['Undefined'] = ar\n                } else {\n                    pu_map['Undefined'] = [].concat(arr[i])\n                }\n            }\n        }\n        tuple_list = []\n        for (sm in map)\n            for (lb in map[sm])\n                for (pu in map[sm][lb]) {\n                    for (fsm in map[sm][lb][pu]) {\n                        list = map[sm][lb][pu][fsm]\n                        tuple_list.push(list)\n                    }\n                }\n        return tuple_list\n    }\n}"
                        },
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ"
                    }
                ],
                "doc": "Tool accepts list of FASTQ files groups them into separate lists. This grouping is done using metadata values and their hierarchy (Sample ID > Library ID > Platform unit ID > File segment number) which should create unique combinations for each pair of FASTQ files. Important metadata fields are Sample ID, Library ID, Platform unit ID and File segment number. Not all of these four metadata fields are required, but the present set has to be sufficient to create unique combinations for each pair of FASTQ files. Files with no paired end metadata are grouped in the same way as the ones with paired end metadata, generally they should be alone in a separate list. Files with no metadata set will be grouped together. \n\nIf there are more than two files in a group, this might create errors further down most pipelines and the user should check if the metadata fields for those files are set properly.",
                "label": "SBG Pair FASTQs by Metadata",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "'Pairing"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "FASTQs!'"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": 1024,
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "d41a0837ab81",
                        "dockerPull": "images.sbgenomics.com/nikola_jovanovic/alpine:1"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            "$(inputs.fastq_list)"
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:image_url": null,
                "sbg:license": "Apache License 2.0",
                "sbg:toolkit": "SBGTools",
                "sbg:cmdPreview": "echo 'Pairing FASTQs!'",
                "sbg:categories": [
                    "Converters",
                    "Other"
                ],
                "sbg:toolAuthor": "",
                "sbg:projectName": "GATK Germline WF DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555941665,
                        "sbg:revisionNotes": "Fix for outputEval evaluation failed. Changed map getting to map[a] instead of map.a"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556130712,
                        "sbg:revisionNotes": "un-require fastq_list input"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556131367,
                        "sbg:revisionNotes": "fix conditional execution"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "stefan_stojanovic/gatk-germline-wf-dev/sbg-pair-fastqs-by-metadata/2",
                "sbg:revision": 2,
                "sbg:revisionNotes": "fix conditional execution",
                "sbg:modifiedOn": 1556131367,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1555941665,
                "sbg:createdBy": "vladimirk",
                "sbg:project": "stefan_stojanovic/gatk-germline-wf-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic",
                    "vladimirk"
                ],
                "sbg:latestRevision": 2,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a39506f0c24ad1dd78eac872798493006fc2b3bf3eae638ef674f1bcdd380f9ec"
            },
            "label": "SBG Pair FASTQs by Metadata",
            "sbg:x": -948.0166015625,
            "sbg:y": -141.7046356201172
        },
        {
            "id": "sbg_flattenlists",
            "in": [
                {
                    "id": "input_list",
                    "source": [
                        "picard_fastqtosam/alignment_file",
                        "input_bams"
                    ]
                }
            ],
            "out": [
                {
                    "id": "output_list"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "stefan_stojanovic/sbg-flatten-lists-dev/sbg-flattenlists/1",
                "baseCommand": [
                    "echo",
                    "\"Output is no w a single list\""
                ],
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "description": "List of inputs, can be any combination of lists of files and single files, it will be combined into a single list of files at the output.",
                        "sbg:category": "File inputs",
                        "id": "input_list",
                        "type": "File[]?",
                        "label": "Input list of files and lists"
                    }
                ],
                "outputs": [
                    {
                        "id": "output_list",
                        "label": "Output list of files",
                        "type": "File[]?",
                        "outputBinding": {
                            "outputEval": "${\n    function flatten(files){\n        var a = [];\n      \tfor(var i=0;i<files.length;i++){\n        \tif(files[i]){\n          \t\tif(files[i].constructor == Array) a = a.concat(flatten(files[i]));\n          \t\telse a = a.concat(files[i]);\n        \t}\n      \t}\n      \treturn a\n    }\n           \n    if (inputs.input_list) {\n\t    var arr = [].concat(inputs.input_list);\n        var return_array = [];\n        return_array = flatten(arr);\n        return return_array\n    }\n}"
                        },
                        "description": "Single list of files that combines all files from all inputs."
                    }
                ],
                "label": "SBG FlattenLists",
                "requirements": [
                    {
                        "class": "ExpressionEngineRequirement",
                        "requirements": [
                            {
                                "dockerPull": "rabix/js-engine",
                                "class": "DockerRequirement"
                            }
                        ],
                        "id": "#cwl-js-engine"
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:CPURequirement",
                        "value": 1
                    },
                    {
                        "class": "sbg:MemRequirement",
                        "value": 1000
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/nikola_jovanovic/alpine:1"
                    }
                ],
                "sbg:toolkitVersion": "1.0",
                "sbg:job": {
                    "allocatedResources": {
                        "cpu": 1,
                        "mem": 1000
                    },
                    "inputs": {
                        "input_list": [
                            {
                                "path": "/path/to/input_list-1.ext",
                                "size": 0,
                                "secondaryFiles": [],
                                "class": "File"
                            },
                            {
                                "path": "/path/to/input_list-2.ext",
                                "size": 0,
                                "secondaryFiles": [],
                                "class": "File"
                            }
                        ]
                    }
                },
                "sbg:toolkit": "SBGTools",
                "sbg:toolAuthor": "Seven Bridges",
                "sbg:categories": [
                    "Other"
                ],
                "sbg:license": "Apache License 2.0",
                "sbg:image_url": null,
                "sbg:cmdPreview": "echo \"Output is now a single list\"",
                "sbg:projectName": "SBG Flatten Lists DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556104838,
                        "sbg:revisionNotes": "Copy of bix-demo/sbgtools-demo/sbg-flattenlists/10"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1556111011,
                        "sbg:revisionNotes": "convert to CWL v1.0"
                    }
                ],
                "abg:revisionNotes": "Description and docker image update.",
                "description": "SBG FlattenLists is used as a proprietary tool for combining different types of File and arrays of File into a single array of File type.\n\nThe **SBG FlattenLists** combines all the inputs passed on to its #input_list port and flattens all the array type inputs to a single array on the output. \n\n### Common Use Cases\n\n**SBG FlattenLists** is mainly used inside workflows in order to format the type into an array type, allowing tools expecting array of File on the input to process the input, or tools that expect a File type to be scattered across this input.\n\nExample usage:\n- A single File type will be converted to an array of a single File.\n- One File type input and one array of File type input will combine into one array of File containing all of the elements of the array and the single File appended to it.\n- Two array of File types will convert into a single array containing elements of both.\n- Any multi-array type (array of array, which can sometimes be produced by scatter) will be processed and converted into a single array.\n\n### Common Issues and Important Notes\n\n* When used inside a workflow, keep in mind that linking outputs from tools or inner workflows on the same input as an input node might lead to the input node's contents not being passed on to the tool. For this reason, it is advisable to process the input node links with an additional **SBG FlattenLists** tool.\n\n### Performance \n\n**SBG FlattenLists** spends the most of the execution on download and upload of files. The flatten functionality is done through JavaScript expressions in OutputEval of the CWL, which is evaluated even before the tool execution.",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "stefan_stojanovic/sbg-flatten-lists-dev/sbg-flattenlists/1",
                "sbg:revision": 1,
                "sbg:revisionNotes": "convert to CWL v1.0",
                "sbg:modifiedOn": 1556111011,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1556104838,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "stefan_stojanovic/sbg-flatten-lists-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 1,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "af7b970c15a88f22190df0760f7494f5890332a09ad81c61691b1f522217ea1c3"
            },
            "label": "SBG FlattenLists",
            "sbg:x": -473.8199157714844,
            "sbg:y": -21.85169792175293
        },
        {
            "id": "gatk_4_1_selectvariants_snp",
            "in": [
                {
                    "id": "variant",
                    "source": "mergevcfs/output"
                },
                {
                    "id": "reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "select_type_to_include",
                    "default": "SNP"
                }
            ],
            "out": [
                {
                    "id": "select_variants_vcf"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-4-1-selectvariants/0",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Required Arguments",
                        "id": "variant",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--variant",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Variant",
                        "doc": "A VCF file containing variants Required.",
                        "sbg:fileTypes": "VCF, VCF.GZ"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "add_output_sam_program_record",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--add-output-sam-program-record",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add Output Sam Program Record",
                        "doc": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "cloud_index_prefetch_buffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloud-index-prefetch-buffer",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cloud Index Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "cloud_prefetch_buffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloud-prefetch-buffer",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cloud Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "concordance",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--concordance",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Concordance",
                        "doc": "Output variants also called in this comparison track Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_bam_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-bam-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Bam Index",
                        "doc": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_bam_md5",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_output_bam_md5"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--create-output-bam-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Bam Md5",
                        "doc": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_variant_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-variant-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Variant Index",
                        "doc": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_variant_md5",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-variant-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Variant Md5",
                        "doc": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_bam_index_caching",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-bam-index-caching",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Bam Index Caching",
                        "doc": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_read_filter",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "GoodCigarReadFilter",
                                    "MappedReadFilter",
                                    "MappingQualityAvailableReadFilter",
                                    "MappingQualityReadFilter",
                                    "NonZeroReferenceLengthAlignmentReadFilter",
                                    "NotDuplicateReadFilter",
                                    "NotSecondaryAlignmentReadFilter",
                                    "PassesVendorQualityCheckReadFilter",
                                    "WellformedReadFilter"
                                ],
                                "name": "disable_read_filter"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--disable-read-filter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Read Filter",
                        "doc": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_sequence_dictionary_validation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-sequence-dictionary-validation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Sequence Dictionary Validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_tool_default_read_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-read-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Tool Default Read Filters",
                        "doc": "Disable all tool default read filters Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "discordance",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--discordance",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Discordance",
                        "doc": "Output variants not called in this comparison track Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_sample_expressions",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--exclude-sample-expressions",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Sample Expressions",
                        "doc": "List of sample expressions to exclude This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_sample_file",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "--exclude-sample-file",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Sample File",
                        "doc": "List of samples to exclude This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_sample_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--exclude-sample-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Sample Name",
                        "doc": "Exclude genotypes from this sample This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_filtered",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--exclude-filtered",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Filtered",
                        "doc": "Don't include filtered sites Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_ids",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-ids",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude I Ds",
                        "doc": "List of variant IDs to select Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_non_variants",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--exclude-non-variants",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Non Variants",
                        "doc": "Don't include non-variant sites Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "input",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--input",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input",
                        "doc": "BAM/SAM/CRAM file containing reads This argument may be specified 0 or more times. Default value: null.",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "secondaryFiles": [
                            ".bai"
                        ]
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-exclusion-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Exclusion Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including. Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-set-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Set Rule",
                        "doc": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "invert_mendelian_violation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invert-mendelian-violation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invert Mendelian Violation",
                        "doc": "Output non-mendelian violation sites only Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "invert_select",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invert-select",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invert Select",
                        "doc": "Invert the selection criteria for -select Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "keep_ids",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--keep-ids",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep I Ds",
                        "doc": "List of variant IDs to select Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "keep_original_ac",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--keep-original-ac",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Original Ac",
                        "doc": "Store the original AC, AF, and AN values after subsetting Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "keep_original_dp",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--keep-original-dp",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Original Dp",
                        "doc": "Store the original DP value after subsetting Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "lenient",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--lenient",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Lenient",
                        "doc": "Lenient processing of VCF files Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_filtered_genotypes",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-filtered-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Filtered Genotypes",
                        "doc": "Maximum number of samples filtered at the genotype level Default value: 2147483647."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_fraction_filtered_genotypes",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--max-fraction-filtered-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Fraction Filtered Genotypes",
                        "doc": "Maximum fraction of samples filtered at the genotype level Default value: 1.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_indel_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-indel-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Indel Size",
                        "doc": "Maximum size of indels to include Default value: 2147483647."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_nocal_lfraction",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--max-nocal-lfraction",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Nocal Lfraction",
                        "doc": "Maximum fraction of samples with no-call genotypes Default value: 1.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_nocal_lnumber",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-nocal-lnumber",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Nocal Lnumber",
                        "doc": "Maximum number of samples with no-call genotypes Default value: 2147483647."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "mendelian_violation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--mendelian-violation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mendelian Violation",
                        "doc": "Output mendelian violation sites only Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "mendelian_violation_qual_threshold",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--mendelian-violation-qual-threshold",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mendelian Violation Qual Threshold",
                        "doc": "Minimum GQ score for each trio member to accept a site as a violation Default value: 0.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "min_filtered_genotypes",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-filtered-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Filtered Genotypes",
                        "doc": "Minimum number of samples filtered at the genotype level Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "min_fraction_filtered_genotypes",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--min-fraction-filtered-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Fraction Filtered Genotypes",
                        "doc": "Maximum fraction of samples filtered at the genotype level Default value: 0.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "min_indel_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-indel-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Indel Size",
                        "doc": "Minimum size of indels to include Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "pedigree",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--pedigree",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pedigree",
                        "doc": "Pedigree file Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "preserve_alleles",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "preserve_alleles"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--preserve-alleles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Preserve Alleles",
                        "doc": "Preserve original alleles, do not trim Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "quiet",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "quiet"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--quiet",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quiet",
                        "doc": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_filter",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "AlignmentAgreesWithHeaderReadFilter",
                                    "AllowAllReadsReadFilter",
                                    "AmbiguousBaseReadFilter",
                                    "CigarContainsNoNOperator",
                                    "FirstOfPairReadFilter",
                                    "FragmentLengthReadFilter",
                                    "GoodCigarReadFilter",
                                    "HasReadGroupReadFilter",
                                    "LibraryReadFilter",
                                    "MappedReadFilter",
                                    "MappingQualityAvailableReadFilter",
                                    "MappingQualityNotZeroReadFilter",
                                    "MappingQualityReadFilter",
                                    "MatchingBasesAndQualsReadFilter",
                                    "MateDifferentStrandReadFilter",
                                    "MateOnSameContigOrNoMappedMateReadFilter",
                                    "MetricsReadFilter",
                                    "NonZeroFragmentLengthReadFilter",
                                    "NonZeroReferenceLengthAlignmentReadFilter",
                                    "NotDuplicateReadFilter",
                                    "NotOpticalDuplicateReadFilter",
                                    "NotSecondaryAlignmentReadFilter",
                                    "NotSupplementaryAlignmentReadFilter",
                                    "OverclippedReadFilter",
                                    "PairedReadFilter",
                                    "PassesVendorQualityCheckReadFilter",
                                    "PlatformReadFilter",
                                    "PlatformUnitReadFilter",
                                    "PrimaryLineReadFilter",
                                    "ProperlyPairedReadFilter",
                                    "ReadGroupBlackListReadFilter",
                                    "ReadGroupReadFilter",
                                    "ReadLengthEqualsCigarLengthReadFilter",
                                    "ReadLengthReadFilter",
                                    "ReadNameReadFilter",
                                    "ReadStrandFilter",
                                    "SampleReadFilter",
                                    "SecondOfPairReadFilter",
                                    "SeqIsStoredReadFilter",
                                    "ValidAlignmentEndReadFilter",
                                    "ValidAlignmentStartReadFilter",
                                    "WellformedReadFilter"
                                ],
                                "name": "read_filter"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-filter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Filter",
                        "doc": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_index",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Index",
                        "doc": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "read_validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-validation-stringency",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Validation Stringency",
                        "doc": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence Default value: null.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "remove_fraction_genotypes",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--remove-fraction-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Remove Fraction Genotypes",
                        "doc": "Select a fraction of genotypes at random from the input and sets them to no-call Default value: 0.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "remove_unused_alternates",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--remove-unused-alternates",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Remove Unused Alternates",
                        "doc": "Remove alternate alleles not present in any genotypes Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "restrict_alleles_to",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "BIALLELIC",
                                    "MULTIALLELIC"
                                ],
                                "name": "restrict_alleles_to"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--restrict-alleles-to",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Restrict Alleles To",
                        "doc": "Select only variants of a particular allelicity Default value: ALL. Possible values: {ALL, BIALLELIC, MULTIALLELIC}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_expressions",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample-expressions",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample Expressions",
                        "doc": "Regular expression to select multiple samples This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--sample-file",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample File",
                        "doc": "File containing a list of samples to include This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample Name",
                        "doc": "Include genotypes from this sample This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "seconds_between_progress_updates",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--seconds-between-progress-updates",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Seconds Between Progress Updates",
                        "doc": "Output traversal statistics every time this many seconds elapse Default value: 10.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "select_random_fraction",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--select-random-fraction",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Select Random Fraction",
                        "doc": "Select a fraction of variants at random from the input Default value: 0.0."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "[]",
                        "id": "select_expressions",
                        "type": "string[]?",
                        "label": "Select Expressions",
                        "doc": "One or more criteria to use when selecting the data This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "select_type_to_exclude",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "NO_VARIATION",
                                    "SNP",
                                    "MNP",
                                    "INDEL",
                                    "SYMBOLIC",
                                    "MIXED"
                                ],
                                "name": "select_type_to_exclude"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--select-type-to-exclude",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Select Type To Exclude",
                        "doc": "Do not select certain type of variants from the input file This argument may be specified 0 or more times. Default value: null. Possible values: {NO_VARIATION, SNP, MNP, INDEL, SYMBOLIC, MIXED}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "select_type_to_include",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "NO_VARIATION",
                                    "SNP",
                                    "MNP",
                                    "INDEL",
                                    "SYMBOLIC",
                                    "MIXED"
                                ],
                                "name": "select_type_to_include"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--select-type-to-include",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Select Type To Include",
                        "doc": "Select only a certain type of variants from the input file This argument may be specified 0 or more times. Default value: null. Possible values: {NO_VARIATION, SNP, MNP, INDEL, SYMBOLIC, MIXED}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "set_filtered_gt_to_nocall",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--set-filtered-gt-to-nocall",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Set Filtered Gt To Nocall",
                        "doc": "Set filtered genotypes to no-call Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "use_jdk_deflater",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-jdk-deflater",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use Jdk Deflater",
                        "doc": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "use_jdk_inflater",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-jdk-inflater",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use Jdk Inflater",
                        "doc": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--verbosity",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "ambig_filter_frac",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-frac",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig Filter Frac",
                        "doc": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "max_fragment_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-fragment-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Fragment Length",
                        "doc": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "library",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--library",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Library",
                        "doc": "The name of the library to keep Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "maximum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maximum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Maximum Mapping Quality",
                        "doc": "Maximum mapping quality to keep (inclusive) Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "minimum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--minimum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Minimum Mapping Quality",
                        "doc": "Minimum mapping quality to keep (inclusive) Default value: 10."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "dont_require_soft_clips_both_ends",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-require-soft-clips-both-ends",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dont Require Soft Clips Both Ends",
                        "doc": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "filter_too_short",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--filter-too-short",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Filter Too Short",
                        "doc": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "pl_filter_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--pl-filter-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pl Filter Name",
                        "doc": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "black_listed_lanes",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--black-listed-lanes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Black Listed Lanes",
                        "doc": "Keep reads with platform units not on the list This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "black_list",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--black-list",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Black List",
                        "doc": "This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "keep_read_group",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--keep-read-group",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Read Group",
                        "doc": "The name of the read group to keep Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "max_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Read Length",
                        "doc": "Keep only reads with length at most equal to the specified value Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "min_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Read Length",
                        "doc": "Keep only reads with length at least equal to the specified value Default value: 1."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "read_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Name",
                        "doc": "Keep only reads with this read name Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "keep_reverse",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--keep-reverse",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Reverse",
                        "doc": "Keep only reads on the reverse strand Required. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "sample",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample",
                        "doc": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory Per Job",
                        "doc": "Memory per job"
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Memory overhead per job"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals File",
                        "doc": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Intervals File",
                        "doc": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "intervals_string",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals String",
                        "doc": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_string",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Intervals String",
                        "doc": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "ambig_filter_bases",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-bases",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig Filter Bases",
                        "doc": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "20",
                        "id": "gcs_max_retries",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--gcs-max-retries",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Gcs Max Retries",
                        "doc": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "ALL",
                        "id": "interval_merging_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-merging-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Merging Rule",
                        "doc": "Interval merging rule for abutting intervals."
                    }
                ],
                "outputs": [
                    {
                        "id": "select_variants_vcf",
                        "doc": "File to which variants should be written.",
                        "label": "Select Variants VCF",
                        "type": "File",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.variant)\n\n}"
                        },
                        "secondaryFiles": [
                            ".idx"
                        ],
                        "sbg:fileTypes": "VCF"
                    }
                ],
                "doc": "Select a subset of variants from a VCF file.\n\n###**Overview**  \n\nThis tool allows you to select a subset of variants based on various criteria in order to facilitate certain analyses such as comparing and contrasting cases vs. controls, extracting variant or non-variant loci that meet certain requirements, or troubleshooting some unexpected results, to name but a few.\n\nThere are many different options for selecting subsets of variants from a larger callset:\n\nExtract one or more samples from a callset based on either a complete sample name or a pattern match.\nSpecify criteria for inclusion that place thresholds on annotation values, e.g. \"DP > 1000\" (depth of coverage greater than 1000x), \"AF < 0.25\" (sites with allele frequency less than 0.25). These criteria are written as \"JEXL expressions\", which are documented in the article about using JEXL expressions.\nProvide concordance or discordance tracks in order to include or exclude variants that are also present in other given callsets.\nSelect variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation, filtering status, allelicity, and so on.\nThere are also several options for recording the original values of certain annotations that are recalculated when a subsetting the new callset, trimming alleles, and so on.\n\n###**Input**  \n\nA variant call set in VCF format from which to select a subset.  \n\n###**Output**  \n\nA new VCF file containing the selected subset of variants.  \n\n###**Usage examples**   \n\n    ./gatk-launch SelectVariants \\\n     \t-R reference.fasta \\\n     \t-V input.vcf \\\n     \t-selectType SNP \\\n     \t-O output.vcf\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "label": "GATK SelectVariants",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/opt/gatk"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--java-options"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n    return '\\\"-Xmx2048M\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "SelectVariants"
                    },
                    {
                        "prefix": "--output",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    read_name = [].concat(inputs.variant)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length - 1).join('.')\n    return read_namebase + '.vcf'\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.select_expressions) {\n        sexpression = inputs.select_expressions\n        filter = []\n        for (i = 0; i < sexpression.length; i++) {\n            filter.push(\" --selectExpressions '\", sexpression[i], \"'\")\n        }\n        return filter.join(\"\").trim()\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/stefan_stojanovic/gatk:4.1.0.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "GATK-4"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" SelectVariants --variant /path/to/variant.ext --output variant.vcf",
                "sbg:toolkitVersion": "4.0.2.0",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://software.broadinstitute.org/gatk/"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/"
                    },
                    {
                        "label": "Download",
                        "id": "https://software.broadinstitute.org/gatk/download/"
                    }
                ],
                "sbg:toolkit": "GATK",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-4-1-selectvariants/0",
                "sbg:revision": 0,
                "sbg:revisionNotes": "docker gatk 4.1.0.0",
                "sbg:modifiedOn": 1557834693,
                "sbg:modifiedBy": "vladimirk",
                "sbg:createdOn": 1557834693,
                "sbg:createdBy": "vladimirk",
                "sbg:project": "uros_sipetic/gatk-4-1-0-0-demo",
                "sbg:projectName": "GATK 4.1.0.0 - Demo",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "vladimirk"
                ],
                "sbg:latestRevision": 0,
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1557834693,
                        "sbg:revisionNotes": "docker gatk 4.1.0.0"
                    }
                ],
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a044ed48beebd8f841962b1ee7babfbd85503343bcedf9c57b30c5610f87df754"
            },
            "label": "GATK SelectVariants SNP",
            "sbg:x": 2654.972412109375,
            "sbg:y": -784.5244140625
        },
        {
            "id": "gatk_4_1_selectvariants_indel",
            "in": [
                {
                    "id": "variant",
                    "source": "mergevcfs/output"
                },
                {
                    "id": "reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "select_type_to_exclude",
                    "default": "SNP"
                }
            ],
            "out": [
                {
                    "id": "select_variants_vcf"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-4-1-selectvariants/0",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Required Arguments",
                        "id": "variant",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--variant",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Variant",
                        "doc": "A VCF file containing variants Required.",
                        "sbg:fileTypes": "VCF, VCF.GZ"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "add_output_sam_program_record",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--add-output-sam-program-record",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add Output Sam Program Record",
                        "doc": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "cloud_index_prefetch_buffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloud-index-prefetch-buffer",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cloud Index Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "cloud_prefetch_buffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloud-prefetch-buffer",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cloud Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "concordance",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--concordance",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Concordance",
                        "doc": "Output variants also called in this comparison track Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_bam_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-bam-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Bam Index",
                        "doc": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_bam_md5",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_output_bam_md5"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--create-output-bam-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Bam Md5",
                        "doc": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_variant_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-variant-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Variant Index",
                        "doc": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_variant_md5",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-variant-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Variant Md5",
                        "doc": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_bam_index_caching",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-bam-index-caching",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Bam Index Caching",
                        "doc": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_read_filter",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "GoodCigarReadFilter",
                                    "MappedReadFilter",
                                    "MappingQualityAvailableReadFilter",
                                    "MappingQualityReadFilter",
                                    "NonZeroReferenceLengthAlignmentReadFilter",
                                    "NotDuplicateReadFilter",
                                    "NotSecondaryAlignmentReadFilter",
                                    "PassesVendorQualityCheckReadFilter",
                                    "WellformedReadFilter"
                                ],
                                "name": "disable_read_filter"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--disable-read-filter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Read Filter",
                        "doc": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_sequence_dictionary_validation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-sequence-dictionary-validation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Sequence Dictionary Validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_tool_default_read_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-read-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Tool Default Read Filters",
                        "doc": "Disable all tool default read filters Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "discordance",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--discordance",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Discordance",
                        "doc": "Output variants not called in this comparison track Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_sample_expressions",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--exclude-sample-expressions",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Sample Expressions",
                        "doc": "List of sample expressions to exclude This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_sample_file",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "--exclude-sample-file",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Sample File",
                        "doc": "List of samples to exclude This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_sample_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--exclude-sample-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Sample Name",
                        "doc": "Exclude genotypes from this sample This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_filtered",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--exclude-filtered",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Filtered",
                        "doc": "Don't include filtered sites Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_ids",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-ids",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude I Ds",
                        "doc": "List of variant IDs to select Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_non_variants",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--exclude-non-variants",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Non Variants",
                        "doc": "Don't include non-variant sites Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "input",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--input",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input",
                        "doc": "BAM/SAM/CRAM file containing reads This argument may be specified 0 or more times. Default value: null.",
                        "sbg:fileTypes": "BAM, SAM, CRAM",
                        "secondaryFiles": [
                            ".bai"
                        ]
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-exclusion-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Exclusion Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including. Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-set-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Set Rule",
                        "doc": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "invert_mendelian_violation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invert-mendelian-violation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invert Mendelian Violation",
                        "doc": "Output non-mendelian violation sites only Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "invert_select",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invert-select",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invert Select",
                        "doc": "Invert the selection criteria for -select Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "keep_ids",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--keep-ids",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep I Ds",
                        "doc": "List of variant IDs to select Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "keep_original_ac",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--keep-original-ac",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Original Ac",
                        "doc": "Store the original AC, AF, and AN values after subsetting Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "keep_original_dp",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--keep-original-dp",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Original Dp",
                        "doc": "Store the original DP value after subsetting Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "lenient",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--lenient",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Lenient",
                        "doc": "Lenient processing of VCF files Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_filtered_genotypes",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-filtered-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Filtered Genotypes",
                        "doc": "Maximum number of samples filtered at the genotype level Default value: 2147483647."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_fraction_filtered_genotypes",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--max-fraction-filtered-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Fraction Filtered Genotypes",
                        "doc": "Maximum fraction of samples filtered at the genotype level Default value: 1.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_indel_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-indel-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Indel Size",
                        "doc": "Maximum size of indels to include Default value: 2147483647."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_nocal_lfraction",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--max-nocal-lfraction",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Nocal Lfraction",
                        "doc": "Maximum fraction of samples with no-call genotypes Default value: 1.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "max_nocal_lnumber",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-nocal-lnumber",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Nocal Lnumber",
                        "doc": "Maximum number of samples with no-call genotypes Default value: 2147483647."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "mendelian_violation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--mendelian-violation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mendelian Violation",
                        "doc": "Output mendelian violation sites only Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "mendelian_violation_qual_threshold",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--mendelian-violation-qual-threshold",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mendelian Violation Qual Threshold",
                        "doc": "Minimum GQ score for each trio member to accept a site as a violation Default value: 0.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "min_filtered_genotypes",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-filtered-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Filtered Genotypes",
                        "doc": "Minimum number of samples filtered at the genotype level Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "min_fraction_filtered_genotypes",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--min-fraction-filtered-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Fraction Filtered Genotypes",
                        "doc": "Maximum fraction of samples filtered at the genotype level Default value: 0.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "min_indel_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-indel-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Indel Size",
                        "doc": "Minimum size of indels to include Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "pedigree",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--pedigree",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pedigree",
                        "doc": "Pedigree file Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "preserve_alleles",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "preserve_alleles"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--preserve-alleles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Preserve Alleles",
                        "doc": "Preserve original alleles, do not trim Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "quiet",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "quiet"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--quiet",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quiet",
                        "doc": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_filter",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "AlignmentAgreesWithHeaderReadFilter",
                                    "AllowAllReadsReadFilter",
                                    "AmbiguousBaseReadFilter",
                                    "CigarContainsNoNOperator",
                                    "FirstOfPairReadFilter",
                                    "FragmentLengthReadFilter",
                                    "GoodCigarReadFilter",
                                    "HasReadGroupReadFilter",
                                    "LibraryReadFilter",
                                    "MappedReadFilter",
                                    "MappingQualityAvailableReadFilter",
                                    "MappingQualityNotZeroReadFilter",
                                    "MappingQualityReadFilter",
                                    "MatchingBasesAndQualsReadFilter",
                                    "MateDifferentStrandReadFilter",
                                    "MateOnSameContigOrNoMappedMateReadFilter",
                                    "MetricsReadFilter",
                                    "NonZeroFragmentLengthReadFilter",
                                    "NonZeroReferenceLengthAlignmentReadFilter",
                                    "NotDuplicateReadFilter",
                                    "NotOpticalDuplicateReadFilter",
                                    "NotSecondaryAlignmentReadFilter",
                                    "NotSupplementaryAlignmentReadFilter",
                                    "OverclippedReadFilter",
                                    "PairedReadFilter",
                                    "PassesVendorQualityCheckReadFilter",
                                    "PlatformReadFilter",
                                    "PlatformUnitReadFilter",
                                    "PrimaryLineReadFilter",
                                    "ProperlyPairedReadFilter",
                                    "ReadGroupBlackListReadFilter",
                                    "ReadGroupReadFilter",
                                    "ReadLengthEqualsCigarLengthReadFilter",
                                    "ReadLengthReadFilter",
                                    "ReadNameReadFilter",
                                    "ReadStrandFilter",
                                    "SampleReadFilter",
                                    "SecondOfPairReadFilter",
                                    "SeqIsStoredReadFilter",
                                    "ValidAlignmentEndReadFilter",
                                    "ValidAlignmentStartReadFilter",
                                    "WellformedReadFilter"
                                ],
                                "name": "read_filter"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-filter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Filter",
                        "doc": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_index",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Index",
                        "doc": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "read_validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-validation-stringency",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Validation Stringency",
                        "doc": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence Default value: null.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "remove_fraction_genotypes",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--remove-fraction-genotypes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Remove Fraction Genotypes",
                        "doc": "Select a fraction of genotypes at random from the input and sets them to no-call Default value: 0.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "remove_unused_alternates",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--remove-unused-alternates",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Remove Unused Alternates",
                        "doc": "Remove alternate alleles not present in any genotypes Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "restrict_alleles_to",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "BIALLELIC",
                                    "MULTIALLELIC"
                                ],
                                "name": "restrict_alleles_to"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--restrict-alleles-to",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Restrict Alleles To",
                        "doc": "Select only variants of a particular allelicity Default value: ALL. Possible values: {ALL, BIALLELIC, MULTIALLELIC}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_expressions",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample-expressions",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample Expressions",
                        "doc": "Regular expression to select multiple samples This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--sample-file",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample File",
                        "doc": "File containing a list of samples to include This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample Name",
                        "doc": "Include genotypes from this sample This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "seconds_between_progress_updates",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--seconds-between-progress-updates",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Seconds Between Progress Updates",
                        "doc": "Output traversal statistics every time this many seconds elapse Default value: 10.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "select_random_fraction",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--select-random-fraction",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Select Random Fraction",
                        "doc": "Select a fraction of variants at random from the input Default value: 0.0."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "[]",
                        "id": "select_expressions",
                        "type": "string[]?",
                        "label": "Select Expressions",
                        "doc": "One or more criteria to use when selecting the data This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "select_type_to_exclude",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "NO_VARIATION",
                                    "SNP",
                                    "MNP",
                                    "INDEL",
                                    "SYMBOLIC",
                                    "MIXED"
                                ],
                                "name": "select_type_to_exclude"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--select-type-to-exclude",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Select Type To Exclude",
                        "doc": "Do not select certain type of variants from the input file This argument may be specified 0 or more times. Default value: null. Possible values: {NO_VARIATION, SNP, MNP, INDEL, SYMBOLIC, MIXED}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "select_type_to_include",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "NO_VARIATION",
                                    "SNP",
                                    "MNP",
                                    "INDEL",
                                    "SYMBOLIC",
                                    "MIXED"
                                ],
                                "name": "select_type_to_include"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--select-type-to-include",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Select Type To Include",
                        "doc": "Select only a certain type of variants from the input file This argument may be specified 0 or more times. Default value: null. Possible values: {NO_VARIATION, SNP, MNP, INDEL, SYMBOLIC, MIXED}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "set_filtered_gt_to_nocall",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--set-filtered-gt-to-nocall",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Set Filtered Gt To Nocall",
                        "doc": "Set filtered genotypes to no-call Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "use_jdk_deflater",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-jdk-deflater",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use Jdk Deflater",
                        "doc": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "use_jdk_inflater",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-jdk-inflater",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use Jdk Inflater",
                        "doc": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--verbosity",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "ambig_filter_frac",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-frac",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig Filter Frac",
                        "doc": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "max_fragment_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-fragment-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Fragment Length",
                        "doc": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "library",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--library",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Library",
                        "doc": "The name of the library to keep Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "maximum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maximum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Maximum Mapping Quality",
                        "doc": "Maximum mapping quality to keep (inclusive) Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "minimum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--minimum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Minimum Mapping Quality",
                        "doc": "Minimum mapping quality to keep (inclusive) Default value: 10."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "dont_require_soft_clips_both_ends",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-require-soft-clips-both-ends",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dont Require Soft Clips Both Ends",
                        "doc": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "filter_too_short",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--filter-too-short",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Filter Too Short",
                        "doc": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "pl_filter_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--pl-filter-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pl Filter Name",
                        "doc": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "black_listed_lanes",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--black-listed-lanes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Black Listed Lanes",
                        "doc": "Keep reads with platform units not on the list This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "black_list",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--black-list",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Black List",
                        "doc": "This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "keep_read_group",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--keep-read-group",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Read Group",
                        "doc": "The name of the read group to keep Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "max_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Read Length",
                        "doc": "Keep only reads with length at most equal to the specified value Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "min_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Read Length",
                        "doc": "Keep only reads with length at least equal to the specified value Default value: 1."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "read_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Name",
                        "doc": "Keep only reads with this read name Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "keep_reverse",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--keep-reverse",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Reverse",
                        "doc": "Keep only reads on the reverse strand Required. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "sample",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample",
                        "doc": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory Per Job",
                        "doc": "Memory per job"
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Memory overhead per job"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals File",
                        "doc": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Intervals File",
                        "doc": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "intervals_string",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals String",
                        "doc": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_string",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Intervals String",
                        "doc": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "ambig_filter_bases",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-bases",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig Filter Bases",
                        "doc": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "20",
                        "id": "gcs_max_retries",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--gcs-max-retries",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Gcs Max Retries",
                        "doc": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "ALL",
                        "id": "interval_merging_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-merging-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Merging Rule",
                        "doc": "Interval merging rule for abutting intervals."
                    }
                ],
                "outputs": [
                    {
                        "id": "select_variants_vcf",
                        "doc": "File to which variants should be written.",
                        "label": "Select Variants VCF",
                        "type": "File",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.variant)\n\n}"
                        },
                        "secondaryFiles": [
                            ".idx"
                        ],
                        "sbg:fileTypes": "VCF"
                    }
                ],
                "doc": "Select a subset of variants from a VCF file.\n\n###**Overview**  \n\nThis tool allows you to select a subset of variants based on various criteria in order to facilitate certain analyses such as comparing and contrasting cases vs. controls, extracting variant or non-variant loci that meet certain requirements, or troubleshooting some unexpected results, to name but a few.\n\nThere are many different options for selecting subsets of variants from a larger callset:\n\nExtract one or more samples from a callset based on either a complete sample name or a pattern match.\nSpecify criteria for inclusion that place thresholds on annotation values, e.g. \"DP > 1000\" (depth of coverage greater than 1000x), \"AF < 0.25\" (sites with allele frequency less than 0.25). These criteria are written as \"JEXL expressions\", which are documented in the article about using JEXL expressions.\nProvide concordance or discordance tracks in order to include or exclude variants that are also present in other given callsets.\nSelect variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation, filtering status, allelicity, and so on.\nThere are also several options for recording the original values of certain annotations that are recalculated when a subsetting the new callset, trimming alleles, and so on.\n\n###**Input**  \n\nA variant call set in VCF format from which to select a subset.  \n\n###**Output**  \n\nA new VCF file containing the selected subset of variants.  \n\n###**Usage examples**   \n\n    ./gatk-launch SelectVariants \\\n     \t-R reference.fasta \\\n     \t-V input.vcf \\\n     \t-selectType SNP \\\n     \t-O output.vcf\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "label": "GATK SelectVariants",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/opt/gatk"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--java-options"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n    return '\\\"-Xmx2048M\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "SelectVariants"
                    },
                    {
                        "prefix": "--output",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    read_name = [].concat(inputs.variant)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length - 1).join('.')\n    return read_namebase + '.vcf'\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    if (inputs.select_expressions) {\n        sexpression = inputs.select_expressions\n        filter = []\n        for (i = 0; i < sexpression.length; i++) {\n            filter.push(\" --selectExpressions '\", sexpression[i], \"'\")\n        }\n        return filter.join(\"\").trim()\n    }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerImageId": "3c3b8e0ed4e5",
                        "dockerPull": "images.sbgenomics.com/stefan_stojanovic/gatk:4.1.0.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "GATK-4"
                ],
                "sbg:image_url": null,
                "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" SelectVariants --variant /path/to/variant.ext --output variant.vcf",
                "sbg:toolkitVersion": "4.0.2.0",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://software.broadinstitute.org/gatk/"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/"
                    },
                    {
                        "label": "Download",
                        "id": "https://software.broadinstitute.org/gatk/download/"
                    }
                ],
                "sbg:toolkit": "GATK",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-4-1-selectvariants/0",
                "sbg:revision": 0,
                "sbg:revisionNotes": "docker gatk 4.1.0.0",
                "sbg:modifiedOn": 1557834693,
                "sbg:modifiedBy": "vladimirk",
                "sbg:createdOn": 1557834693,
                "sbg:createdBy": "vladimirk",
                "sbg:project": "uros_sipetic/gatk-4-1-0-0-demo",
                "sbg:projectName": "GATK 4.1.0.0 - Demo",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "vladimirk"
                ],
                "sbg:latestRevision": 0,
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1557834693,
                        "sbg:revisionNotes": "docker gatk 4.1.0.0"
                    }
                ],
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a044ed48beebd8f841962b1ee7babfbd85503343bcedf9c57b30c5610f87df754"
            },
            "label": "GATK SelectVariants indel",
            "sbg:x": 2672.249267578125,
            "sbg:y": -589.3306884765625
        },
        {
            "id": "gatk_variantfiltration_4_1_0_0",
            "in": [
                {
                    "id": "filter_expression",
                    "default": [
                        "\"QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0\""
                    ]
                },
                {
                    "id": "filter_name",
                    "default": [
                        "INDEL_HARD_THR"
                    ]
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "in_variants",
                    "source": "gatk_4_1_selectvariants_indel/select_variants_vcf"
                },
                {
                    "id": "output_file_format",
                    "default": "vcf"
                }
            ],
            "out": [
                {
                    "id": "out_variants"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-variantfiltration-4-1-0-0/4",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "-add-output-vcf-command-line",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "add_output_vcf_command_line",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "add_output_vcf_command_line"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--add-output-vcf-command-line",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add output vcf command line",
                        "doc": "If true, adds a command line header line to created vcf files."
                    },
                    {
                        "sbg:altPrefix": "-cluster",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "3",
                        "id": "cluster_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cluster-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cluster size",
                        "doc": "The number of SNPs which make up a cluster. Must be at least 2."
                    },
                    {
                        "sbg:altPrefix": "-window",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "cluster_window_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cluster-window-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cluster window size",
                        "doc": "The window size (in bases) in which to evaluate clustered SNPs."
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "create_output_variant_index",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_output_variant_index"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--create-output-variant-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create output variant index",
                        "doc": "If true, create a VCF index when writing a coordinate-sorted VCF file."
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_bam_index_caching",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-bam-index-caching",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable BAM index caching",
                        "doc": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified."
                    },
                    {
                        "sbg:altPrefix": "-disable-sequence-dictionary-validation",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_sequence_dictionary_validation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-sequence-dictionary-validation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable sequence dictionary validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!"
                    },
                    {
                        "sbg:altPrefix": "-disable-tool-default-read-filters",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_tool_default_read_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-read-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable tool default read filters",
                        "doc": "Disable all tool default read filters (warning: many tools will not function correctly without their default read filters on)."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude intervals file",
                        "doc": "File which contains one or more genomic intervals to exclude from processing.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "exclude_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--exclude-intervals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Exclude intervals string",
                        "doc": "One or more genomic intervals to exclude from processing."
                    },
                    {
                        "sbg:altPrefix": "-filter",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "filter_expression",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--filter-expression', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Filter expression",
                        "doc": "One or more expressions used with INFO fields to filter."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "filter_name",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--filter-name', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Filter name",
                        "doc": "Names to use for the list of filters."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "filter_not_in_mask",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--filter-not-in-mask",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Filter not in mask",
                        "doc": "Filter records not in given input mask."
                    },
                    {
                        "sbg:altPrefix": "-G-filter",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "genotype_filter_expression",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--genotype-filter-expression', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Genotype filter expression",
                        "doc": "One or more expressions used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info)."
                    },
                    {
                        "sbg:altPrefix": "-G-filter-name",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "genotype_filter_name",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--genotype-filter-name', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Genotype filter name",
                        "doc": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered."
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-exclusion-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval exclusion padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding."
                    },
                    {
                        "sbg:altPrefix": "-imr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "ALL",
                        "id": "interval_merging_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-merging-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval merging rule",
                        "doc": "Interval merging rule for abutting intervals."
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including."
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "UNION",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-set-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval set rule",
                        "doc": "Set merging approach to use for combining interval inputs."
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Include intervals file",
                        "doc": "File which contains one or more genomic intervals over which to operate.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--intervals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Include intervals string",
                        "doc": "One or more genomic intervals over which to operate."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "invalidate_previous_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invalidate-previous-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invalidate previous filters",
                        "doc": "Remove previous filters applied to the VCF."
                    },
                    {
                        "sbg:altPrefix": "-invfilter",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "invert_filter_expression",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invert-filter-expression",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invert filter expression",
                        "doc": "Invert the selection criteria for --filter-expression."
                    },
                    {
                        "sbg:altPrefix": "-invG-filter",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "invert_genotype_filter_expression",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invert-genotype-filter-expression",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invert genotype filter expression",
                        "doc": "Invert the selection criteria for --genotype-filter-expression."
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "lenient",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--lenient",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Lenient",
                        "doc": "Lenient processing of VCF files."
                    },
                    {
                        "sbg:altPrefix": "-mask",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "mask",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--mask",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mask",
                        "doc": "Input mask."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "mask_extension",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--mask-extension",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mask extension",
                        "doc": "How many bases beyond records from a provided 'mask' should variants be filtered."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "Mask",
                        "id": "mask_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--mask-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mask name",
                        "doc": "The text to put in the FILTER field if a 'mask' is provided and overlaps with a variant call."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job",
                        "doc": "This input allows a user to set the desired overhead memory when running a tool or adding it to a workflow. This amount will be added to the Memory per job in the Memory requirements section but it will not be added to the -Xmx parameter leaving some memory not occupied which can be used as stack memory (-Xmx parameter defines heap memory). This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "This input allows a user to set the desired memory requirement when running a tool or adding it to a workflow. This value should be propagated to the -Xmx parameter too.This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "missing_values_evaluate_as_failing",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--missing-values-evaluate-as-failing",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Missing values evaluate as failing",
                        "doc": "When evaluating the JEXL expressions, missing values should be considered failing the expression."
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "in_reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-sequence-dictionary",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "sequence_dictionary",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--sequence-dictionary",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sequence dictionary",
                        "doc": "Use the given sequence dictionary as the master/canonical sequence dictionary. Must be a .dict file.",
                        "sbg:fileTypes": "DICT"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "set_filtered_genotype_to_no_call",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--set-filtered-genotype-to-no-call",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Set filtered genotype to no call",
                        "doc": "Set filtered genotypes to no-call."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "sites_only_vcf_output",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--sites-only-vcf-output",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sites only vcf output",
                        "doc": "If true, don't emit genotype fields when writing VCF file output."
                    },
                    {
                        "sbg:altPrefix": "-V",
                        "sbg:category": "Required Arguments",
                        "id": "in_variants",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--variant",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input variants file",
                        "doc": "A VCF file containing variants.",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "secondaryFiles": [
                            "${\n    return [self.basename + \".idx\", self.nameroot + \".idx\"];\n}"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output file name prefix."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "VCF.GZ",
                        "id": "output_file_format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "vcf",
                                    "vcf.gz"
                                ],
                                "name": "output_file_format"
                            }
                        ],
                        "label": "Output file format",
                        "doc": "Output file format."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job",
                        "doc": "CPU per job."
                    }
                ],
                "outputs": [
                    {
                        "id": "out_variants",
                        "doc": "Ouput filtered variants file",
                        "label": "Ouput filtered variants file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "{*vcf.gz,*.vcf}",
                            "outputEval": "$(inheritMetadata(self, inputs.in_variants))"
                        },
                        "secondaryFiles": [
                            "${\n    return self.basename + \".tbi\";\n}"
                        ],
                        "sbg:fileTypes": "VCF.GZ"
                    }
                ],
                "doc": "The **GATK VariantFiltration** tool filters variant calls of the input VCF file based on INFO and/or FORMAT annotations and outputs a filter VCF file. \n\nThis tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line [1].\n\n*A list of **all inputs and parameters** with corresponding descriptions can be found at the bottom of the page.*\n\n###Common Use Cases\n\n* The **GATK VariantFiltration** tool requires the VCF file on its **Input variants file** (`--variant`) input and a reference file on its **Reference** (`--reference`) input. The tool generates a filtered VCF file on its **Output filtered variants file** output.\n\n* Usage example:\n```\n   gatk VariantFiltration \\\n   --reference reference.fasta \\\n   --variant input.vcf.gz \\\n   --output output.vcf.gz \\\n   --filter-name \"my_filter1\" \\\n   --filter-expression \"AB < 0.2\" \\\n   --filter-name \"my_filter2\" \\\n   --filter-expression \"MQ0 > 50\"\n\n```\n\n###Changes Introduced by Seven Bridges\n\n* All output files will be prefixed using the **Output prefix** parameter. In case **Output prefix** is not provided, output prefix will be the same as the Sample ID metadata from **Input variants file**, if the Sample ID metadata exists. Otherwise, output prefix will be inferred from the **Input variants** filename. This way, having identical names of the output files between runs is avoided. Moreover,  **filtered** will be added before the extension of the output file name. \n\n* The user has a possibility to specify the output file format using the **Output file format** argument. Otherwise, the output will be in the compressed VCF file format.\n\n###Common Issues and Important Notes\n\n* Note: Composing filtering expressions can range from very simple to extremely complicated depending on what you're trying to do.\n\nCompound expressions (ones that specify multiple conditions connected by &&, AND, ||, or OR, and reference multiple attributes) require special consideration. By default, variants that are missing one or more of the attributes referenced in a compound expression are treated as PASS for the entire expression, even if the variant would satisfy the filter criteria for another part of the expression. This can lead to unexpected results if any of the attributes referenced in a compound expression are present for some variants, but missing for others.\n\nIt is strongly recommended to provide such expressions as individual arguments, each referencing a single attribute and specifying a single criteria. This ensures that all of the individual expression are applied to each variant, even if a given variant is missing values for some of the expression conditions.\n\nAs an example, multiple individual expressions provided like this:\n\n```\n   gatk VariantFiltration \\\n   --reference reference.fasta \\\n   --variant input.vcf.gz \\\n   --output output.vcf.gz \\\n   --filter-name \"my_filter1\" \\\n   --filter-expression \"AB < 0.2\" \\\n   --filter-name \"my_filter2\" \\\n   --filter-expression \"MQ0 > 50\"\n \n```\n\nare preferable to a single compound expression such as this:\n\n```\n    gatk VariantFiltration \\\n    --reference reference.fasta \\\n    --variant input.vcf.gz \\\n    --output output.vcf.gz \\\n    --filter-name \"my_filter\" \\\n    --filter-expression \"AB < 0.2 || MQ0 > 50\"\n  \n```\n\n###Performance Benchmarking\n\nThis tool is ultra fast, with a running time less than a minute on the default AWS c4.2xlarge instance.\n\n\n###References\n\n[1] [GATK VariantFiltration](https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_filters_VariantFiltration.php)",
                "label": "GATK VariantFiltration",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/opt/gatk"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "${\n    if (inputs.memory_per_job)\n    {\n        return \"--java-options\";\n    }\n}\n    "
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "VariantFiltration"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var in_variants = inputs.in_variants;\n    var output_ext = inputs.output_file_format ? inputs.output_file_format : \"vcf.gz\";\n    var output_prefix = '';\n    if (inputs.output_prefix)\n    {\n        output_prefix = inputs.output_prefix;\n    }\n    else \n    {\n        if (in_variants.metadata && in_variants.metadata.sample_id)\n        {\n            output_prefix = in_variants.metadata.sample_id;\n        }\n        else \n        {\n            output_prefix = in_variants.path.split('/').pop().split('.')[0]\n        }\n    }\n    \n    return \"--output \" + output_prefix + \".variant_filtered.\" + output_ext;\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    var memory = 3500;\n    if (inputs.memory_per_job) \n    {\n        memory = inputs.memory_per_job;\n    }\n    if (inputs.memory_overhead_per_job)\n    {\n        memory += inputs.memory_overhead_per_job;\n    }\n    return memory;\n}",
                        "coresMin": "${\n    return inputs.cpu_per_job ? inputs.cpu_per_job : 1\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefan_stojanovic/gatk:4.1.0.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};",
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "Utilities",
                    "VCF Processing",
                    "Variant Filtration"
                ],
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:toolkit": "GATK",
                "sbg:toolkitVersion": "4.1.0.0",
                "sbg:projectName": "GATK 4.1.0.0 - Demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "uros_sipetic",
                        "sbg:modifiedOn": 1552930494,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/10"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554493100,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/18"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554720852,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/19"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554999320,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/20"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1557837718,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/21"
                    }
                ],
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/releases/download/4.1.0.0/gatk-4.1.0.0.zip",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.ncbi.nlm.nih.gov/pubmed?term=20644199",
                        "label": "Publications"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_filters_VariantFiltration.php",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-variantfiltration-4-1-0-0/4",
                "sbg:revision": 4,
                "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/21",
                "sbg:modifiedOn": 1557837718,
                "sbg:modifiedBy": "veliborka_josipovic",
                "sbg:createdOn": 1552930494,
                "sbg:createdBy": "uros_sipetic",
                "sbg:project": "uros_sipetic/gatk-4-1-0-0-demo",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "uros_sipetic",
                    "veliborka_josipovic"
                ],
                "sbg:latestRevision": 4,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "ac3b9ffbcdb73107c3313d8af92d680945f5aea9bd5d23009fee320d97dc5540d",
                "sbg:copyOf": "veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/21"
            },
            "label": "GATK VariantFiltration",
            "sbg:x": 2888.77197265625,
            "sbg:y": -626.3729858398438
        },
        {
            "id": "gatk_variantfiltration_4_1_0_1",
            "in": [
                {
                    "id": "filter_expression",
                    "default": [
                        "\"QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0\""
                    ]
                },
                {
                    "id": "filter_name",
                    "default": [
                        "SNP_HARD_THR"
                    ]
                },
                {
                    "id": "in_reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "in_variants",
                    "source": "gatk_4_1_selectvariants_snp/select_variants_vcf"
                },
                {
                    "id": "output_file_format",
                    "default": "vcf"
                }
            ],
            "out": [
                {
                    "id": "out_variants"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-variantfiltration-4-1-0-0/4",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "-add-output-vcf-command-line",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "add_output_vcf_command_line",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "add_output_vcf_command_line"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--add-output-vcf-command-line",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add output vcf command line",
                        "doc": "If true, adds a command line header line to created vcf files."
                    },
                    {
                        "sbg:altPrefix": "-cluster",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "3",
                        "id": "cluster_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cluster-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cluster size",
                        "doc": "The number of SNPs which make up a cluster. Must be at least 2."
                    },
                    {
                        "sbg:altPrefix": "-window",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "cluster_window_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cluster-window-size",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cluster window size",
                        "doc": "The window size (in bases) in which to evaluate clustered SNPs."
                    },
                    {
                        "sbg:altPrefix": "-OVI",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "true",
                        "id": "create_output_variant_index",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "true",
                                    "false"
                                ],
                                "name": "create_output_variant_index"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--create-output-variant-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create output variant index",
                        "doc": "If true, create a VCF index when writing a coordinate-sorted VCF file."
                    },
                    {
                        "sbg:altPrefix": "-DBIC",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_bam_index_caching",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-bam-index-caching",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable BAM index caching",
                        "doc": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified."
                    },
                    {
                        "sbg:altPrefix": "-disable-sequence-dictionary-validation",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_sequence_dictionary_validation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-sequence-dictionary-validation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable sequence dictionary validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk!"
                    },
                    {
                        "sbg:altPrefix": "-disable-tool-default-read-filters",
                        "sbg:category": "Advanced Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "disable_tool_default_read_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-read-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable tool default read filters",
                        "doc": "Disable all tool default read filters (warning: many tools will not function correctly without their default read filters on)."
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude intervals file",
                        "doc": "File which contains one or more genomic intervals to exclude from processing.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:altPrefix": "-XL",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "exclude_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--exclude-intervals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Exclude intervals string",
                        "doc": "One or more genomic intervals to exclude from processing."
                    },
                    {
                        "sbg:altPrefix": "-filter",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "filter_expression",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--filter-expression', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Filter expression",
                        "doc": "One or more expressions used with INFO fields to filter."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "filter_name",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--filter-name', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Filter name",
                        "doc": "Names to use for the list of filters."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "filter_not_in_mask",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--filter-not-in-mask",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Filter not in mask",
                        "doc": "Filter records not in given input mask."
                    },
                    {
                        "sbg:altPrefix": "-G-filter",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "genotype_filter_expression",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--genotype-filter-expression', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Genotype filter expression",
                        "doc": "One or more expressions used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info)."
                    },
                    {
                        "sbg:altPrefix": "-G-filter-name",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "genotype_filter_name",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--genotype-filter-name', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Genotype filter name",
                        "doc": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered."
                    },
                    {
                        "sbg:altPrefix": "-ixp",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-exclusion-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval exclusion padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding."
                    },
                    {
                        "sbg:altPrefix": "-imr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "ALL",
                        "id": "interval_merging_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ],
                                "name": "interval_merging_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-merging-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval merging rule",
                        "doc": "Interval merging rule for abutting intervals."
                    },
                    {
                        "sbg:altPrefix": "-ip",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including."
                    },
                    {
                        "sbg:altPrefix": "-isr",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "UNION",
                        "id": "interval_set_rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ],
                                "name": "interval_set_rule"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--interval-set-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval set rule",
                        "doc": "Set merging approach to use for combining interval inputs."
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Include intervals file",
                        "doc": "File which contains one or more genomic intervals over which to operate.",
                        "sbg:fileTypes": "BED"
                    },
                    {
                        "sbg:altPrefix": "-L",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "include_intervals_string",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n    if (self)\n    {\n        var cmd = [];\n        for (let i = 0; i < self.length; i++) \n        {\n            cmd.push('--intervals', self[i]);\n        }\n        return cmd.join(' ');\n    }\n    \n}"
                        },
                        "label": "Include intervals string",
                        "doc": "One or more genomic intervals over which to operate."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "invalidate_previous_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invalidate-previous-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invalidate previous filters",
                        "doc": "Remove previous filters applied to the VCF."
                    },
                    {
                        "sbg:altPrefix": "-invfilter",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "invert_filter_expression",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invert-filter-expression",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invert filter expression",
                        "doc": "Invert the selection criteria for --filter-expression."
                    },
                    {
                        "sbg:altPrefix": "-invG-filter",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "invert_genotype_filter_expression",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--invert-genotype-filter-expression",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Invert genotype filter expression",
                        "doc": "Invert the selection criteria for --genotype-filter-expression."
                    },
                    {
                        "sbg:altPrefix": "-LE",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "lenient",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--lenient",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Lenient",
                        "doc": "Lenient processing of VCF files."
                    },
                    {
                        "sbg:altPrefix": "-mask",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "mask",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--mask",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mask",
                        "doc": "Input mask."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "0",
                        "id": "mask_extension",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--mask-extension",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mask extension",
                        "doc": "How many bases beyond records from a provided 'mask' should variants be filtered."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "Mask",
                        "id": "mask_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--mask-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Mask name",
                        "doc": "The text to put in the FILTER field if a 'mask' is provided and overlaps with a variant call."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per job",
                        "doc": "This input allows a user to set the desired overhead memory when running a tool or adding it to a workflow. This amount will be added to the Memory per job in the Memory requirements section but it will not be added to the -Xmx parameter leaving some memory not occupied which can be used as stack memory (-Xmx parameter defines heap memory). This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Platform Options",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job",
                        "doc": "This input allows a user to set the desired memory requirement when running a tool or adding it to a workflow. This value should be propagated to the -Xmx parameter too.This input should be defined in MB (for both the platform part and the -Xmx part if Java tool is wrapped)."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "missing_values_evaluate_as_failing",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--missing-values-evaluate-as-failing",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Missing values evaluate as failing",
                        "doc": "When evaluating the JEXL expressions, missing values should be considered failing the expression."
                    },
                    {
                        "sbg:altPrefix": "-R",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "in_reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence.",
                        "sbg:fileTypes": "FASTA, FA",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-sequence-dictionary",
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "null",
                        "id": "sequence_dictionary",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--sequence-dictionary",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sequence dictionary",
                        "doc": "Use the given sequence dictionary as the master/canonical sequence dictionary. Must be a .dict file.",
                        "sbg:fileTypes": "DICT"
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "set_filtered_genotype_to_no_call",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--set-filtered-genotype-to-no-call",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Set filtered genotype to no call",
                        "doc": "Set filtered genotypes to no-call."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "false",
                        "id": "sites_only_vcf_output",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--sites-only-vcf-output",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sites only vcf output",
                        "doc": "If true, don't emit genotype fields when writing VCF file output."
                    },
                    {
                        "sbg:altPrefix": "-V",
                        "sbg:category": "Required Arguments",
                        "id": "in_variants",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--variant",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input variants file",
                        "doc": "A VCF file containing variants.",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "secondaryFiles": [
                            "${\n    return [self.basename + \".idx\", self.nameroot + \".idx\"];\n}"
                        ]
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "output_prefix",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "Output file name prefix."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "VCF.GZ",
                        "id": "output_file_format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "vcf",
                                    "vcf.gz"
                                ],
                                "name": "output_file_format"
                            }
                        ],
                        "label": "Output file format",
                        "doc": "Output file format."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "sbg:toolDefaultValue": "1",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "CPU per job",
                        "doc": "CPU per job."
                    }
                ],
                "outputs": [
                    {
                        "id": "out_variants",
                        "doc": "Ouput filtered variants file",
                        "label": "Ouput filtered variants file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "{*vcf.gz,*.vcf}",
                            "outputEval": "$(inheritMetadata(self, inputs.in_variants))"
                        },
                        "secondaryFiles": [
                            "${\n    return self.basename + \".tbi\";\n}"
                        ],
                        "sbg:fileTypes": "VCF.GZ"
                    }
                ],
                "doc": "The **GATK VariantFiltration** tool filters variant calls of the input VCF file based on INFO and/or FORMAT annotations and outputs a filter VCF file. \n\nThis tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line [1].\n\n*A list of **all inputs and parameters** with corresponding descriptions can be found at the bottom of the page.*\n\n###Common Use Cases\n\n* The **GATK VariantFiltration** tool requires the VCF file on its **Input variants file** (`--variant`) input and a reference file on its **Reference** (`--reference`) input. The tool generates a filtered VCF file on its **Output filtered variants file** output.\n\n* Usage example:\n```\n   gatk VariantFiltration \\\n   --reference reference.fasta \\\n   --variant input.vcf.gz \\\n   --output output.vcf.gz \\\n   --filter-name \"my_filter1\" \\\n   --filter-expression \"AB < 0.2\" \\\n   --filter-name \"my_filter2\" \\\n   --filter-expression \"MQ0 > 50\"\n\n```\n\n###Changes Introduced by Seven Bridges\n\n* All output files will be prefixed using the **Output prefix** parameter. In case **Output prefix** is not provided, output prefix will be the same as the Sample ID metadata from **Input variants file**, if the Sample ID metadata exists. Otherwise, output prefix will be inferred from the **Input variants** filename. This way, having identical names of the output files between runs is avoided. Moreover,  **filtered** will be added before the extension of the output file name. \n\n* The user has a possibility to specify the output file format using the **Output file format** argument. Otherwise, the output will be in the compressed VCF file format.\n\n###Common Issues and Important Notes\n\n* Note: Composing filtering expressions can range from very simple to extremely complicated depending on what you're trying to do.\n\nCompound expressions (ones that specify multiple conditions connected by &&, AND, ||, or OR, and reference multiple attributes) require special consideration. By default, variants that are missing one or more of the attributes referenced in a compound expression are treated as PASS for the entire expression, even if the variant would satisfy the filter criteria for another part of the expression. This can lead to unexpected results if any of the attributes referenced in a compound expression are present for some variants, but missing for others.\n\nIt is strongly recommended to provide such expressions as individual arguments, each referencing a single attribute and specifying a single criteria. This ensures that all of the individual expression are applied to each variant, even if a given variant is missing values for some of the expression conditions.\n\nAs an example, multiple individual expressions provided like this:\n\n```\n   gatk VariantFiltration \\\n   --reference reference.fasta \\\n   --variant input.vcf.gz \\\n   --output output.vcf.gz \\\n   --filter-name \"my_filter1\" \\\n   --filter-expression \"AB < 0.2\" \\\n   --filter-name \"my_filter2\" \\\n   --filter-expression \"MQ0 > 50\"\n \n```\n\nare preferable to a single compound expression such as this:\n\n```\n    gatk VariantFiltration \\\n    --reference reference.fasta \\\n    --variant input.vcf.gz \\\n    --output output.vcf.gz \\\n    --filter-name \"my_filter\" \\\n    --filter-expression \"AB < 0.2 || MQ0 > 50\"\n  \n```\n\n###Performance Benchmarking\n\nThis tool is ultra fast, with a running time less than a minute on the default AWS c4.2xlarge instance.\n\n\n###References\n\n[1] [GATK VariantFiltration](https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_filters_VariantFiltration.php)",
                "label": "GATK VariantFiltration",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/opt/gatk"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "${\n    if (inputs.memory_per_job)\n    {\n        return \"--java-options\";\n    }\n}\n    "
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "VariantFiltration"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var in_variants = inputs.in_variants;\n    var output_ext = inputs.output_file_format ? inputs.output_file_format : \"vcf.gz\";\n    var output_prefix = '';\n    if (inputs.output_prefix)\n    {\n        output_prefix = inputs.output_prefix;\n    }\n    else \n    {\n        if (in_variants.metadata && in_variants.metadata.sample_id)\n        {\n            output_prefix = in_variants.metadata.sample_id;\n        }\n        else \n        {\n            output_prefix = in_variants.path.split('/').pop().split('.')[0]\n        }\n    }\n    \n    return \"--output \" + output_prefix + \".variant_filtered.\" + output_ext;\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    var memory = 3500;\n    if (inputs.memory_per_job) \n    {\n        memory = inputs.memory_per_job;\n    }\n    if (inputs.memory_overhead_per_job)\n    {\n        memory += inputs.memory_overhead_per_job;\n    }\n    return memory;\n}",
                        "coresMin": "${\n    return inputs.cpu_per_job ? inputs.cpu_per_job : 1\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefan_stojanovic/gatk:4.1.0.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};",
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "Utilities",
                    "VCF Processing",
                    "Variant Filtration"
                ],
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:toolkit": "GATK",
                "sbg:toolkitVersion": "4.1.0.0",
                "sbg:projectName": "GATK 4.1.0.0 - Demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "uros_sipetic",
                        "sbg:modifiedOn": 1552930494,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/10"
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554493100,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/18"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554720852,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/19"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1554999320,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/20"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "veliborka_josipovic",
                        "sbg:modifiedOn": 1557837718,
                        "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/21"
                    }
                ],
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/",
                        "label": "Source Code"
                    },
                    {
                        "id": "https://github.com/broadinstitute/gatk/releases/download/4.1.0.0/gatk-4.1.0.0.zip",
                        "label": "Download"
                    },
                    {
                        "id": "https://www.ncbi.nlm.nih.gov/pubmed?term=20644199",
                        "label": "Publications"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/4.1.0.0/org_broadinstitute_hellbender_tools_walkers_filters_VariantFiltration.php",
                        "label": "Documentation"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "uros_sipetic/gatk-4-1-0-0-demo/gatk-variantfiltration-4-1-0-0/4",
                "sbg:revision": 4,
                "sbg:revisionNotes": "Copy of veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/21",
                "sbg:modifiedOn": 1557837718,
                "sbg:modifiedBy": "veliborka_josipovic",
                "sbg:createdOn": 1552930494,
                "sbg:createdBy": "uros_sipetic",
                "sbg:project": "uros_sipetic/gatk-4-1-0-0-demo",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "uros_sipetic",
                    "veliborka_josipovic"
                ],
                "sbg:latestRevision": 4,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "ac3b9ffbcdb73107c3313d8af92d680945f5aea9bd5d23009fee320d97dc5540d",
                "sbg:copyOf": "veliborka_josipovic/gatk-4-1-0-0-toolkit-dev/gatk-variantfiltration-4-1-0-0/21"
            },
            "label": "GATK VariantFiltration",
            "sbg:x": 2917.727783203125,
            "sbg:y": -802.3795166015625
        },
        {
            "id": "mergevcfs_1",
            "in": [
                {
                    "id": "input",
                    "source": [
                        "gatk_variantfiltration_4_1_0_0/out_variants",
                        "gatk_variantfiltration_4_1_0_1/out_variants"
                    ]
                }
            ],
            "out": [
                {
                    "id": "output"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/mergevcfs/7",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Required Arguments",
                        "sbg:altPrefix": "-I",
                        "id": "input",
                        "type": "File[]",
                        "label": "Input",
                        "doc": "VCF input files File format is determined by file extension. This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "sbg:category": "Optional Arguments",
                        "id": "compression_level",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--COMPRESSION_LEVEL",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Compression Level",
                        "doc": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5."
                    },
                    {
                        "sbg:toolDefaultValue": "true",
                        "sbg:category": "Optional Arguments",
                        "id": "create_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--CREATE_INDEX",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Index",
                        "doc": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:category": "Optional Arguments",
                        "id": "create_md5_file",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--CREATE_MD5_FILE",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Md5 File",
                        "doc": "Whether to create an MD5 digest for any BAM or FASTQ files created. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:toolDefaultValue": "500000",
                        "sbg:category": "Optional Arguments",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--MAX_RECORDS_IN_RAM",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Records In Ram",
                        "doc": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000."
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:category": "Optional Arguments",
                        "id": "quiet",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--QUIET",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quiet",
                        "doc": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence file. Default value: null.",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "sbg:category": "Optional Arguments",
                        "id": "validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--VALIDATION_STRINGENCY",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Validation Stringency",
                        "doc": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:toolDefaultValue": "INFO",
                        "sbg:category": "Optional Arguments",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--VERBOSITY",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "do_not_clip_intervals",
                        "type": "boolean?",
                        "label": "Clip Intervals",
                        "doc": "Clip intervals name from output file name"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job in MB",
                        "doc": "Memory per job in MB."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per jobin MB",
                        "doc": "Memory overhead per job."
                    }
                ],
                "outputs": [
                    {
                        "id": "output",
                        "doc": "The merged VCF file. File format is determined by file extension.",
                        "label": "The merged VCF file.",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "${\n    inputs = [].concat(inputs.input)\n\n    if (inputs[0].path.endsWith('.gz'))\n        return '*.vcf.gz'\n    else\n        return '*.vcf'\n}",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.input)\n\n}"
                        },
                        "secondaryFiles": [
                            ".idx"
                        ],
                        "sbg:fileTypes": "VCF"
                    }
                ],
                "doc": "Merges multiple sorted VCF files into one VCF file. \n\n\n###**Common Use Cases**  \nThe most frequent use case is gathering and merging VCF files from HaplotypeCaller scatter jobs.\n\n###**Changes Introduced by Seven Bridges**\nName of the output VCF is given by searching for the common prefix in input VCF files.\n\n###**Common Issues and Important Notes**  \nInput files must be sorted by their contigs and, within contigs, by start position. The input files must have the same sample and contig lists. \n\nAn index file is created and a sequence dictionary is required by default.\n\nThrows IllegalArgumentException if the contig lists are not present in the input files, are not identical or if the sample lists are not the same;this class uses the GATK to merge headers, which may throw exceptions if the headers cannot be merged. See VCFUtils.smartMergeHeaders for details.\nAn index file is created for the output file by default. Using an output file name with a \".gz\" extension will create gzip-compressed output.",
                "label": "GATK MergeVcfs",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/usr/gitc/gatk4/gatk-launch"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--javaOptions"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n    return '\\\"-Xmx2048M\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "MergeVcfs"
                    },
                    {
                        "prefix": "--output",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    function find_prefix(variants) {\n        var prefix = ''\n        var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n\n        // Finds longest common prefix between variant names\n        for (var i = 1; i < variants.length; ++i) {\n            var j = 0;\n            var current = variants[i].path.replace(/^.*[\\\\\\/]/, '')\n\n            while (first[j] == current[j] &&\n                j < (first.length - 1) &&\n                j < (current.length - 1)) ++j\n\n            // Inits prefixs or shortens it\n            if (i == 1 || prefix.length > j)\n                prefix = first.slice(0, j)\n        }\n\n        // Clips trailing characters\n        while (prefix.endsWith('.') || prefix.endsWith('_') || prefix.endsWith('-'))\n            prefix = prefix.slice(0, prefix.length - 1)\n\n        return prefix\n    }\n\n\n    var variants = [].concat(inputs.input)\n\n    if (!inputs.do_not_clip_intervals && variants.length > 1) {\n        var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n\n        var extensions = ''\n\n        if (first.endsWith('.g.vcf'))\n            extensions = '.g.vcf'\n        else if (first.endsWith('.vcf'))\n            extensions = '.vcf'\n        else if (first.endsWith('.g.vcf.gz'))\n            extensions = '.g.vcf.gz'\n        else if (first.endsWith('.vcf.gz'))\n            extensions = '.vcf.gz'\n\n        var prefix = find_prefix(variants)\n\n        if (prefix.length > 0)\n            return prefix + extensions\n        else\n            return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n    } else\n        return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    inputs = inputs.input\n\n    cmd = []\n\n    for (i = 0; i < inputs.length; i++) {\n        cmd.push('--input', inputs[i].path)\n    }\n\n    return cmd.join(' ')\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "GATK-4"
                ],
                "sbg:cmdPreview": "/gatk/gatk --java-options \"-Xmx1M\" MergeVcfs --OUTPUT input-1.vcf  --INPUT /path/to/input-1.vcf --INPUT /path/to/input-2.vcf --INPUT /path/to/input-3.vcf",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolkitVersion": "4.beta.5",
                "sbg:toolkit": "GATK",
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
                        "label": "Documentation"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/download/",
                        "label": "Download"
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555340122,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555340735,
                        "sbg:revisionNotes": "latest docker images.sbgenomics.com/vladimirk/gatk:4.1.0.0"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555342780,
                        "sbg:revisionNotes": "docker and cmd"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555343344,
                        "sbg:revisionNotes": "prefixes fix"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555344275,
                        "sbg:revisionNotes": "description"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555346082,
                        "sbg:revisionNotes": "just added test files names"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555346366,
                        "sbg:revisionNotes": "do_not_clip_intervals instead clip_intervals"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555348454,
                        "sbg:revisionNotes": "add secondary .idx file for vcf output file"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/mergevcfs/7",
                "sbg:revision": 7,
                "sbg:revisionNotes": "add secondary .idx file for vcf output file",
                "sbg:modifiedOn": 1555348454,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1555340122,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "vladimirk_user",
                    "stefan_stojanovic",
                    "vladimirk"
                ],
                "sbg:latestRevision": 7,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "aa536579339082f69a64d3b1bf5df1c3a2c916b480796122d685b951826fea402"
            },
            "label": "GATK MergeVcfs",
            "sbg:x": 3072.87109375,
            "sbg:y": -704.148193359375
        },
        {
            "id": "variant_effect_predictor_90_5_cwl1_0",
            "in": [
                {
                    "id": "in_variants",
                    "source": "mergevcfs_1/output"
                },
                {
                    "id": "cache_file",
                    "source": "vep_cache_file"
                },
                {
                    "id": "cpu_per_job",
                    "default": 4
                },
                {
                    "id": "in_references",
                    "source": [
                        "reference_sequence"
                    ]
                },
                {
                    "id": "variant_class",
                    "default": false
                },
                {
                    "id": "humdiv",
                    "default": true
                },
                {
                    "id": "sift",
                    "default": "both (prediction and score)"
                },
                {
                    "id": "polyphen",
                    "default": "both (prediction and score)"
                },
                {
                    "id": "domains",
                    "default": true
                },
                {
                    "id": "gene_phenotype",
                    "default": true
                },
                {
                    "id": "total_length",
                    "default": true
                },
                {
                    "id": "nearest",
                    "default": "transcript"
                },
                {
                    "id": "hgvs",
                    "default": true
                },
                {
                    "id": "hgvsg",
                    "default": true
                },
                {
                    "id": "protein",
                    "default": true
                },
                {
                    "id": "symbol",
                    "default": true
                },
                {
                    "id": "uniprot",
                    "default": true
                },
                {
                    "id": "shift_hgvs",
                    "default": "Shift (1)"
                },
                {
                    "id": "pubmed",
                    "default": true
                },
                {
                    "id": "af",
                    "default": true
                },
                {
                    "id": "af_1kg",
                    "default": true
                },
                {
                    "id": "af_esp",
                    "default": true
                },
                {
                    "id": "af_gnomad",
                    "default": true
                },
                {
                    "id": "output_format",
                    "default": "vcf"
                }
            ],
            "out": [
                {
                    "id": "vep_output_file"
                },
                {
                    "id": "compressed_vep_output"
                },
                {
                    "id": "summary_file"
                },
                {
                    "id": "warning_file"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "tamara_drljaca/targetni-exom-pilot/variant-effect-predictor-90-5-cwl1-0/1",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Input options",
                        "id": "in_variants",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--input_file",
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Input VCF",
                        "doc": "Input VCF file to annotate.",
                        "sbg:fileTypes": "VCF, VCF.GZ"
                    },
                    {
                        "sbg:category": "Cache options",
                        "id": "cache_file",
                        "type": "File",
                        "label": "Species cache file",
                        "doc": "Cache file for the chosen species.",
                        "sbg:fileTypes": "TAR.GZ"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "8",
                        "id": "cpu_per_job",
                        "type": "int?",
                        "label": "Number of CPUs",
                        "doc": "Number of CPUs to use."
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "15000",
                        "id": "mem_per_job",
                        "type": "int?",
                        "label": "Memory to use for the task",
                        "doc": "Assign memory for the execution in MB."
                    },
                    {
                        "sbg:category": "Input options",
                        "sbg:toolDefaultValue": "Use found assembly version",
                        "id": "assembly",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "GRCh37",
                                    "GRCh38"
                                ],
                                "name": "assembly"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--assembly",
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Assembly version",
                        "doc": "Select the assembly version to use if more than one available. If using the cache, you must have the appropriate assembly's cache file installed. If not specified and you have only 1 assembly version installed, this will be chosen by default. For homo sapiens use either GRCh38 or GRCh37."
                    },
                    {
                        "sbg:category": "Cache options",
                        "id": "in_references",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "--fasta",
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Fasta file(s) to use to look up reference sequence",
                        "doc": "Specify a FASTA file or a directory containing FASTA files to use to look up reference sequence. The first time you run the script with this parameter an index will be built which can take a few minutes. This is required if fetching HGVS annotations (--hgvs) or checking reference sequences (--check_ref) in offline mode (--offline), and optional with some performance increase in cache mode (--cache).",
                        "sbg:fileTypes": "FASTA, FA, FA.GZ, FASTA.GZ"
                    },
                    {
                        "sbg:category": "Basic options",
                        "sbg:toolDefaultValue": "8",
                        "id": "fork",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--fork",
                            "shellQuote": false,
                            "position": 0,
                            "valueFrom": "${\n  if (inputs.fork!=-1)\n  {\n    return inputs.fork;\n  }\n  else if (inputs.cpu_per_job)\n  {\n    return inputs.cpu_per_job;\n  }\n  else\n  {\n    return 8;\n  }\n}\n    "
                        },
                        "label": "Fork number",
                        "doc": "Enable forking, using the specified number of forks. Forking can dramatically improve the runtime of the script. Not used by default.",
                        "default": -1
                    },
                    {
                        "sbg:category": "Cache options",
                        "sbg:toolDefaultValue": "20000",
                        "id": "buffer_size",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--buffer_size",
                            "shellQuote": false,
                            "position": 0,
                            "valueFrom": "${\n  if (inputs.buffer_size!=-1 && inputs.buffer_size>1000)\n  \treturn inputs.buffer_size;\n  else\n    return 20000;\n}"
                        },
                        "label": "Buffer size to use",
                        "doc": "Sets the internal buffer size, corresponding to the number of variations that are read in to memory simultaneously. Set this lower to use less memory at the expense of longer run time, and higher to use more memory with a faster run time. Default = 5000.",
                        "default": -1
                    },
                    {
                        "sbg:category": "Plugins",
                        "id": "dbNSFP_file",
                        "type": "File?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 0,
                            "valueFrom": "${\n if (inputs.dbNSFP_file && inputs.dbNSFP_columns!=undefined)\n {\n   var tempout=\"--plugin dbNSFP,\".concat(inputs.dbNSFP_file.path).concat(\",\").concat(inputs.dbNSFP_columns.join());\n   return tempout;\n }\n else if (inputs.dbNSFP_file)\n {\n   var tempout=\"--plugin dbNSFP,\".concat(inputs.dbNSFP_file.path, ',FATHMM_pred,MetaSVM_pred,GERP++_RS');\n   return tempout;\n }\n else\n {\n   return '';\n }\n}"
                        },
                        "label": "dbNSFP database file",
                        "doc": "dbNSFP database file used by the dbNSFP plugin. Please note that dbNSFP 3.x versions should be used for GRCh38, whereas 2.x versions correspond to GRCh37.",
                        "sbg:fileTypes": "GZ",
                        "secondaryFiles": [
                            ".tbi"
                        ]
                    },
                    {
                        "sbg:category": "Plugins",
                        "sbg:toolDefaultValue": "FATHMM_pred,MetaSVM_pred,GERP++_RS",
                        "id": "dbNSFP_columns",
                        "type": "string[]?",
                        "label": "Columns of dbNSFP to report",
                        "doc": "Columns of dbNSFP database to be included in the VCF. Please see dbNSFP readme files for a full list."
                    },
                    {
                        "sbg:category": "Plugins",
                        "id": "dbscSNV_f",
                        "type": "File?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 0,
                            "valueFrom": "${\n if (inputs.dbscSNV_f)\n {\n   var tempout=\"--plugin dbscSNV,\".concat(inputs.dbscSNV_f.path);\n   return tempout;\n }\n else\n {\n   return \"\";\n }\n}\n\n"
                        },
                        "label": "dbscSNV database file",
                        "doc": "Preprocessed database file for the dbscSNV plugin.",
                        "sbg:fileTypes": "GZ",
                        "secondaryFiles": [
                            ".tbi"
                        ]
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "id": "gff_annotation_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--gff",
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "GFF annotation file",
                        "doc": "Use GFF transcript annotations as an annotation source. Requires a FASTA file of genomic sequence.",
                        "sbg:fileTypes": "GFF.GZ",
                        "secondaryFiles": [
                            ".tbi"
                        ]
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "id": "gtf_annotation_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--gtf",
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "GTF annotation file",
                        "doc": "Use GTF transcript annotations as an annotation source. Requires a FASTA file of genomic sequence.",
                        "sbg:fileTypes": "GTF.GZ",
                        "secondaryFiles": [
                            ".tbi"
                        ]
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "id": "bam_transcript_models_corrections_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--bam",
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "NCBI BAM file for correcting transcript models",
                        "doc": "Use BAM file of sequence alignments to correct transcript models not derived from reference genome sequence. Used to correct RefSeq transcript models. Enables --use_transcript_ref; add --use_given_ref to override this behaviour. Eligible BAM inputs are available from NCBI (see VEP documentation).",
                        "sbg:fileTypes": "BAM",
                        "secondaryFiles": [
                            ".bai"
                        ]
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "id": "custom_annotation_sources",
                        "type": "File[]?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 0,
                            "valueFrom": "${\n  if (inputs.custom_annotation_sources != undefined)\n  {\n    var tempout = '';\n    for (var k = 0, len=inputs.custom_annotation_sources.length; k < len; k++)\n    {\n      if (inputs.custom_annotation_sources[k].path != '')\n      {\n        tempout = tempout.concat(' --custom ', inputs.custom_annotation_sources[k].path);\n        if ((inputs.custom_annotation_parameters[k] != 'None') && (inputs.custom_annotation_parameters[k] != undefined))\n        {\n          tempout = tempout.concat(',',inputs.custom_annotation_parameters[k]);\n        }\n      }\n    }\n  return tempout;\n  }\n}"
                        },
                        "label": "Custom annotation sources",
                        "doc": "Add custom annotation to the output. Files must be tabix indexed or in the bigWig format. Multiple files can be specified. See VEP documentation for full details.",
                        "secondaryFiles": [
                            ".tbi"
                        ]
                    },
                    {
                        "sbg:category": "Basic options",
                        "id": "config_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--config",
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Optional config file",
                        "doc": "Load configuration options from a config file. The config file should consist of whitespace-separated pairs of option names and settings. Options from this file will be overwritten by options manually supplied on the command line."
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "id": "custom_annotation_parameters",
                        "type": "string[]?",
                        "label": "Annotation parameters for custom annotation sources (comma separated values, ensembl-vep --custom flag format)",
                        "doc": "Annotation parameters for custom annotation sources, one field for each custom annotation source supplied, in the same order. If no parameters should be applied to an annotation source, please type None. Entries should follow the ensembl-vep --custom flag format."
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "id": "custom_annotation_BigWig_sources",
                        "type": "File[]?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 0,
                            "valueFrom": "${\n  if (inputs.custom_annotation_BigWig_sources != undefined)\n  {\n    var tempout = '';\n    for (var k = 0, len=inputs.custom_annotation_BigWig_sources.length; k < len; k++)\n    {\n      if (inputs.custom_annotation_BigWig_sources[k].path != '')\n      {\n        tempout = tempout.concat(' --custom ', inputs.custom_annotation_BigWig_sources[k].path);\n        if ((inputs.custom_annotation_BigWig_parameters[k] != 'None') && (inputs.custom_annotation_BigWig_parameters[k] != undefined))\n        {\n          tempout = tempout.concat(',',inputs.custom_annotation_BigWig_parameters[k]);\n        }\n      }\n    }\n  return tempout;\n  }\n}"
                        },
                        "label": "Custom annotation - BigWig sources only",
                        "doc": "Custon annotation sources - please list your BigWig annotation sources only here.",
                        "sbg:fileTypes": "BW"
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "id": "custom_annotation_BigWig_parameters",
                        "type": "string[]?",
                        "label": "Annotation parameters for custom BigWig annotation sources only",
                        "doc": "Annotation parameters for custom BigWig annotation sources. One entry per source, in order of files supplied, in ensembl-vep --custom flag format."
                    },
                    {
                        "sbg:category": "Input options",
                        "sbg:toolDefaultValue": "STDERR",
                        "id": "warning_file_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--warning_file",
                            "shellQuote": false,
                            "position": 0,
                            "valueFrom": "${\n  if (inputs.warning_file_name)\n  {\n    return inputs.warning_file_name.concat('_vep_warnings.txt');\n  }\n}"
                        },
                        "label": "Optional file name for warnings file output",
                        "doc": "File name to write warnings and errors to."
                    },
                    {
                        "sbg:category": "Output options",
                        "id": "individuals_to_annotate",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "--individual",
                            "itemSeparator": ",",
                            "shellQuote": false,
                            "position": 1,
                            "valueFrom": "${\n  if (inputs.individuals_to_annotate)\n  {\n    return inputs.individuals_to_annotate;\n  }\n}"
                        },
                        "label": "Samples to annotate [--individual]",
                        "doc": "Consider only alternate alleles present in the genotypes of the specified individual(s). May be a single individual, a list of samples or \"all\" to assess all individuals separately. Individual variant combinations homozygous for the given reference allele will not be reported. Each individual and variant combination is given on a separate line of output. Only works with VCF files containing individual genotype data; individual IDs are taken from column headers. Not used by default."
                    },
                    {
                        "sbg:category": "Basic options",
                        "sbg:toolDefaultValue": "False",
                        "id": "everything",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--everything",
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Shortcut flag to turn on most commonly used annotations [--everything]",
                        "doc": "Shortcut flag to switch on all of the following: --sift b, --polyphen b, --ccds, --uniprot, --hgvs, --symbol, --numbers, --domains, --regulatory, --canonical, --protein, --biotype, --uniprot, --tsl, --appris, --gene_phenotype --af, --af_1kg, --af_esp, --af_gnomad, --max_af, --pubmed, --variant_class."
                    },
                    {
                        "sbg:category": "Cache options",
                        "sbg:toolDefaultValue": "90",
                        "id": "cache_version",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cache_version",
                            "shellQuote": false,
                            "position": 2
                        },
                        "label": "Version of VEP cache if not default",
                        "doc": "Use a different cache version than the assumed default (the VEP version). This should be used with Ensembl Genomes caches since their version numbers do not match Ensembl versions. For example, the VEP/Ensembl version may be 74 and the Ensembl Genomes version 21. Not used by default."
                    },
                    {
                        "sbg:category": "Cache options",
                        "sbg:toolDefaultValue": "Ensembl cache",
                        "id": "cache_type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "Ensembl cache",
                                    "RefSeq cache",
                                    "Merged cache"
                                ],
                                "name": "cache_type"
                            }
                        ],
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 2,
                            "valueFrom": "${\n  if (inputs.cache_type)\n  {\n    if (inputs.cache_type=='RefSeq cache')\n    {\n      return '--refseq';\n    }\n    else if (inputs.cache_type=='Merged cache')\n    {\n      return '--merged';\n    }\n    else\n    {\n      return '';\n    }\n  }\n  else\n  {\n    return '';\n  }\n}"
                        },
                        "label": "Specify whether the cache used is an Ensembl, RefSeq or merged VEP cache",
                        "doc": "Specify whether the cache used is an Ensembl, RefSeq or merged VEP cache (--refseq or --merged). Ensembl is the default and does not have to be specified as such.  Specify this option if you have installed the RefSeq cache in order for VEP to pick up the alternate cache directory. This cache contains transcript objects corresponding to RefSeq transcripts (to include CCDS and Ensembl ESTs also, use --all_refseq). Consequence output will be given relative to these transcripts in place of the default Ensembl transcripts.  Use the merged Ensembl and RefSeq cache. Consequences are flagged with the SOURCE of each transcript used."
                    },
                    {
                        "sbg:category": "Input options",
                        "sbg:toolDefaultValue": "False",
                        "id": "no_stats",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--no_stats",
                            "shellQuote": false,
                            "position": 2
                        },
                        "label": "Do not generate a stats file [--no_stats]",
                        "doc": "Don't generate a stats file. Provides marginal gains in run time."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "variant_class",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--variant_class",
                            "shellQuote": false,
                            "position": 3
                        },
                        "label": "Output Sequence Ontology variant class",
                        "doc": "Output the Sequence Ontology variant class. Not used by default."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "humdiv",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--humdiv",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "PolyPhen2 HumDiv",
                        "doc": "Retrieve the humDiv PolyPhen prediction instead of the defaulat humVar. Not used by default.HumDiv-trained model should be used for evaluating rare alleles at loci potentially involved in complex phenotypes, dense mapping of regions identified by genome-wide association studies, and analysis of natural selection from sequence data, where even mildly deleterious alleles must be treated as damaging. Human only."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "sift",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "prediction",
                                    "score",
                                    "both (prediction and score)"
                                ],
                                "name": "sift"
                            }
                        ],
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n  if (inputs.sift)\n  {\n    if (inputs.sift == 'prediction')\n    {\n      return '--sift p';\n    }\n    else if (inputs.sift == 'score')\n    {\n      return '--sift s';\n    }\n    else if (inputs.sift == 'both (prediction and score)')\n    {\n      return '--sift b';\n    }\n  }\n}"
                        },
                        "label": "SIFT prediction",
                        "doc": "SIFT predicts whether an amino acid substitution affects protein function based on sequence homology and the physical properties of amino acids. VEP can output the prediction term, score or both. Not used by default"
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "Not used by default.",
                        "id": "polyphen",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "prediction",
                                    "score",
                                    "both (prediction and score)"
                                ],
                                "name": "polyphen"
                            }
                        ],
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 4,
                            "valueFrom": "${\n  if (inputs.polyphen)\n  {\n    if (inputs.polyphen == 'prediction')\n    {\n      return '--polyphen p';\n    }\n    else if (inputs.polyphen == 'score')\n    {\n      return '--polyphen s';\n    }\n    else if (inputs.polyphen == 'both (prediction and score)')\n    {\n      return '--polyphen b';\n    }\n  }\n}"
                        },
                        "label": "PolyPhen prediction",
                        "doc": "PolyPhen is a tool which predicts possible impact of an amino acid substitution on the structure and function of a human protein using straightforward physical and comparative considerations. VEP can output the prediction term, score or both. VEP uses the humVar score by default - please set the additional humDiv option to retrieve the humDiv score. Not used by default. Human only."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "domains",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--domains",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Overlapping protein domains",
                        "doc": "Adds names of overlapping protein domains to output."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "no_escape",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--no_escape",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "No url escaping HGSV strings",
                        "doc": "Don't URI escape HGVS strings."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "5000",
                        "id": "distance",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--distance",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Distance",
                        "doc": "Modify the distance up and/or downstream between a variant and a transcript for which VEP will assign the upstream_gene_variant or downstream_gene_variant consequences. Giving one distance will modify both up- and downstream distances; prodiving two separated by commas will set the up- (5') and down- (3') stream distances respectively. Default: 5000"
                    },
                    {
                        "sbg:category": "Output options",
                        "id": "gene_phenotype",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--gene_phenotype",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Connect overlapped gene with phenotype",
                        "doc": "Indicates if the overlapped gene is associated with a phenotype, disease or trait. Not used by default."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "keep_csq",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--keep_csq",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Keep existing CSQ entries in the input VCF INFO field",
                        "doc": "Don't overwrite existing CSQ entry in VCF INFO field. Overwrites by default."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "Sequence Ontology",
                        "id": "terms",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "Sequence Ontology",
                                    "Ensembl"
                                ],
                                "name": "terms"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--terms",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n  if (inputs.terms)\n  {\n    if (inputs.terms == 'Sequence Ontology')\n    {\n      return 'SO';\n    }\n    else if (inputs.terms == 'Ensembl')\n    {\n      return 'ensembl';\n    }\n  }\n}"
                        },
                        "label": "Type of consequence terms to report",
                        "doc": "Type of consequence terms to output (Ensembl or Sequence Ontology) Default = Sequence Ontology."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "numbers",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--numbers",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Adds affected exon and intron numbering",
                        "doc": "Adds affected exon and intron numbering to to output. Format is Number/Total. Not used by default."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "total_length",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--total_length",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Add cDNA, CDS and protein positions (position/length)",
                        "doc": "Give cDNA, CDS and protein positions as Position/Length. Not used by default."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "CSQ",
                        "id": "vcf_info_field",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--vcf_info_field",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "VCF info field name",
                        "doc": "Change the name of the INFO key that VEP write the consequences to in its VCF output. Use \"ANN\" for compatibility with other tools such as snpEff. Default: CSQ."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "Not used by default",
                        "id": "nearest",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "transcript",
                                    "gene",
                                    "symbol"
                                ],
                                "name": "nearest"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--nearest",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n  if (inputs.nearest)\n  {\n    return inputs.nearest;\n  }\n}"
                        },
                        "label": "Retrieve nearest transcript/gene",
                        "doc": "Retrieve the transcript or gene with the nearest protein-coding transcription start site (TSS) to each input variant. Use \"transcript\" to retrieve the transcript stable ID, \"gene\" to retrieve the gene stable ID, or \"symbol\" to retrieve the gene symbol. Note that the nearest TSS may not belong to a transcript that overlaps the input variant, and more than one may be reported in the case where two are equidistant from the input coordinates."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "allele_number",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--allele_number",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Identify allele number from VCF input",
                        "doc": "Identify allele number from VCF input, where 1 = first ALT allele, 2 = second ALT allele etc. Useful when using --minimal. Not used by default."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "no_headers",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--no_headers",
                            "shellQuote": false,
                            "position": 5
                        },
                        "label": "Do not write header lines to output files",
                        "doc": "Do not write header lines in output files."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "False",
                        "id": "regulatory",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--regulatory",
                            "shellQuote": false,
                            "position": 6
                        },
                        "label": "Report overlaps with regulatory regions [--regulatory]",
                        "doc": "Look for overlaps with regulatory regions. The script can also call if a variant falls in a high information position within a transcription factor binding site. Output lines have a Feature type of RegulatoryFeature or MotifFeature. Not used by default."
                    },
                    {
                        "sbg:category": "Output options",
                        "sbg:toolDefaultValue": "Not used by default",
                        "id": "cell_type",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "--cell_type",
                            "itemSeparator": ",",
                            "shellQuote": false,
                            "position": 6,
                            "valueFrom": "${\n  if (inputs.cell_type)\n  {\n    return inputs.cell_type;\n  }\n}"
                        },
                        "label": "Cell type(s) to report regulatory regions for",
                        "doc": "Report only regulatory regions that are found in the given cell type(s). Can be a single cell type or a comma-separated list. The functional type in each cell type is reported under CELL_TYPE in the output."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "id": "synonyms",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--synonyms",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Chromosome synonyms",
                        "doc": "Load a file of chromosome synonyms. File should be tab-delimited with the primary identifier in column 1 and the synonym in column 2. Synonyms are used bi-directionally so columns may be switched. Synoyms allow you to use different chromosome identifiers in your input file to those used in any annotation source used (cache, DB).",
                        "sbg:fileTypes": "TSV, TXT"
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "appris",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--appris",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add APPRIS identifiers",
                        "doc": "Adds the APPRIS isoform annotation for this transcript to the output. Not available for GRCh37. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "xref_refseq",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--xref_refseq",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Output aligned RefSeq mRNA identifier",
                        "doc": "Output aligned RefSeq mRNA identifier for transcript. NB: theRefSeq and Ensembl transcripts aligned in this way MAY NOT, AND FREQUENTLY WILL NOT, match exactly in sequence, exon structure and protein product."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "hgvs",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--hgvs",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add HGVS identifiers",
                        "doc": "Add HGVS nomenclature based on Ensembl stable identifiers to the output. Both coding and protein sequence names are added where appropriate. A FASTA file is required to generate HGVS identifiers on SBPLA. HGVS notations given on Ensembl identifiers are versioned. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "hgvsg",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--hgvsg",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add genomic HGVS identifiers",
                        "doc": "Add genomic HGVS nomenclature based on the input chromosome name. FASTA file is required. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "protein",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--protein",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add Ensembl protein identifiers",
                        "doc": "Add Ensembl protein identifiers to the output where appropriate. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "symbol",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--symbol",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add gene symbols where available",
                        "doc": "Adds the gene symbol (e.g. HGNC) (where available) to the output. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "ccds",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--ccds",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add CCDS transcript identifers",
                        "doc": "Add CCDS transcript identifers (where available) to the output. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "uniprot",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--uniprot",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add UniProt-associated database identifiers",
                        "doc": "Adds best match accessions for translated protein products from three UniProt-related databases (SWISSPROT, TREMBL and UniParc) to the output. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "tsl",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--tsl",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add transcript support level",
                        "doc": "Add transcript support level for this transcript to the output. Note: not available for GRCh37.Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "canonical",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--canonical",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add a flag indicating if the transcript is canonical",
                        "doc": "Adds a flag indicating if the transcript is the canonical transcript for the gene. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "False",
                        "id": "biotype",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--biotype",
                            "shellQuote": false,
                            "position": 8
                        },
                        "label": "Add biotype of transcript or regulatory feature",
                        "doc": "Adds the biotype of the transcript or regulatory feature. Not used by default."
                    },
                    {
                        "sbg:category": "Identifiers",
                        "sbg:toolDefaultValue": "Shift (1)",
                        "id": "shift_hgvs",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "Do not shift (0)",
                                    "Shift (1)"
                                ],
                                "name": "shift_hgvs"
                            }
                        ],
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 8,
                            "valueFrom": "${\n  if (inputs.shift_hgvs == 'Do not shift (0)')\n  {\n    return \"--shift_hgvs 0\";\n  }\n  else if (inputs.shift_hgvs == 'Shift (1)')\n  {\n    return \"--shift_hgvs 1\";\n  }\n}"
                        },
                        "label": "Enable or disable 3' shifting of HGVS notations",
                        "doc": "Enable or disable 3' shifting of HGVS notations. When enabled, this causes ambiguous insertions or deletions (typically in repetetive sequence tracts) to be \"shifted\" to their most 3' possible coordinates (relative to the transcript sequence and strand) before the HGVS notations are calculated; the flag HGVS_OFFSET is set to the number of bases by which the variant has shifted, relative to the input genomic coordinates. Disabling retains the original input coordinates of the variant. Default: 1 (shift)."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "Exclude failed variants [0]",
                        "id": "failed",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "Exclude failed variants [0]",
                                    "Include failed variants [1]"
                                ],
                                "name": "failed"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--failed",
                            "shellQuote": false,
                            "position": 10,
                            "valueFrom": "${\n  if (inputs.failed)\n  {\n    if (inputs.failed == 'Include failed variants [1]')\n    {\n      return '1';\n    }\n    else if (inputs.failed == 'Exclude failed variants [0]')\n    {\n      return '0';\n    }\n  }\n}"
                        },
                        "label": "Include failed collocated variants",
                        "doc": "When checking for co-located variants, by default the script will exclude variants that have been flagged as failed. Set this flag to include such variants. Default: 0 (exclude)."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "check_existing",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--check_existing",
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Check for co-located known variants",
                        "doc": "Check for the existence of known variants that are co-located with your input. By default the alleles are compared and variants on an allele-specific basis - to compare only coordinates, use --no_check_alleles option.  Some databases may contain variants with unknown (null) alleles and these are included by default; to exclude them use --exclude_null_alleles."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "pubmed",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--pubmed",
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Report Pubmed IDs for publications that cite an existing variant",
                        "doc": "Report Pubmed IDs for publications that cite existing variant. Must be used with a vep cache. Not used by default."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "af",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--af",
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Add 1000 genomes phase 3 global allele frequency",
                        "doc": "Add the global allele frequency (AF) from 1000 Genomes Phase 3 data for any known co-located variant to the output. For this and all --af_* flags, the frequency reported is for the input allele only, not necessarily the non-reference or derived allele. Supercedes --gmaf.Not used by default."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "af_1kg",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--af_1kg",
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Add allele frequency from continental 1000 genomes populations",
                        "doc": "Add allele frequency from continental populations (AFR,AMR,EAS,EUR,SAS) of 1000 Genomes Phase 3 to the output. Must be used with --cache. Supercedes --maf_1kg. Not used by default."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "af_esp",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--af_esp",
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Add allele frequency from NHLBI-ESP populations",
                        "doc": "Include allele frequency from NHLBI-ESP populations. Must be used with --cache. Supercedes --maf_esp. Not used by default."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "af_gnomad",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "",
                            "shellQuote": false,
                            "position": 10,
                            "valueFrom": "${\n  if ((inputs.cache_version) && (inputs.cache_version < 90) && (inputs.af_gnomad))\n  {\n    return '--af_exac';\n  }\n  else if (inputs.af_gnomad)\n  {\n    return '--af_gnomad';\n  }\n}"
                        },
                        "label": "Add gnomAD allele frequencies (or ExAc frequencies with cache < 90)",
                        "doc": "Include allele frequency from Genome Aggregation Database (gnomAD) exome populations. Note only data from the gnomAD exomes are included; to retrieve data from the additional genomes data set, please see ensembl-vep documentation. Must be used with --cache Not used by default. If a vep cache version < 90 is used, the ExAc frequencies are reported instead."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "exclude_null_alleles",
                        "type": "boolean?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 10,
                            "valueFrom": "${\n  if (inputs.check_existing)\n  {\n    if (inputs.exclude_null_alleles)\n    {\n      return '--exclude_null_alleles';\n    }\n  }\n  else\n  {\n    return '';\n  }\n}\n    "
                        },
                        "label": "Exclude null alleles when checking co-located variants",
                        "doc": "Do not include variants with unknown alleles when checking for co-located variants. The human variation database contains variants from HGMD and COSMIC for which the alleles are not publically available; by default these are included when using --check_existing, use this flag to exclude them. Not used by default."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "no_check_alleles",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--no_check_alleles",
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Do not check alleles of co-located variants",
                        "doc": "When checking for existing variants, by default VEP only reports a co-located variant if none of the input alleles are novel. For example, if the user input has alleles A/G, and an existing co-located variant has alleles A/C, the co-located variant will not be reported.  Strand is also taken into account - in the same example, if the user input has alleles T/G but on the negative strand, then the co-located variant will be reported since its alleles match the reverse complement of user input.  Use this flag to disable this behaviour and compare using coordinates alone. Not used by default."
                    },
                    {
                        "sbg:category": "Co-located variants",
                        "sbg:toolDefaultValue": "False",
                        "id": "max_af",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--max_af",
                            "shellQuote": false,
                            "position": 10
                        },
                        "label": "Report highest allele frequency observed in 1000 genomes, ESP or gnomAD populations",
                        "doc": "Report the highest allele frequency observed in any population from 1000 genomes, ESP or gnomAD. Not used by default."
                    },
                    {
                        "sbg:category": "Data format options",
                        "sbg:toolDefaultValue": "Not used by default",
                        "id": "compress_output",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "gzip",
                                    "bgzip"
                                ],
                                "name": "compress_output"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--compress_output",
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Compress output",
                        "doc": "Writes output compressed using either gzip or bgzip. Not used by default"
                    },
                    {
                        "sbg:category": "Data format options",
                        "sbg:toolDefaultValue": "vcf",
                        "id": "output_format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "vcf",
                                    "tab",
                                    "json"
                                ],
                                "name": "output_format"
                            }
                        ],
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 11,
                            "valueFrom": "${\n  if (inputs.output_format!='vcf')\n  {\n    if (inputs.output_format == 'tab')\n    {\n      return '--tab';\n    }\n    else if (inputs.output_format == 'json')\n    {\n      return '--json';\n    }\n  }\n  else if (inputs.output_format=='vcf')\n  {\n    return '--vcf';\n  }\n  else if (!inputs.most_severe)\n  {\n    return '--vcf';\n  }\n}"
                        },
                        "label": "Output format",
                        "doc": "Format in which to write the output. VCF by default.",
                        "default": "vcf"
                    },
                    {
                        "sbg:category": "Data format options",
                        "sbg:toolDefaultValue": "Not used by default",
                        "id": "fields",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "--fields",
                            "itemSeparator": ",",
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Fields to configure the output format (VCF or tab only) with",
                        "doc": "Configure the output format using a list of fields. Fields may be those present in the default output columns, or any of those that appear in the Extra column (including those added by plugins or custom annotations). Output remains tab-delimited. Can only be used with tab or VCF format output. Not used by default."
                    },
                    {
                        "sbg:category": "Data format options",
                        "sbg:toolDefaultValue": "False",
                        "id": "minimal",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--minimal",
                            "shellQuote": false,
                            "position": 11
                        },
                        "label": "Convert alleles to minimal representation before assigning consequences",
                        "doc": "Convert alleles to their most minimal representation before consequence calculation i.e. sequence that is identical between each pair of reference and alternate alleles is trimmed off from both ends, with coordinates adjusted accordingly. Note this may lead to discrepancies between input coordinates and coordinates reported by VEP relative to transcript sequences; to avoid issues, use --allele_number and/or ensure that your input variants have unique identifiers. The MINIMISED flag is set in the VEP output where relevant. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "dont_skip",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont_skip",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Do not skip input variants that fail validation",
                        "doc": "Don't skip input variants that fail validation, e.g. those that fall on unrecognised sequences."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "allow_non_variant",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--allow_non_variant",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Keep non-variant lines (null ALT) in the VEP VCF output",
                        "doc": "When using VCF format as input and output, by default VEP will skip non-variant lines of input (where the ALT allele is null). Enabling this option the lines will be printed in the VCF output with no consequence data added."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "check_ref",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--check_ref",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Check REF allele against provided reference sequence",
                        "doc": "Force the script to check the supplied reference allele against the sequence stored in the Ensembl Core database or supplied FASTA file. Lines that do not match are skipped. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "gencode_basic",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--gencode_basic",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Limit analysis to GENCODE basic transcript set",
                        "doc": "Limit your analysis to transcripts belonging to the GENCODE basic set. This set has fragmented or problematic transcripts removed. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "all_refseq",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--all_refseq",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Include Ensembl identifiers when using RefSeq and merged caches",
                        "doc": "When using the RefSeq or merged cache, include e.g. CCDS and Ensembl EST transcripts in addition to those from RefSeq (see documentation). Only works when using --refseq or --merged."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "exclude_predicted",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--exclude_predicted",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Exclude predicted transcripts when using RefSeq or merged cache",
                        "doc": "When using RefSeq or merged caches, exclude predicted transcripts (i.e. those with identifiers beginning with \"XM_\" or \"XR_\")."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "id": "transcript_filter",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--transcript_filter",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Filter transcripts according to arbitrary rules",
                        "doc": "Filter transcripts according to any arbitrary set of rules. Uses similar notation to filter_vep.  You may filter on any key defined in the root of the transcript object; most commonly this will be \"stable_id\":  --transcript_filter \"stable_id match N[MR]_\"."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "Not used by default",
                        "id": "chromosome_select",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--chr",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Select a subset of chromosomes to analyse",
                        "doc": "Select a subset of chromosomes to analyse from your file. Any data not on this chromosome in the input will be skipped. The list can be comma separated, with \"-\" characters representing an interval. For example, to include chromosomes 1, 2, 3, 10 and X you could use --chr 1-3,10,X Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "coding_only",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--coding_only",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Only return consequences that fall in the coding regions of transcripts",
                        "doc": "Only return consequences that fall in the coding regions of transcripts. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "no_intergenic",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--no_intergenic",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Exclude intergenic consequences from the output",
                        "doc": "Do not include intergenic consequences in the output. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "most_severe",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--most_severe",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Output only the most severe consequence per variant",
                        "doc": "Output only the most severe consequence per variant. Transcript-specific columns will be left blank. Consequence ranks are given in this table. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "summary",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--summary",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Output only a comma-separated list of all observed consequences per variant",
                        "doc": "Output only a comma-separated list of all observed consequences per variant. Transcript-specific columns will be left blank. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "filter_common",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--filter_common",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Exclude variants with a common (>1 % AF) co-located variant",
                        "doc": "Shortcut flag for the filters below - this will exclude variants that have a co-located existing variant with global AF > 0.01 (1%). May be modified using any of the freq_* filters. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "pick",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--pick",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Pick one line or block of consequence data per variant, including transcript-specific columns",
                        "doc": "Pick one line or block of consequence data per variant, including transcript-specific columns. Consequences are chosen according to the criteria described here, and the order the criteria are applied may be customised with --pick_order. This is the best method to use if you are interested only in one consequence per variant. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "pick_allele",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--pick_allele",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Pick one line or block of consequence data per variant allele",
                        "doc": "Like --pick, but chooses one line or block of consequence data per variant allele. Will only differ in behaviour from --pick when the input variant has multiple alternate alleles. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "per_gene",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--per_gene",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Output only the most severe consequence per gene",
                        "doc": "Output only the most severe consequence per gene. The transcript selected is arbitrary if more than one has the same predicted consequence. Uses the same ranking system as --pick. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "pick_allele_gene",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--pick_allele_gene",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Pick one line or block of consequence data per variant allele and gene combination",
                        "doc": "Like --pick_allele, but chooses one line or block of consequence data per variant allele and gene combination. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "flag_pick",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--flag_pick",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Pick one line or block of consequence data per variant with PICK flag",
                        "doc": "Pick one line or block of consequence data per variant, including transcript-specific columns, but add the PICK flag to the chosen block of consequence data and retains others. Not used by default.."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "flag_pick_allele",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--flag_pick_allele",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Pick one line or block of consequence data per variant allele, with PICK flag",
                        "doc": "As per --pick_allele, but adds the PICK flag to the chosen block of consequence data and retains others. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "flag_pick_allele_gene",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--flag_pick_allele_gene",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Pick one line or block of consequence data per variant allele and gene combination, with PICK flag",
                        "doc": "As per --pick_allele_gene, but adds the PICK flag to the chosen block of consequence data and retains others. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "canonical,appris,tsl,biotype,ccds,rank,length",
                        "id": "pick_order",
                        "type": "string[]?",
                        "inputBinding": {
                            "prefix": "--pick_order",
                            "itemSeparator": ",",
                            "shellQuote": false,
                            "position": 15
                        },
                        "label": "Customise the order of criteria applied when picking a block of annotation data",
                        "doc": "Customise the order of criteria applied when choosing a block of annotation data with e.g. --pick. Valid criteria are: canonical,appris,tsl,biotype,ccds,rank,length."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "False",
                        "id": "check_frequency",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--check_frequency",
                            "shellQuote": false,
                            "position": 16
                        },
                        "label": "Use frequency filtering",
                        "doc": "Turns on frequency filtering. Use this to include or exclude variants based on the frequency of co-located existing variants in the Ensembl Variation database. You must also specify all of the associated --freq_* flags. Frequencies used in filtering are added to the output under the FREQS key in the Extra field. Not used by default."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "Not used by default",
                        "id": "freq_pop",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "1000 genomes combined population (global) [1KG_ALL]",
                                    "1000 genomes combined African population [1KG_AFR]",
                                    "1000 genomes combined American population [1KG_AMR]",
                                    "1000 genomes combined East Asian population [1KG_EAS]",
                                    "1000 genomes combined European population [1KG_EUR]",
                                    "1000 genomes combined South Asian population [1KG_SAS]",
                                    "NHLBI-ESP African American [ESP_AA]",
                                    "NHLBI-ESP European American [ESP_EA]",
                                    "ExAC combined population [ExAC]",
                                    "ExAC combined adjusted population [ExAC_Adj]",
                                    "ExAC African [ExAC_AFR]",
                                    "ExAC American [ExAC_AMR]",
                                    "ExAC East Asian [ExAC_EAS]",
                                    "ExAC Finnish [ExAC_FIN]",
                                    "ExAC non-Finnish European [ExAC_NFE]",
                                    "ExAC South Asian [ExAC_SAS]",
                                    "ExAC other [ExAC_OTH]"
                                ],
                                "name": "freq_pop"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--freq_pop",
                            "shellQuote": false,
                            "position": 16,
                            "valueFrom": "${\n  if (inputs.freq_pop)\n  {\n    var tempout = inputs.freq_pop.split('[').pop(1);\n    tempout = tempout.split(']')[0];\n    return tempout;\n  }\n}"
                        },
                        "label": "Population to use in the frequency filter",
                        "doc": "Name of the population to use in frequency filter."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "sbg:toolDefaultValue": "Not used by default",
                        "id": "freq_freq",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--freq_freq",
                            "shellQuote": false,
                            "position": 16
                        },
                        "label": "Allele frequency to use for filtering",
                        "doc": "Allele frequency to use for filtering. Must be a float value between 0 and 1."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "id": "freq_gt_lt",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "greater than",
                                    "less than"
                                ],
                                "name": "freq_gt_lt"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--freq_gt_lt",
                            "shellQuote": false,
                            "position": 16,
                            "valueFrom": "${\n  if (inputs.freq_gt_lt)\n  {\n    if (inputs.freq_gt_lt=='greater than')\n    {\n      return 'gt';\n    }\n    else if (inputs.freq_gt_lt=='less than')\n    {\n      return 'lt';\n    }\n  }\n}"
                        },
                        "label": "Frequency cutoff operator",
                        "doc": "Specify whether the frequency of the co-located variant must be greater than (gt) or less than (lt) the frequency filtering cutoff."
                    },
                    {
                        "sbg:category": "Filtering and QC options",
                        "id": "freq_filter",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "include",
                                    "exclude"
                                ],
                                "name": "freq_filter"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--freq_filter",
                            "shellQuote": false,
                            "position": 16
                        },
                        "label": "Specify whether to exclude or include only variants that pass the frequency filter",
                        "doc": "Specify whether to exclude or include only variants that pass the frequency filter."
                    },
                    {
                        "sbg:category": "Input options",
                        "sbg:toolDefaultValue": "Auto-detects",
                        "id": "format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ensembl",
                                    "vcf"
                                ],
                                "name": "format"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--format",
                            "shellQuote": false,
                            "position": 20
                        },
                        "label": "Input file format",
                        "doc": "Input file format - one of \"ensembl\", \"vcf\", \"pileup\", \"hgvs\", \"id\". By default, the script auto-detects the input file format. Using this option you can force the script to read the input file as Ensembl, VCF, pileup or HGVS format, a list of variant identifiers (e.g. rsIDs from dbSNP), or the output from the VEP (e.g. to add custom annotation to an existing results file using --custom)."
                    },
                    {
                        "sbg:category": "Input options",
                        "id": "input_data",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--id",
                            "shellQuote": false,
                            "position": 20
                        },
                        "label": "Raw input data string",
                        "doc": "Raw input data as a string. May be used, for example, to input a single rsID or HGVS notation quickly to vep: --input_data rs699."
                    },
                    {
                        "sbg:category": "Input options",
                        "sbg:toolDefaultValue": "variant_effect_output.txt_summary.html",
                        "id": "stats_file",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--stats_file",
                            "shellQuote": false,
                            "position": 20,
                            "valueFrom": "${\n  if (inputs.stats_file)\n  {\n    if (inputs.stats_text)\n    {\n      return inputs.stats_file.concat('_summary.txt');\n    }\n    else\n    {\n      return inputs.stats_file.concat('_summary.html');\n    }\n  }\n}"
                        },
                        "label": "Summary stats file name",
                        "doc": "Summary stats file name. This is an HTML file containing a summary of the VEP run."
                    },
                    {
                        "sbg:category": "Input options",
                        "sbg:toolDefaultValue": "False",
                        "id": "stats_text",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--stats_text",
                            "shellQuote": false,
                            "position": 20
                        },
                        "label": "Generate plain text stats file instead of HTML",
                        "doc": "Generate a plain text stats file in place of the HTML."
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "sbg:toolDefaultValue": "False",
                        "id": "use_given_ref_with_bam",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use_given_ref",
                            "shellQuote": false,
                            "position": 45
                        },
                        "label": "Use user-provided ref allele with bam",
                        "doc": "Use user-provided reference alleles when BAM files (--bam flag) are used on input."
                    },
                    {
                        "sbg:category": "Other annotation sources",
                        "sbg:toolDefaultValue": "False unless --bam is activated",
                        "id": "use_transcript_ref",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use_transcript_ref",
                            "shellQuote": false,
                            "position": 45
                        },
                        "label": "Override input reference allele with overlapped transcript ref allele",
                        "doc": "By default VEP uses the reference allele provided in the user input to calculate consequences for the provided alternate allele(s). Use this flag to force VEP to replace the user-provided reference allele with sequence derived from the overlapped transcript. This is especially relevant when using the RefSeq cache, see documentation for more details. The GIVEN_REF and USED_REF fields are set in the output to indicate any change. Not used by default."
                    },
                    {
                        "sbg:category": "Plugins",
                        "sbg:toolDefaultValue": "False",
                        "id": "use_LoFtool",
                        "type": "boolean?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 100,
                            "valueFrom": "${\n if (inputs.use_LoFtool== true)\n {\n   return \"--plugin LoFtool\";\n }\n else\n {\n   return \"\";\n }\n}"
                        },
                        "label": "Use LoFtool plugin",
                        "doc": "Activates the use of the LoFtool plugin."
                    },
                    {
                        "sbg:category": "Plugins",
                        "sbg:toolDefaultValue": "False",
                        "id": "use_MaxEntScan",
                        "type": "boolean?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 100,
                            "valueFrom": "${\n if (inputs.use_MaxEntScan== true)\n {\n   return \"--plugin MaxEntScan,/opt/ensembl-vep/plugin-files\";\n }\n else\n {\n   return \"\";\n }\n}\n\n"
                        },
                        "label": "Use MaxEntScan plugin",
                        "doc": "Activates the use of the MaxEntScan plugin."
                    },
                    {
                        "sbg:category": "Plugins",
                        "sbg:toolDefaultValue": "False",
                        "id": "use_CSN",
                        "type": "boolean?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 100,
                            "valueFrom": "${\n if (inputs.use_CSN== true)\n {\n   return \"--plugin CSN\";\n }\n else\n {\n   return \"\";\n }\n}"
                        },
                        "label": "Use CSN plugin",
                        "doc": "Activates the use of the CSN plugin."
                    },
                    {
                        "sbg:toolDefaultValue": "tool-default-output-file-name",
                        "id": "output_file_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--output_file",
                            "shellQuote": false,
                            "position": 10,
                            "valueFrom": "${\n  if (inputs.output_file_name=='tool-default-output-file-name')\n  {\n    var fileName=inputs.in_variants.path.split('/').pop();\n    var tempout=fileName.split('.vcf')[0];\n    if (inputs.output_format == 'tab')\n    {\n      tempout = tempout.concat('','.vep.tab');\n    }\n    else if (inputs.output_format == 'json')\n    {\n      tempout = tempout.concat('','.vep.json');\n    }\n    else if (inputs.compress_output)\n    {\n      tempout = tempout.concat('','.vep.vcf.gz');\n    }\n    else if (inputs.most_severe)\n    {\n      tempout = tempout.concat('','.vep.tab');\n    }\n    else\n    {\n      tempout = tempout.concat('','.vep.vcf');\n    }\n    return tempout;    \n  }\n  else\n  {\n    var tempout = inputs.output_file_name;\n    if (inputs.output_format == 'tab')\n    {\n      tempout = tempout.concat('','.vep.tab');\n    }\n    else if (inputs.output_format == 'json')\n    {\n      tempout = tempout.concat('','.vep.json');\n    }\n    else if (inputs.compress_output)\n    {\n      tempout = tempout.concat('','.vep.vcf.gz');\n    }\n    else\n    {\n      tempout = tempout.concat('','.vep.vcf');  \n    }\n    return tempout;\n  }\n}"
                        },
                        "label": "Output file name",
                        "doc": "Output file name.",
                        "default": "tool-default-output-file-name"
                    }
                ],
                "outputs": [
                    {
                        "id": "vep_output_file",
                        "doc": "Output file (annotated VCF) from VEP.",
                        "label": "VEP output file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "{*.vep.vcf,*.vep.json,*.vep.txt,*.vep.tab}",
                            "outputEval": "$(inheritMetadata(self, inputs.in_variants))"
                        },
                        "sbg:fileTypes": "VCF, TXT, JSON, TAB"
                    },
                    {
                        "id": "compressed_vep_output",
                        "doc": "Compressed (bgzip/gzip) output.",
                        "label": "Compressed (bgzip/gzip) output",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.vep.*gz",
                            "outputEval": "$(inheritMetadata(self, inputs.in_variants))"
                        },
                        "sbg:fileTypes": "GZ"
                    },
                    {
                        "id": "summary_file",
                        "doc": "Summary stats file, if requested.",
                        "label": "Output summary stats file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*summary.*"
                        },
                        "sbg:fileTypes": "HTML, TXT"
                    },
                    {
                        "id": "warning_file",
                        "doc": "Optional file with VEP warnings and errors.",
                        "label": "Optional file with VEP warnings and errors",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*_warnings.txt"
                        },
                        "sbg:fileTypes": "TXT"
                    }
                ],
                "doc": "**Variant Effect Predictor** predicts functional effects of genomic variants [1] and is used to annotate VCF files.\n\n**Variant Effect Predictor** determines the effect of your variants (SNPs, insertions, deletions, CNVs or structural variants) on genes, transcripts, and protein sequence, as well as regulatory regions [2].\n\n*A list of **all inputs and parameters** with corresponding descriptions can be found at the end of the page.*\n\n### Common Use Cases\n\n**Variant Effect Predictor** is a tool commonly used for variant and gene level annotation of VCF or VCF.GZ files. Running the tool on Seven Bridges platform requires using a VEP cache file. VEP cache files can be obtained from our Public Reference Files section (homo_sapiens_vep_90_GRCh37.tar.gz and \thomo_sapiens_vep_90_GRCh38.tar.gz) or imported as files to your project from [Ensembl ftp site](ftp://ftp.ensembl.org/pub/current_variation/VEP/) using the [FTP/HTTP import](https://docs.sevenbridges.com/docs/upload-from-an-ftp-server) feature.\n\n### Changes Introduced by Seven Bridges\n\n- Additional boolean flags are introduced to activate the use of plugins included in the Seven Bridges version of the tool (CSN, MaxEntScan, and LoFtool plugins can be accessed with parameters **Use CSN plugin**, **Use MaxEntScan plugin**, and **Use LoFtool plugin**, respectively).\n- When using custom annotation sources (`--custom` flag) input files and parameters are specified separately and both must be provided to run the tool (inputs **Custom annotation sources** and **Annotation parameters for custom annotation sources (comma separated values, ensembl-vep --custom flag format)**). Additionally, separate inputs have been provided for BigWig custom annotation sources and parameters, as these files do not require indexing before use (inputs **Custom annotation - BigWig sources only** and **Annotation parameters for custom BigWig annotation sources only**). Tabix TBI indices are required for other custom annotation sources.\n- The following parameters have been excluded from the Seven Bridges version of the tool:\n    * `--help`: Not present in the Seven Bridges version in general.\n    * `--quiet`: Warnings are desirable.\n    * `--species [species]`: Relevant only if **Variant Effect Predictor** is connecting to the Ensembl database online, which is not the case with the tool on the platform.\n    * `--force_overwrite`: Overwriting existing output, which is not likely to be found on the Seven Bridges Platform.\n    * `--dir_cache [directory]`, `--dir_plugins [directory]`: Covered with a more general flag (`--dir`).\n    * `--cache`: The `--offline` argument is always used instead.\n    * `--format:` argument with it's corresponding suboptions `hgvs`, and `id` These options require an Ensembl database connection.\n    * `--show_cache_info`: This option only shows cache info and quits.\n    * `--plugin [plugin name]`: Several plugins are supplied in the **Variant Effect Predictor** tool on the platform (e.g. dbNSFP [4], CSN, MaxEntScan, LoFtool). However, this option was not wrapped because, in order to use any plugin, it must be installed on the **Variant Effect Predictor** docker image. Additional plugins can be added upon request.\n    * `--phased`: Used with plugins requiring phased data. No such plugins are present in the wrapper.\n    * `--database`: Database access-only option\n    * `--host [hostname]`: Database access-only option\n    * `--user [username]`: Database access-only option\n    * `--port [number]`: Database access-only option\n    * `--password [password]`: Database access-only option\n    * `--genomes`: Database access-only option\n    * `--lrg`: Database access-only option\n    * `--check_svs`: Database access-only option\n    * `--db_version [number]`: Database access-only option\n    * `--registry [filename]`: Database access-only option\n\n### Common Issues and Important Notes\n \n* Inputs **Input VCF** (`--input_file`) and **Species cache** files are required. They represent a variant file containing variants to be annotated and a database cache file used for annotating the most common variants found in the particular species, respectively. The cache file reduces the need to send requests to an outside **Variant Effect Predictor** relevant annotation database, which is usually located online.   \n* **Fasta file(s) to use to look up reference sequences** (`--fasta`) is not required, however, it is highly recommended when using **Variant Effect Predictor** in offline mode which requires a FASTA file for several annotations.\n* Please see flag descriptions or official documentation [3] for detailed descriptions of limitations.\n* The **Add gnomAD allele frequencies (or ExAc frequencies with cache < 90)** (`--af_exac` or `--af_gnomAD`) parameter should be set: Please note that ExAC data has been superseded by gnomAD data and is only accessible with older (<90) cache versions. The Seven Bridges version of the tool will automatically swap flags according to the cache version reported.\n* The **Include Ensembl identifiers when using RefSeq and merged caches** (`--all_refseq`) and **Exclude predicted transcripts when using RefSeq or merged cache** (`--exclude_predicted`) parameters should only be used with RefSeq or merged caches\n* The **Add APPRIS identifiers** (`--appris`) parameter - APPRIS is only available for GRCh38.\n* The **Fields to configure the output format (VCF or tab only) with** (`--fields`) parameter \n can only be used with VCF and TSV output.\n* The **Samples to annotate** (`--individual`) parameter requires that all samples of interest have proper genotype entries for all variant rows in the file. **Variant Effect Predictor** will not output multiple variant rows per sample if genotypes are missing in those rows.\n* If dbNSFP [4] is used for annotation, a preprocessed dbNSFP file (input **dbNSFP database file**) and dbNSFP column names (parameter **Columns of dbNSFP to report**) should be provided. dbNSFP column names should match the release of dbNSFP provided for annotation (for detailed list of column names, please consult the [readme files accompanying the dbNSFP release](https://sites.google.com/site/jpopgen/dbNSFP) used for annotation). If no dbNSFP column names are provided alongside a dbNSFP annotation file, the following example subset of columns applicable to dbNSFP versions 2.9.3 and 3.Xc will be used for annotation: `FATHMM_pred,MetaSVM_pred,GERP++_RS`.\n * If using dbscSNV for annotation, a dbscSNV file (input **dbscSNV database file**) should be provided.\n* The **Version of VEP cache if not default** parameter (`--cache_version`) must be supplied if not using a VEP 90 cache.\n* If using custom annotation sources (input **Custom annotation sources**) corresponding parameters (input **Annotation parameters for custom annotation sources (comma separated values, ensembl-vep --custom flag format)**) must be set and match the order of supplied input files.\n* Input parameter **Output only the most severe consequence per variant** (`--most_severe`) is incompatible with **Output format** `vcf`. Using this parameter produces a tab-separated output file.\n\nThe input files **GFF annotation** (`--gff`) and **GTF annotation** (`--gtf`), which are used for transcript annotation should be bgzipped (using the **Tabix Bgzip** tool) and tabix-indexed (using the **Tabix Index** tool), and a FASTA file containing genomic sequences is required (input **Fasta file(s) to use to look up reference sequence**). If preprocessing these files locally, implement the following [1]:\n\n    grep -v \"#\" data.gff | sort -k1,1 -k4,4n -k5,5n | bgzip -c > data.gff.gz\n\n    tabix -p gff data.gff.gz\n\n\n### Performance Benchmarking\n\nPerformance of **Variant Effect Predictor** will vary greatly depending on the annotation options selected and input file size. Increasing the number of forks used with the parameter **Fork number** (`--fork`) and the number of processors will help. Additionally, tabix-indexing your supplied FASTA file, or setting the **Do not generate a stats file** (`--no_stats`) flag will speed up annotation. Preprocessing the VEP cache using the **convert_cache.pl** script included in the **ensembl-vep distribution** will also help if using **Check for co-located known variants** (`--check_existing`) flag or any of the allele frequency associated flags. VEP caches available on the Seven Bridges platform have been preprocessed in this way.\nUsing **Add HGVS identifiers** (`--hgvs`) parameter will slow down the annotation process.\n\nIn the following table you can find estimates of **Variant Effect Predictor** running time and cost. Sample that was annotated was NA12878 genome (~100 Mb, as VCF.GZ).\n\n*Cost can be significantly reduced by **spot instance** usage. Visit [knowledge center](https://docs.sevenbridges.com/docs/about-spot-instances) for more details.*            \n\n                   \n| Experiment type  | Duration | Cost | Instance (AWS)|\n|-----------------------|-----------------|------------|-----------------|-------------|--------------|------------------|-------------|---------------|\n| All available annotations, all plugins, and dbSNP v150 as a custom annotation source   | 53 min   | $0.35            |c4.2xlarge      |\n| Basic annotations, without plugins and dbSNP v150  | 35 min    | $0.23                | c4.2xlarge     |\n\n\n### References\n\n[1] [Ensembl Variant Effect Predictor github page](https://github.com/Ensembl/ensembl-vep)\n\n[2] [Homepage](http://www.ensembl.org/info/docs/tools/vep/script/index.html)\n\n[3] [Running VEP - Documentation page](https://www.ensembl.org/info/docs/tools/vep/script/vep_options.html)\n\n[4] [dbNSFP](https://sites.google.com/site/jpopgen/dbNSFP)",
                "label": "Variant Effect Predictor CWL1.0",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${ return \"tar xfz\";\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "$(inputs.cache_file.path)"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${ return \"-C /opt/ensembl-vep/ &&\";\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n  return \"perl -I /root/.vep/Plugins/\";\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${ return \"/opt/ensembl-vep/vep\";\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "--offline"
                    },
                    {
                        "prefix": "--dir",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/opt/ensembl-vep"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1000,
                        "valueFrom": "${\n  if ((!inputs.no_stats) && (!inputs.stats_text))\n  {\n    return \"; sed -i 's=http:\\/\\/www.google.com\\/jsapi=https:\\/\\/www.google.com\\/jsapi=g' *summary.html\";\n  }\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n  if(inputs.memory_for_job>0)\n  \treturn inputs.memory_for_job;\n  else\n    return 15000;\n}",
                        "coresMin": "${\n  if(inputs.cpu_per_job>0)\n  \treturn inputs.cpu_per_job;\n  else\n    return 8;\n}"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/jrandjelovic/ensembl-vep:v90.5"
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:toolkit": "ensembl-vep",
                "sbg:toolkitVersion": "90.5",
                "sbg:links": [
                    {
                        "id": "https://github.com/Ensembl/ensembl-vep",
                        "label": "Source Code"
                    },
                    {
                        "id": "http://www.ensembl.org/info/docs/tools/vep/script/index.html",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-0974-4",
                        "label": "Publication"
                    }
                ],
                "sbg:toolAuthor": "Ensembl",
                "sbg:license": "Modified Apache licence",
                "sbg:categories": [
                    "Annotation",
                    "VCF Processing"
                ],
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1560293928,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1560293944,
                        "sbg:revisionNotes": "init"
                    }
                ],
                "sbg:image_url": null,
                "sbg:projectName": "targetni_exom_pilot",
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "tamara_drljaca/targetni-exom-pilot/variant-effect-predictor-90-5-cwl1-0/1",
                "sbg:revision": 1,
                "sbg:revisionNotes": "init",
                "sbg:modifiedOn": 1560293944,
                "sbg:modifiedBy": "vladimirk",
                "sbg:createdOn": 1560293928,
                "sbg:createdBy": "vladimirk",
                "sbg:project": "tamara_drljaca/targetni-exom-pilot",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "vladimirk"
                ],
                "sbg:latestRevision": 1,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a7d6246549fa6975f64eaa4fdd1f88e3a98166e86327620eef6e434a7d95bd607"
            },
            "label": "Variant Effect Predictor CWL1.0",
            "sbg:x": 3302.134521484375,
            "sbg:y": -954.5307006835938
        },
        {
            "id": "gatk4_genotypegvcfs",
            "in": [
                {
                    "id": "reference",
                    "source": "reference_sequence"
                },
                {
                    "id": "variants",
                    "source": "gatk_haplotypecaller_4_1_0_0/out_variants"
                },
                {
                    "id": "dbsnp",
                    "source": "dbsnp"
                }
            ],
            "out": [
                {
                    "id": "vcf"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "tamara_drljaca/targetni-exom-pilot/gatk4-genotypegvcfs/1",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Required Arguments",
                        "id": "reference",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence file Required.",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:altPrefix": "-V",
                        "sbg:category": "Required Arguments",
                        "id": "variants",
                        "type": "File",
                        "label": "Variants",
                        "doc": "A VCF file containing variants Required.",
                        "sbg:fileTypes": "G.VCF"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "add_output_sam_program_record",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--add-output-sam-program-record",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Add Output Sam Program Record",
                        "doc": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "annotate_nda",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--annotate-with-num-discovered-alleles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Annotate Nda",
                        "doc": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "cloud_index_prefetch_buffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloud-index-prefetch-buffer",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cloud Index Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "cloud_prefetch_buffer",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--cloud-prefetch-buffer",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Cloud Prefetch Buffer",
                        "doc": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_bam_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-bam-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Bam Index",
                        "doc": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_bam_md5",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-bam-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Bam Md5",
                        "doc": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_variant_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-variant-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Variant Index",
                        "doc": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "create_output_variant_md5",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--create-output-variant-md5",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Output Variant Md5",
                        "doc": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "dbsnp",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--dbsnp",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dbsnp",
                        "doc": "DbSNP file Default value: null.",
                        "sbg:fileTypes": "VCF, VCF.GZ",
                        "secondaryFiles": [
                            ".idx"
                        ]
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_bam_index_caching",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-bam-index-caching",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Bam Index Caching",
                        "doc": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_read_filter",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "GoodCigarReadFilter",
                                    "MappedReadFilter",
                                    "MappingQualityAvailableReadFilter",
                                    "MappingQualityReadFilter",
                                    "NonZeroReferenceLengthAlignmentReadFilter",
                                    "NotDuplicateReadFilter",
                                    "NotSecondaryAlignmentReadFilter",
                                    "PassesVendorQualityCheckReadFilter",
                                    "WellformedReadFilter"
                                ],
                                "name": "disable_read_filter"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--disable-read-filter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Read Filter",
                        "doc": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_sequence_dictionary_validation",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-sequence-dictionary-validation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Sequence Dictionary Validation",
                        "doc": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "disable_tool_default_read_filters",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--disable-tool-default-read-filters",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Disable Tool Default Read Filters",
                        "doc": "Disable all tool default read filters Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "heterozygosity",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--heterozygosity",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Heterozygosity",
                        "doc": "Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept Default value: 0.001."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "heterozygosity_stdev",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--heterozygosity-stdev",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Heterozygosity Stdev",
                        "doc": "Standard deviation of eterozygosity for SNP and indel calling. Default value: 0.01."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "indel_heterozygosity",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--indel-heterozygosity",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Indel Heterozygosity",
                        "doc": "Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept Default value: 1.25E-4."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "interval_exclusion_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-exclusion-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Exclusion Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "interval_padding",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--interval-padding",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Padding",
                        "doc": "Amount of padding (in bp) to add to each interval you are including. Default value: 0."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "interval_merging_rule",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--interval-merging-rule",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Interval Set Rule",
                        "doc": "Interval merging rule for abutting intervals  Default value: ALL. Possible values: {ALL, OVERLAPPING_ONLY}"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "lenient",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--lenient",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Lenient",
                        "doc": "Lenient processing of VCF files Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "quiet",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--quiet",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quiet",
                        "doc": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_filter",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "AlignmentAgreesWithHeaderReadFilter",
                                    "AllowAllReadsReadFilter",
                                    "AmbiguousBaseReadFilter",
                                    "CigarContainsNoNOperator",
                                    "FirstOfPairReadFilter",
                                    "FragmentLengthReadFilter",
                                    "GoodCigarReadFilter",
                                    "HasReadGroupReadFilter",
                                    "LibraryReadFilter",
                                    "MappedReadFilter",
                                    "MappingQualityAvailableReadFilter",
                                    "MappingQualityNotZeroReadFilter",
                                    "MappingQualityReadFilter",
                                    "MatchingBasesAndQualsReadFilter",
                                    "MateDifferentStrandReadFilter",
                                    "MateOnSameContigOrNoMappedMateReadFilter",
                                    "MetricsReadFilter",
                                    "NonZeroFragmentLengthReadFilter",
                                    "NonZeroReferenceLengthAlignmentReadFilter",
                                    "NotDuplicateReadFilter",
                                    "NotOpticalDuplicateReadFilter",
                                    "NotSecondaryAlignmentReadFilter",
                                    "NotSupplementaryAlignmentReadFilter",
                                    "OverclippedReadFilter",
                                    "PairedReadFilter",
                                    "PassesVendorQualityCheckReadFilter",
                                    "PlatformReadFilter",
                                    "PlatformUnitReadFilter",
                                    "PrimaryLineReadFilter",
                                    "ProperlyPairedReadFilter",
                                    "ReadGroupBlackListReadFilter",
                                    "ReadGroupReadFilter",
                                    "ReadLengthEqualsCigarLengthReadFilter",
                                    "ReadLengthReadFilter",
                                    "ReadNameReadFilter",
                                    "ReadStrandFilter",
                                    "SampleReadFilter",
                                    "SecondOfPairReadFilter",
                                    "SeqIsStoredReadFilter",
                                    "ValidAlignmentEndReadFilter",
                                    "ValidAlignmentStartReadFilter",
                                    "WellformedReadFilter"
                                ],
                                "name": "read_filter"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-filter",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Filter",
                        "doc": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_index",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-index",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Index",
                        "doc": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "read_validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "read_validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--read-validation-stringency",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Validation Stringency",
                        "doc": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "sample_ploidy",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--sample-ploidy",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample Ploidy",
                        "doc": "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy). Default value: 2."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "seconds_between_progress_updates",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--seconds-between-progress-updates",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Seconds Between Progress Updates",
                        "doc": "Output traversal statistics every time this many seconds elapse Default value: 10.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "standard_min_confidence_threshold_for_calling",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--standard-min-confidence-threshold-for-calling",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Standard Min Confidence Threshold For Calling",
                        "doc": "The minimum phred-scaled confidence threshold at which variants should be called Default value: 10.0."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "use_jdk_deflater",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-jdk-deflater",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use Jdk Deflater",
                        "doc": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "use_jdk_inflater",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-jdk-inflater",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use Jdk Inflater",
                        "doc": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "use_new_af_calculator",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--use-new-af-calculator",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Use New Af Calculator",
                        "doc": "If provided, we will use the new AF model instead of the so-called exact model Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Advanced Arguments",
                        "id": "annotation",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--annotation",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Annotation",
                        "doc": "One or more specific annotations to recompute. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Advanced Arguments",
                        "id": "annotations_to_exclude",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--annotations-to-exclude",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Annotations To Exclude",
                        "doc": "One or more specific annotations to exclude from recomputation. This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Advanced Arguments",
                        "id": "group",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--group",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Group",
                        "doc": "One or more classes/groups of annotations to apply to variant calls This argument may be specified 0 or more times. Default value: [StandardAnnotation]."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Advanced Arguments",
                        "id": "input_prior",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--input-prior",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Input Prior",
                        "doc": "Input prior for calls This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Advanced Arguments",
                        "id": "max_alternate_alleles",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-alternate-alleles",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Alternate Alleles",
                        "doc": "Maximum number of alternate alleles to genotype Default value: 6."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Advanced Arguments",
                        "id": "max_genotype_count",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-genotype-count",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Genotype Count",
                        "doc": "Maximum number of genotypes to consider at any site Default value: 1024."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "ambig_filter_frac",
                        "type": "float?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-frac",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig Filter Frac",
                        "doc": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "max_fragment_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-fragment-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Fragment Length",
                        "doc": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "library",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--library",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Library",
                        "doc": "The name of the library to keep Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "maximum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--maximum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Maximum Mapping Quality",
                        "doc": "Maximum mapping quality to keep (inclusive) Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "minimum_mapping_quality",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--minimum-mapping-quality",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Minimum Mapping Quality",
                        "doc": "Minimum mapping quality to keep (inclusive) Default value: 10."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "dont_require_soft_clips_both_ends",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--dont-require-soft-clips-both-ends",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Dont Require Soft Clips Both Ends",
                        "doc": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "filter_too_short",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--filter-too-short",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Filter Too Short",
                        "doc": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "pl_filter_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--pl-filter-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Pl Filter Name",
                        "doc": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "black_listed_lanes",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--black-listed-lanes",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Black Listed Lanes",
                        "doc": "Keep reads with platform units not on the list This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "black_list",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--black-list",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Black List",
                        "doc": "This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "keep_read_group",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--keep-read-group",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Read Group",
                        "doc": "The name of the read group to keep Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "max_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--max-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Read Length",
                        "doc": "Keep only reads with length at most equal to the specified value Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "min_read_length",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--min-read-length",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Min Read Length",
                        "doc": "Keep only reads with length at least equal to the specified value Default value: 1."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "read_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--read-name",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Read Name",
                        "doc": "Keep only reads with this read name Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "keep_reverse",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--keep-reverse",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Keep Reverse",
                        "doc": "Keep only reads on the reverse strand Required. Possible values: {true, false}."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "sample",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--sample",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Sample",
                        "doc": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals File",
                        "doc": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Intervals File",
                        "doc": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
                        "sbg:fileTypes": "TXT, BED"
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "intervals_string",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Intervals String",
                        "doc": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Optional Arguments",
                        "id": "exclude_intervals_string",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "--exclude-intervals",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Exclude Intervals String",
                        "doc": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null."
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "2048",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory Per Job",
                        "doc": "Memory per job in MB."
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "64",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory Overhead Per Job",
                        "doc": "Memory overhead per job."
                    },
                    {
                        "sbg:altPrefix": "",
                        "sbg:category": "Conditional Arguments for readFilter",
                        "id": "ambig_filter_bases",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--ambig-filter-bases",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Ambig Filter Bases",
                        "doc": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction."
                    }
                ],
                "outputs": [
                    {
                        "id": "vcf",
                        "doc": "Output VCF.",
                        "label": "Output VCF",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.variants)\n\n}"
                        },
                        "sbg:fileTypes": "VCF"
                    }
                ],
                "doc": "Perform joint genotyping on one or more samples pre-called with HaplotypeCaller.\n\n###**Overview**  \nThis tool is designed to perform joint genotyping on multiple samples pre-called with HaplotypeCaller to produce a multi-sample callset in a highly scalable manner. However it can also be run on a single sample at a time to produce a single-sample callset. In any case, the input samples must possess genotype likelihoods produced by HaplotypeCaller with `-ERC GVCF` or `-ERC BP_RESOLUTION`.re-genotype the newly merged record, and then re-annotate it.\n\n###**Input**  \nOne or more GVCFs produced by in HaplotypeCaller with the `-ERC GVCF` or `-ERC BP_RESOLUTION` settings, containing the samples to joint-genotype. \n\n###**Output**  \nA final VCF in which all samples have been jointly genotyped. \n\n###**Usage example**   \n\n####**Perform joint genotyping on a set of GVCFs enumerated in the command line**\n\n     gatk-launch --javaOptions \"-Xmx4g\" GenotypeGVCFs \\\n       -R reference.fasta \\\n       -V input1.g.vcf \\\n       -V input2.g.vcf \\\n       -V input3.g.vcf \\\n       -O output.vcf\n\n####**Perform joint genotyping on a set of GVCFs listed in a text file, one per line**\n\n     gatk-launch --javaOptions \"-Xmx4g\" GenotypeGVCFs \\\n       -R reference.fasta \\\n       -V input_gvcfs.list \\\n       -O output.vcf\n \n###**Caveat**  \nOnly GVCF files produced by HaplotypeCaller (or CombineGVCFs) can be used as input for this tool. Some other programs produce files that they call GVCFs but those lack some important information (accurate genotype likelihoods for every position) that GenotypeGVCFs requires for its operation. \n\n###**Special note on ploidy**  \nThis tool is able to handle any ploidy (or mix of ploidies) intelligently; there is no need to specify ploidy for non-diploid organisms.  \n\n###**Additional Notes**\n- By default, the tool works only with VCF resource files. To use VCF.GZ resource files, the tool wrapper needs to be modified.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
                "label": "GATK GenotypeGVCFs",
                "arguments": [
                    {
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/gatk/gatk"
                    },
                    {
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--java-options"
                    },
                    {
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"'\n    }\n    return '\\\"-Xmx2048M\\\"'\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "GenotypeGVCFs"
                    },
                    {
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    variant_name = [].concat(inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    variant_namebase = variant_name.slice(0, variant_name.length).join('.')\n    variant_namebase = variant_namebase.replace('.g.vcf', '.vcf')\n    return '--output ' + variant_namebase\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    variants = [].concat(inputs.variants)\n\n    cmd = []\n\n    for (i = 0; i < variants.length; i++) {\n        cmd.push('--variant', variants[i].path)\n    }\n\n    return cmd.join(' ')\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job\n        } else\n            return inputs.memory_per_job\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job\n    } else\n        return 2048\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/gatk:4.1.0.0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "GATK-4"
                ],
                "sbg:image_url": null,
                "sbg:wrapperAuthor": "filip_tubic",
                "sbg:cmdPreview": "/gatk/gatk --java-options \"-Xmx2048M\" GenotypeGVCFs --reference /path/to/reference.ext  --output variants.ext  --variant /path/to/variants.ext",
                "sbg:toolkitVersion": "4.0.2.0",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://software.broadinstitute.org/gatk/"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/"
                    },
                    {
                        "label": "Download",
                        "id": "https://software.broadinstitute.org/gatk/download/"
                    }
                ],
                "sbg:toolkit": "GATK",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:projectName": "targetni_exom_pilot",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1562760701,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1562760749,
                        "sbg:revisionNotes": "init"
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "tamara_drljaca/targetni-exom-pilot/gatk4-genotypegvcfs/1",
                "sbg:revision": 1,
                "sbg:revisionNotes": "init",
                "sbg:modifiedOn": 1562760749,
                "sbg:modifiedBy": "vladimirk",
                "sbg:createdOn": 1562760701,
                "sbg:createdBy": "vladimirk",
                "sbg:project": "tamara_drljaca/targetni-exom-pilot",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "vladimirk"
                ],
                "sbg:latestRevision": 1,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a85d506ee5bafcab55d31574267881d2ecea085a4ac3b124b4a25f389a38bb490"
            },
            "label": "GATK GenotypeGVCFs",
            "scatter": [
                "variants"
            ],
            "sbg:x": 2401.788818359375,
            "sbg:y": -397.8902893066406
        },
        {
            "id": "mergevcfs_GVCFs",
            "in": [
                {
                    "id": "input",
                    "source": [
                        "gatk_haplotypecaller_4_1_0_0/out_variants"
                    ]
                }
            ],
            "out": [
                {
                    "id": "output"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/mergevcfs/8",
                "baseCommand": [],
                "inputs": [
                    {
                        "sbg:category": "Required Arguments",
                        "sbg:altPrefix": "-I",
                        "id": "input",
                        "type": "File[]",
                        "label": "Input",
                        "doc": "VCF input files File format is determined by file extension. This argument must be specified at least once. Required."
                    },
                    {
                        "sbg:toolDefaultValue": "5",
                        "sbg:category": "Optional Arguments",
                        "id": "compression_level",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--COMPRESSION_LEVEL",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Compression Level",
                        "doc": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5."
                    },
                    {
                        "sbg:toolDefaultValue": "true",
                        "sbg:category": "Optional Arguments",
                        "id": "create_index",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--CREATE_INDEX",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Index",
                        "doc": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: true. Possible values: {true, false}."
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:category": "Optional Arguments",
                        "id": "create_md5_file",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--CREATE_MD5_FILE",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Create Md5 File",
                        "doc": "Whether to create an MD5 digest for any BAM or FASTQ files created. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:toolDefaultValue": "500000",
                        "sbg:category": "Optional Arguments",
                        "id": "max_records_in_ram",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "--MAX_RECORDS_IN_RAM",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Max Records In Ram",
                        "doc": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000."
                    },
                    {
                        "sbg:toolDefaultValue": "false",
                        "sbg:category": "Optional Arguments",
                        "id": "quiet",
                        "type": "boolean?",
                        "inputBinding": {
                            "prefix": "--QUIET",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Quiet",
                        "doc": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "reference",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--reference",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Reference",
                        "doc": "Reference sequence file. Default value: null.",
                        "secondaryFiles": [
                            ".fai",
                            "^.dict"
                        ]
                    },
                    {
                        "sbg:toolDefaultValue": "STRICT",
                        "sbg:category": "Optional Arguments",
                        "id": "validation_stringency",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ],
                                "name": "validation_stringency"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--VALIDATION_STRINGENCY",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Validation Stringency",
                        "doc": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. Possible values: {STRICT, LENIENT, SILENT}."
                    },
                    {
                        "sbg:toolDefaultValue": "INFO",
                        "sbg:category": "Optional Arguments",
                        "id": "verbosity",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ],
                                "name": "verbosity"
                            }
                        ],
                        "inputBinding": {
                            "prefix": "--VERBOSITY",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Verbosity",
                        "doc": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}."
                    },
                    {
                        "sbg:category": "Optional Arguments",
                        "id": "do_not_clip_intervals",
                        "type": "boolean?",
                        "label": "Clip Intervals",
                        "doc": "Clip intervals name from output file name"
                    },
                    {
                        "sbg:toolDefaultValue": "2048",
                        "sbg:category": "Execution",
                        "id": "memory_per_job",
                        "type": "int?",
                        "label": "Memory per job in MB",
                        "doc": "Memory per job in MB."
                    },
                    {
                        "sbg:category": "Execution",
                        "id": "memory_overhead_per_job",
                        "type": "int?",
                        "label": "Memory overhead per jobin MB",
                        "doc": "Memory overhead per job."
                    }
                ],
                "outputs": [
                    {
                        "id": "output",
                        "doc": "The merged VCF file. File format is determined by file extension.",
                        "label": "The merged VCF file.",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "${\n    var input_files = [].concat(inputs.input);\n\n    if (input_files[0].path.endsWith('.gz'))\n        return '*.vcf.gz';\n    else\n        return '*.vcf';\n        \n    return '';\n}",
                            "outputEval": "${\n    return inheritMetadata(self, inputs.input);\n\n}"
                        },
                        "secondaryFiles": [
                            ".idx"
                        ],
                        "sbg:fileTypes": "VCF"
                    }
                ],
                "doc": "Merges multiple sorted VCF files into one VCF file. \n\n\n###**Common Use Cases**  \nThe most frequent use case is gathering and merging VCF files from HaplotypeCaller scatter jobs.\n\n###**Changes Introduced by Seven Bridges**\nName of the output VCF is given by searching for the common prefix in input VCF files.\n\n###**Common Issues and Important Notes**  \nInput files must be sorted by their contigs and, within contigs, by start position. The input files must have the same sample and contig lists. \n\nAn index file is created and a sequence dictionary is required by default.\n\nThrows IllegalArgumentException if the contig lists are not present in the input files, are not identical or if the sample lists are not the same;this class uses the GATK to merge headers, which may throw exceptions if the headers cannot be merged. See VCFUtils.smartMergeHeaders for details.\nAn index file is created for the output file by default. Using an output file name with a \".gz\" extension will create gzip-compressed output.",
                "label": "GATK MergeVcfs",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "/usr/gitc/gatk4/gatk-launch"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "--javaOptions"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 2,
                        "valueFrom": "${\n    if (inputs.memory_per_job) {\n        return '\\\"-Xmx'.concat(inputs.memory_per_job, 'M') + '\\\"';\n    }\n    return '\\\"-Xmx2048M\\\"';\n}"
                    },
                    {
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "MergeVcfs"
                    },
                    {
                        "prefix": "--output",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    function find_prefix(variants) {\n        var prefix = '';\n        var first = variants[0].path.replace(/^.*[\\\\\\/]/, '');\n\n        // Finds longest common prefix between variant names\n        for (var i = 1; i < variants.length; ++i) {\n            var j = 0;\n            var current = variants[i].path.replace(/^.*[\\\\\\/]/, '');\n\n            while (first[j] == current[j] &&\n                j < (first.length - 1) &&\n                j < (current.length - 1)) ++j;\n\n            // Inits prefixs or shortens it\n            if (i == 1 || prefix.length > j)\n                prefix = first.slice(0, j);\n        }\n\n        // Clips trailing characters\n        while (prefix.endsWith('.') || prefix.endsWith('_') || prefix.endsWith('-'))\n            prefix = prefix.slice(0, prefix.length - 1);\n\n        return prefix;\n    }\n\n\n    var variants = [].concat(inputs.input);\n\n    if (!inputs.do_not_clip_intervals && variants.length > 1) {\n        var first = variants[0].path.replace(/^.*[\\\\\\/]/, '');\n\n        var extensions = '';\n\n        if (first.endsWith('.g.vcf'))\n            extensions = '.g.vcf';\n        else if (first.endsWith('.vcf'))\n            extensions = '.vcf';\n        else if (first.endsWith('.g.vcf.gz'))\n            extensions = '.g.vcf.gz';\n        else if (first.endsWith('.vcf.gz'))\n            extensions = '.vcf.gz';\n\n        var prefix = find_prefix(variants);\n\n        if (prefix.length > 0)\n            return prefix + extensions;\n        else\n            return variants[0].path.replace(/^.*[\\\\\\/]/, '');\n    } else\n        return variants[0].path.replace(/^.*[\\\\\\/]/, '');\n    return '';\n}"
                    },
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 4,
                        "valueFrom": "${\n    var input_files = [].concat(inputs.input);\n    var cmd = [];\n\n    for (var i = 0; i < input_files.length; i++) {\n        cmd.push('--input', input_files[i].path);\n    }\n\n    return cmd.join(' ');\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": "${\n    if (inputs.memory_per_job) {\n        if (inputs.memory_overhead_per_job) {\n            return inputs.memory_per_job + inputs.memory_overhead_per_job;\n        } else\n            return inputs.memory_per_job;\n    } else if (!inputs.memory_per_job && inputs.memory_overhead_per_job) {\n        return 2048 + inputs.memory_overhead_per_job;\n    } else\n        return 2048;\n    return 2048;\n}",
                        "coresMin": 1
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/ana_d/genomes-in-the-cloud:2.3.2-1510681135"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": []
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "var updateMetadata = function(file, key, value) {\n    file['metadata'][key] = value;\n    return file;\n};\n\n\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file))\n        file['metadata'] = metadata;\n    else {\n        for (var key in metadata) {\n            file['metadata'][key] = metadata[key];\n        }\n    }\n    return file\n};\n\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n        }\n    }\n    return o1;\n};\n\nvar toArray = function(file) {\n    return [].concat(file);\n};\n\nvar groupBy = function(files, key) {\n    var groupedFiles = [];\n    var tempDict = {};\n    for (var i = 0; i < files.length; i++) {\n        var value = files[i]['metadata'][key];\n        if (value in tempDict)\n            tempDict[value].push(files[i]);\n        else tempDict[value] = [files[i]];\n    }\n    for (var key in tempDict) {\n        groupedFiles.push(tempDict[key]);\n    }\n    return groupedFiles;\n};\n\nvar orderBy = function(files, key, order) {\n    var compareFunction = function(a, b) {\n        if (a['metadata'][key].constructor === Number) {\n            return a['metadata'][key] - b['metadata'][key];\n        } else {\n            var nameA = a['metadata'][key].toUpperCase();\n            var nameB = b['metadata'][key].toUpperCase();\n            if (nameA < nameB) {\n                return -1;\n            }\n            if (nameA > nameB) {\n                return 1;\n            }\n            return 0;\n        }\n    };\n\n    files = files.sort(compareFunction);\n    if (order == undefined || order == \"asc\")\n        return files;\n    else\n        return files.reverse();\n};"
                        ]
                    }
                ],
                "sbg:categories": [
                    "GATK-4"
                ],
                "sbg:cmdPreview": "/gatk/gatk --java-options \"-Xmx1M\" MergeVcfs --OUTPUT input-1.vcf  --INPUT /path/to/input-1.vcf --INPUT /path/to/input-2.vcf --INPUT /path/to/input-3.vcf",
                "sbg:toolAuthor": "Broad Institute",
                "sbg:license": "Open source BSD (3-clause) license",
                "sbg:toolkitVersion": "4.beta.5",
                "sbg:toolkit": "GATK",
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://software.broadinstitute.org/gatk/",
                        "label": "Homepage"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
                        "label": "Documentation"
                    },
                    {
                        "id": "https://software.broadinstitute.org/gatk/download/",
                        "label": "Download"
                    }
                ],
                "sbg:projectName": "GATK genomes-in-the-cloud:2.3.2-1510681135 DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555340122,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk",
                        "sbg:modifiedOn": 1555340735,
                        "sbg:revisionNotes": "latest docker images.sbgenomics.com/vladimirk/gatk:4.1.0.0"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555342780,
                        "sbg:revisionNotes": "docker and cmd"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555343344,
                        "sbg:revisionNotes": "prefixes fix"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555344275,
                        "sbg:revisionNotes": "description"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555346082,
                        "sbg:revisionNotes": "just added test files names"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk_user",
                        "sbg:modifiedOn": 1555346366,
                        "sbg:revisionNotes": "do_not_clip_intervals instead clip_intervals"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1555348454,
                        "sbg:revisionNotes": "add secondary .idx file for vcf output file"
                    },
                    {
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "stefan_stojanovic",
                        "sbg:modifiedOn": 1558952276,
                        "sbg:revisionNotes": "fix javascript, add vars, semicolons etc."
                    }
                ],
                "sbg:appVersion": [
                    "v1.0"
                ],
                "sbg:id": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev/mergevcfs/8",
                "sbg:revision": 8,
                "sbg:revisionNotes": "fix javascript, add vars, semicolons etc.",
                "sbg:modifiedOn": 1558952276,
                "sbg:modifiedBy": "stefan_stojanovic",
                "sbg:createdOn": 1555340122,
                "sbg:createdBy": "stefan_stojanovic",
                "sbg:project": "ana_d/gatk-genomes-in-the-cloud-2-3-2-1510681135-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "vladimirk_user",
                    "vladimirk",
                    "stefan_stojanovic"
                ],
                "sbg:latestRevision": 8,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "acfd99f19d6e1f0eb9fe874f9d1c840c5eae4f7143c1af330b8d19fa238671e50"
            },
            "label": "GATK MergeVcfs",
            "sbg:x": 2434.5048828125,
            "sbg:y": -172.1222686767578
        }
    ],
    "hints": [
        {
            "class": "sbg:AWSInstanceType",
            "value": "c5.9xlarge;ebs-gp2;1200"
        }
    ],
    "requirements": [
        {
            "class": "SubworkflowFeatureRequirement"
        },
        {
            "class": "ScatterFeatureRequirement"
        },
        {
            "class": "MultipleInputFeatureRequirement"
        },
        {
            "class": "InlineJavascriptRequirement"
        },
        {
            "class": "StepInputExpressionRequirement"
        }
    ],
    "sbg:projectName": "SRB_exome",
    "sbg:revisionsInfo": [
        {
            "sbg:revision": 0,
            "sbg:modifiedBy": "m3006_td",
            "sbg:modifiedOn": 1585316534,
            "sbg:revisionNotes": "Copy of tamara_drljaca/novi-targetni-exom/gatk-bp-wgs/0"
        }
    ],
    "sbg:image_url": "https://cgc.sbgenomics.com/ns/brood/images/m3006_td/srb-exome/gatk-bp-wgs/0.png",
    "sbg:appVersion": [
        "v1.0"
    ],
    "sbg:id": "m3006_td/srb-exome/gatk-bp-wgs/0",
    "sbg:revision": 0,
    "sbg:revisionNotes": "Copy of tamara_drljaca/novi-targetni-exom/gatk-bp-wgs/0",
    "sbg:modifiedOn": 1585316534,
    "sbg:modifiedBy": "m3006_td",
    "sbg:createdOn": 1585316534,
    "sbg:createdBy": "m3006_td",
    "sbg:project": "m3006_td/srb-exome",
    "sbg:sbgMaintained": false,
    "sbg:validationErrors": [],
    "sbg:contributors": [
        "m3006_td"
    ],
    "sbg:latestRevision": 0,
    "sbg:publisher": "sbg",
    "sbg:content_hash": "abc8dc907d5376f6138dcfe728bdf8c4f69c59f4f712b0ddedbcda0420a0e3928",
    "sbg:copyOf": "tamara_drljaca/novi-targetni-exom/gatk-bp-wgs/0"
}